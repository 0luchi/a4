from synch import Lock, acquire, release
from alloc import malloc, free

def Disque() returns d:
  d = {.current: None, .lock: Lock()}

def insert(d, v):
  let node = malloc({.value: v, .next: None, .prev: None}):
    acquire(?d -> lock)

    if d->current == None:
      node.next = node
      node.prev = node
      d->current = node
    else:
      d -> current -> prev -> next = node
      node.next = d -> current

    release(?d -> lock)

def delete(d) returns returnVal:
    acquire(?d -> lock)
    returnVal = None

    if d->current != None: 
      returnVal = d -> current -> value
      if d->current->next == d->current: 
          d->current->next = None
          d->current->prev = None
          d->current=None
      else: 
          currNext = d -> current -> next
          currPrev = d -> current -> prev
          currPrev -> next = currNext
          currNext -> prev = currPrev
          d -> current = currNext

    release(?d -> lock)
  

def next(d) returns returnVal:
    acquire(?d -> lock)
    returnVal = None

    if d -> current != None: 
      returnVal = d -> current -> value
      d-> current = d->current-> next

    release(?d -> lock)
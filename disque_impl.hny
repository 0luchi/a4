from synch import Lock, acquire, release
from alloc import malloc, free

def Disque() returns d:
  d = {.current: None, .lock: lock()}

def insert(d, v):
  let node = malloc({.value: v, .next: None, .prev: None}):
    acquire(?d -> lock)

    if d->current == None:
      node.next = node
      node.prev = node
      d->current = node
    else:
      d -> current -> prev -> next = node
      node.next = d -> current

    release(?d -> lock)

def delete(d):
  acquire(?d -> lock)
  if d->current == None: return None
  returnVal = d -> current -> value
  if d->current->next == d->current: 
    d->current->next = None
    d->current->prev = None
    d->current=None
  else: 
    currNext = d -> current -> next
    currPrev = d -> current -> prev
    currPrev -> next = currNext
    currNext -> prev = currPrev
    d -> current = currNext
  return returnVal
  release(?d -> lock)

def next(d):
  pass

# 3 --> 5 --> 6 --> 7
# 2 at postition 1
# 3 --> 2 --> 5 --> 6 --> 7
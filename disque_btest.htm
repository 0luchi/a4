<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>
#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
.table-transparent {
    border-collapse: collapse;
    border-style: hidden;
    border: none !important;
}
.table-transparent td {
    border-collapse: collapse;
    border-style: hidden;
    border: none !important;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: No issues
      </th>
    </tr>
  </thead>
</table>
    </td>
  </tr>
  <tr><td colspan='2'></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td><td></td></tr>
  <tr>
    <td valign='top'>
<div id='HVMcode'>
 <h3 align='center'>Harmony bytecode</h3>
 <div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C1'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method subseq' id='C2'>
              Frame subseq(s, b, e)
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C3'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C4'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu3' id='C5'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of b' id='C6'>
              LoadVar b
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable b' id='C7'>
              DelVar b
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C8'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C9'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C10'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C11'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C12'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C13'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to x; push False or True depending on success' id='C14'>
              Cut(x)
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 26 if the value is False' id='C15'>
              JumpCond False 26
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu3' id='C16'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu3' id='C17'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C18'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of x' id='C19'>
              LoadVar x
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C20'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C21'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C22'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C23'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu3' id='C24'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 14' id='C25'>
              Jump 14
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C26'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable x' id='C27'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu3' id='C28'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu3' id='C29'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C30'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C31'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C32'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method append' id='C33'>
              Frame append(s, e)
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C34'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C35'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C36'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C37'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C38'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C39'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C40'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C41'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C42'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C43'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C44'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method head' id='C45'>
              Frame head(s)
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C46'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C47'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C48'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C49'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C50'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C51'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C52'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C53'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C54'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method tail' id='C55'>
              Frame tail(s)
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C56'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C57'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C58'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C59'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C60'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C61'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C62'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P63'>
          <td align='right'>
            <a name='P63'>63</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address of a method variable and delete that variable' id='C63'>
              DelVar [result]
            </span>
          </td>
        </tr>
        <tr id='P64'>
          <td align='right'>
            <a name='P64'>64</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C64'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P65'>
          <td align='right'>
            <a name='P65'>65</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C65'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P66'>
          <td align='right'>
            <a name='P66'>66</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method values' id='C66'>
              Frame values(d)
            </span>
          </td>
        </tr>
        <tr id='P67'>
          <td align='right'>
            <a name='P67'>67</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C67'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P68'>
          <td align='right'>
            <a name='P68'>68</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C68'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P69'>
          <td align='right'>
            <a name='P69'>69</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu52' id='C69'>
              StoreVar $accu52
            </span>
          </td>
        </tr>
        <tr id='P70'>
          <td align='right'>
            <a name='P70'>70</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C70'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P71'>
          <td align='right'>
            <a name='P71'>71</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C71'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P72'>
          <td align='right'>
            <a name='P72'>72</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C72'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P73'>
          <td align='right'>
            <a name='P73'>73</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to _:v; push False or True depending on success' id='C73'>
              Cut(_, v)
            </span>
          </td>
        </tr>
        <tr id='P74'>
          <td align='right'>
            <a name='P74'>74</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable _' id='C74'>
              DelVar _
            </span>
          </td>
        </tr>
        <tr id='P75'>
          <td align='right'>
            <a name='P75'>75</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 83 if the value is False' id='C75'>
              JumpCond False 83
            </span>
          </td>
        </tr>
        <tr id='P76'>
          <td align='right'>
            <a name='P76'>76</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu52' id='C76'>
              LoadVar $accu52
            </span>
          </td>
        </tr>
        <tr id='P77'>
          <td align='right'>
            <a name='P77'>77</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu52' id='C77'>
              DelVar $accu52
            </span>
          </td>
        </tr>
        <tr id='P78'>
          <td align='right'>
            <a name='P78'>78</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C78'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P79'>
          <td align='right'>
            <a name='P79'>79</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C79'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P80'>
          <td align='right'>
            <a name='P80'>80</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C80'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P81'>
          <td align='right'>
            <a name='P81'>81</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu52' id='C81'>
              StoreVar $accu52
            </span>
          </td>
        </tr>
        <tr id='P82'>
          <td align='right'>
            <a name='P82'>82</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 73' id='C82'>
              Jump 73
            </span>
          </td>
        </tr>
        <tr id='P83'>
          <td align='right'>
            <a name='P83'>83</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C83'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P84'>
          <td align='right'>
            <a name='P84'>84</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu52' id='C84'>
              LoadVar $accu52
            </span>
          </td>
        </tr>
        <tr id='P85'>
          <td align='right'>
            <a name='P85'>85</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu52' id='C85'>
              DelVar $accu52
            </span>
          </td>
        </tr>
        <tr id='P86'>
          <td align='right'>
            <a name='P86'>86</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C86'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P87'>
          <td align='right'>
            <a name='P87'>87</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C87'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P88'>
          <td align='right'>
            <a name='P88'>88</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C88'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P89'>
          <td align='right'>
            <a name='P89'>89</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method items' id='C89'>
              Frame items(d)
            </span>
          </td>
        </tr>
        <tr id='P90'>
          <td align='right'>
            <a name='P90'>90</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C90'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P91'>
          <td align='right'>
            <a name='P91'>91</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C91'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P92'>
          <td align='right'>
            <a name='P92'>92</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu68' id='C92'>
              StoreVar $accu68
            </span>
          </td>
        </tr>
        <tr id='P93'>
          <td align='right'>
            <a name='P93'>93</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C93'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P94'>
          <td align='right'>
            <a name='P94'>94</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C94'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P95'>
          <td align='right'>
            <a name='P95'>95</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C95'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P96'>
          <td align='right'>
            <a name='P96'>96</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to k:v; push False or True depending on success' id='C96'>
              Cut(k, v)
            </span>
          </td>
        </tr>
        <tr id='P97'>
          <td align='right'>
            <a name='P97'>97</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 110 if the value is False' id='C97'>
              JumpCond False 110
            </span>
          </td>
        </tr>
        <tr id='P98'>
          <td align='right'>
            <a name='P98'>98</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu68' id='C98'>
              LoadVar $accu68
            </span>
          </td>
        </tr>
        <tr id='P99'>
          <td align='right'>
            <a name='P99'>99</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu68' id='C99'>
              DelVar $accu68
            </span>
          </td>
        </tr>
        <tr id='P100'>
          <td align='right'>
            <a name='P100'>100</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C100'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P101'>
          <td align='right'>
            <a name='P101'>101</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of k' id='C101'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P102'>
          <td align='right'>
            <a name='P102'>102</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C102'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P103'>
          <td align='right'>
            <a name='P103'>103</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C103'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P104'>
          <td align='right'>
            <a name='P104'>104</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C104'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P105'>
          <td align='right'>
            <a name='P105'>105</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C105'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P106'>
          <td align='right'>
            <a name='P106'>106</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C106'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P107'>
          <td align='right'>
            <a name='P107'>107</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C107'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P108'>
          <td align='right'>
            <a name='P108'>108</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu68' id='C108'>
              StoreVar $accu68
            </span>
          </td>
        </tr>
        <tr id='P109'>
          <td align='right'>
            <a name='P109'>109</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 96' id='C109'>
              Jump 96
            </span>
          </td>
        </tr>
        <tr id='P110'>
          <td align='right'>
            <a name='P110'>110</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C110'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P111'>
          <td align='right'>
            <a name='P111'>111</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C111'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P112'>
          <td align='right'>
            <a name='P112'>112</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu68' id='C112'>
              LoadVar $accu68
            </span>
          </td>
        </tr>
        <tr id='P113'>
          <td align='right'>
            <a name='P113'>113</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu68' id='C113'>
              DelVar $accu68
            </span>
          </td>
        </tr>
        <tr id='P114'>
          <td align='right'>
            <a name='P114'>114</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C114'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P115'>
          <td align='right'>
            <a name='P115'>115</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C115'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P116'>
          <td align='right'>
            <a name='P116'>116</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C116'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P117'>
          <td align='right'>
            <a name='P117'>117</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method qsort' id='C117'>
              Frame qsort(a)
            </span>
          </td>
        </tr>
        <tr id='P118'>
          <td align='right'>
            <a name='P118'>118</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of a' id='C118'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P119'>
          <td align='right'>
            <a name='P119'>119</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C119'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P120'>
          <td align='right'>
            <a name='P120'>120</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C120'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P121'>
          <td align='right'>
            <a name='P121'>121</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 126 if the value is False' id='C121'>
              JumpCond False 126
            </span>
          </td>
        </tr>
        <tr id='P122'>
          <td align='right'>
            <a name='P122'>122</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C122'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P123'>
          <td align='right'>
            <a name='P123'>123</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C123'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P124'>
          <td align='right'>
            <a name='P124'>124</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in sorted_list' id='C124'>
              StoreVar sorted_list
            </span>
          </td>
        </tr>
        <tr id='P125'>
          <td align='right'>
            <a name='P125'>125</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 192' id='C125'>
              Jump 192
            </span>
          </td>
        </tr>
        <tr id='P126'>
          <td align='right'>
            <a name='P126'>126</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C126'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P127'>
          <td align='right'>
            <a name='P127'>127</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C127'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P128'>
          <td align='right'>
            <a name='P128'>128</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(45)' id='C128'>
              Apply PC(45)
            </span>
          </td>
        </tr>
        <tr id='P129'>
          <td align='right'>
            <a name='P129'>129</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C129'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P130'>
          <td align='right'>
            <a name='P130'>130</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of a' id='C130'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P131'>
          <td align='right'>
            <a name='P131'>131</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C131'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P132'>
          <td align='right'>
            <a name='P132'>132</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(55)' id='C132'>
              Apply PC(55)
            </span>
          </td>
        </tr>
        <tr id='P133'>
          <td align='right'>
            <a name='P133'>133</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C133'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P134'>
          <td align='right'>
            <a name='P134'>134</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in (pivot, rest)' id='C134'>
              StoreVar (pivot, rest)
            </span>
          </td>
        </tr>
        <tr id='P135'>
          <td align='right'>
            <a name='P135'>135</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C135'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P136'>
          <td align='right'>
            <a name='P136'>136</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu103' id='C136'>
              StoreVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P137'>
          <td align='right'>
            <a name='P137'>137</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of rest' id='C137'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P138'>
          <td align='right'>
            <a name='P138'>138</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C138'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P139'>
          <td align='right'>
            <a name='P139'>139</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C139'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P140'>
          <td align='right'>
            <a name='P140'>140</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C140'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P141'>
          <td align='right'>
            <a name='P141'>141</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 153 if the value is False' id='C141'>
              JumpCond False 153
            </span>
          </td>
        </tr>
        <tr id='P142'>
          <td align='right'>
            <a name='P142'>142</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C142'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P143'>
          <td align='right'>
            <a name='P143'>143</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of pivot' id='C143'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P144'>
          <td align='right'>
            <a name='P144'>144</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying <' id='C144'>
              2-ary <
            </span>
          </td>
        </tr>
        <tr id='P145'>
          <td align='right'>
            <a name='P145'>145</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 139 if the value is False' id='C145'>
              JumpCond False 139
            </span>
          </td>
        </tr>
        <tr id='P146'>
          <td align='right'>
            <a name='P146'>146</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu103' id='C146'>
              LoadVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P147'>
          <td align='right'>
            <a name='P147'>147</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu103' id='C147'>
              DelVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P148'>
          <td align='right'>
            <a name='P148'>148</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C148'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P149'>
          <td align='right'>
            <a name='P149'>149</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C149'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P150'>
          <td align='right'>
            <a name='P150'>150</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C150'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P151'>
          <td align='right'>
            <a name='P151'>151</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu103' id='C151'>
              StoreVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P152'>
          <td align='right'>
            <a name='P152'>152</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 139' id='C152'>
              Jump 139
            </span>
          </td>
        </tr>
        <tr id='P153'>
          <td align='right'>
            <a name='P153'>153</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C153'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P154'>
          <td align='right'>
            <a name='P154'>154</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu103' id='C154'>
              LoadVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P155'>
          <td align='right'>
            <a name='P155'>155</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu103' id='C155'>
              DelVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P156'>
          <td align='right'>
            <a name='P156'>156</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in lower' id='C156'>
              StoreVar lower
            </span>
          </td>
        </tr>
        <tr id='P157'>
          <td align='right'>
            <a name='P157'>157</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C157'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P158'>
          <td align='right'>
            <a name='P158'>158</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu120' id='C158'>
              StoreVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P159'>
          <td align='right'>
            <a name='P159'>159</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of rest' id='C159'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P160'>
          <td align='right'>
            <a name='P160'>160</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable rest' id='C160'>
              DelVar rest
            </span>
          </td>
        </tr>
        <tr id='P161'>
          <td align='right'>
            <a name='P161'>161</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C161'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P162'>
          <td align='right'>
            <a name='P162'>162</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C162'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P163'>
          <td align='right'>
            <a name='P163'>163</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C163'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P164'>
          <td align='right'>
            <a name='P164'>164</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 176 if the value is False' id='C164'>
              JumpCond False 176
            </span>
          </td>
        </tr>
        <tr id='P165'>
          <td align='right'>
            <a name='P165'>165</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C165'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P166'>
          <td align='right'>
            <a name='P166'>166</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of pivot' id='C166'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P167'>
          <td align='right'>
            <a name='P167'>167</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >=' id='C167'>
              2-ary >=
            </span>
          </td>
        </tr>
        <tr id='P168'>
          <td align='right'>
            <a name='P168'>168</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 162 if the value is False' id='C168'>
              JumpCond False 162
            </span>
          </td>
        </tr>
        <tr id='P169'>
          <td align='right'>
            <a name='P169'>169</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu120' id='C169'>
              LoadVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P170'>
          <td align='right'>
            <a name='P170'>170</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu120' id='C170'>
              DelVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P171'>
          <td align='right'>
            <a name='P171'>171</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C171'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P172'>
          <td align='right'>
            <a name='P172'>172</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C172'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P173'>
          <td align='right'>
            <a name='P173'>173</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C173'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P174'>
          <td align='right'>
            <a name='P174'>174</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu120' id='C174'>
              StoreVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P175'>
          <td align='right'>
            <a name='P175'>175</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 162' id='C175'>
              Jump 162
            </span>
          </td>
        </tr>
        <tr id='P176'>
          <td align='right'>
            <a name='P176'>176</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C176'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P177'>
          <td align='right'>
            <a name='P177'>177</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu120' id='C177'>
              LoadVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P178'>
          <td align='right'>
            <a name='P178'>178</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu120' id='C178'>
              DelVar $accu120
            </span>
          </td>
        </tr>
        <tr id='P179'>
          <td align='right'>
            <a name='P179'>179</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in higher' id='C179'>
              StoreVar higher
            </span>
          </td>
        </tr>
        <tr id='P180'>
          <td align='right'>
            <a name='P180'>180</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lower' id='C180'>
              LoadVar lower
            </span>
          </td>
        </tr>
        <tr id='P181'>
          <td align='right'>
            <a name='P181'>181</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lower' id='C181'>
              DelVar lower
            </span>
          </td>
        </tr>
        <tr id='P182'>
          <td align='right'>
            <a name='P182'>182</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(117)' id='C182'>
              Apply PC(117)
            </span>
          </td>
        </tr>
        <tr id='P183'>
          <td align='right'>
            <a name='P183'>183</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C183'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P184'>
          <td align='right'>
            <a name='P184'>184</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of pivot' id='C184'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P185'>
          <td align='right'>
            <a name='P185'>185</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable pivot' id='C185'>
              DelVar pivot
            </span>
          </td>
        </tr>
        <tr id='P186'>
          <td align='right'>
            <a name='P186'>186</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C186'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P187'>
          <td align='right'>
            <a name='P187'>187</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of higher' id='C187'>
              LoadVar higher
            </span>
          </td>
        </tr>
        <tr id='P188'>
          <td align='right'>
            <a name='P188'>188</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable higher' id='C188'>
              DelVar higher
            </span>
          </td>
        </tr>
        <tr id='P189'>
          <td align='right'>
            <a name='P189'>189</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(117)' id='C189'>
              Apply PC(117)
            </span>
          </td>
        </tr>
        <tr id='P190'>
          <td align='right'>
            <a name='P190'>190</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying +' id='C190'>
              3-ary +
            </span>
          </td>
        </tr>
        <tr id='P191'>
          <td align='right'>
            <a name='P191'>191</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in sorted_list' id='C191'>
              StoreVar sorted_list
            </span>
          </td>
        </tr>
        <tr id='P192'>
          <td align='right'>
            <a name='P192'>192</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push sorted_list' id='C192'>
              ReturnOp(sorted_list)
            </span>
          </td>
        </tr>
        <tr id='P193'>
          <td align='right'>
            <a name='P193'>193</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable sorted_list' id='C193'>
              DelVar sorted_list
            </span>
          </td>
        </tr>
        <tr id='P194'>
          <td align='right'>
            <a name='P194'>194</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C194'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P195'>
          <td align='right'>
            <a name='P195'>195</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method index' id='C195'>
              Frame index(d, e)
            </span>
          </td>
        </tr>
        <tr id='P196'>
          <td align='right'>
            <a name='P196'>196</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C196'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P197'>
          <td align='right'>
            <a name='P197'>197</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in i' id='C197'>
              StoreVar i
            </span>
          </td>
        </tr>
        <tr id='P198'>
          <td align='right'>
            <a name='P198'>198</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C198'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P199'>
          <td align='right'>
            <a name='P199'>199</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C199'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P200'>
          <td align='right'>
            <a name='P200'>200</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C200'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P201'>
          <td align='right'>
            <a name='P201'>201</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C201'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P202'>
          <td align='right'>
            <a name='P202'>202</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C202'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P203'>
          <td align='right'>
            <a name='P203'>203</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C203'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P204'>
          <td align='right'>
            <a name='P204'>204</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 211 if the value is False' id='C204'>
              JumpCond False 211
            </span>
          </td>
        </tr>
        <tr id='P205'>
          <td align='right'>
            <a name='P205'>205</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C205'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P206'>
          <td align='right'>
            <a name='P206'>206</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C206'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P207'>
          <td align='right'>
            <a name='P207'>207</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C207'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P208'>
          <td align='right'>
            <a name='P208'>208</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C208'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P209'>
          <td align='right'>
            <a name='P209'>209</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in i' id='C209'>
              StoreVar i
            </span>
          </td>
        </tr>
        <tr id='P210'>
          <td align='right'>
            <a name='P210'>210</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 198' id='C210'>
              Jump 198
            </span>
          </td>
        </tr>
        <tr id='P211'>
          <td align='right'>
            <a name='P211'>211</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C211'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P212'>
          <td align='right'>
            <a name='P212'>212</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C212'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P213'>
          <td align='right'>
            <a name='P213'>213</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push i' id='C213'>
              ReturnOp(i)
            </span>
          </td>
        </tr>
        <tr id='P214'>
          <td align='right'>
            <a name='P214'>214</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C214'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P215'>
          <td align='right'>
            <a name='P215'>215</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C215'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P216'>
          <td align='right'>
            <a name='P216'>216</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method startswith' id='C216'>
              Frame startswith(d, prefix)
            </span>
          </td>
        </tr>
        <tr id='P217'>
          <td align='right'>
            <a name='P217'>217</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C217'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P218'>
          <td align='right'>
            <a name='P218'>218</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of prefix' id='C218'>
              LoadVar prefix
            </span>
          </td>
        </tr>
        <tr id='P219'>
          <td align='right'>
            <a name='P219'>219</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C219'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P220'>
          <td align='right'>
            <a name='P220'>220</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C220'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P221'>
          <td align='right'>
            <a name='P221'>221</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C221'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P222'>
          <td align='right'>
            <a name='P222'>222</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying <=' id='C222'>
              2-ary <=
            </span>
          </td>
        </tr>
        <tr id='P223'>
          <td align='right'>
            <a name='P223'>223</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 257 if the value is False' id='C223'>
              JumpCond False 257
            </span>
          </td>
        </tr>
        <tr id='P224'>
          <td align='right'>
            <a name='P224'>224</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C224'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P225'>
          <td align='right'>
            <a name='P225'>225</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu172' id='C225'>
              StoreVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P226'>
          <td align='right'>
            <a name='P226'>226</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C226'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P227'>
          <td align='right'>
            <a name='P227'>227</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of prefix' id='C227'>
              LoadVar prefix
            </span>
          </td>
        </tr>
        <tr id='P228'>
          <td align='right'>
            <a name='P228'>228</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C228'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P229'>
          <td align='right'>
            <a name='P229'>229</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C229'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P230'>
          <td align='right'>
            <a name='P230'>230</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C230'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P231'>
          <td align='right'>
            <a name='P231'>231</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ..' id='C231'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P232'>
          <td align='right'>
            <a name='P232'>232</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C232'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P233'>
          <td align='right'>
            <a name='P233'>233</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C233'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P234'>
          <td align='right'>
            <a name='P234'>234</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 250 if the value is False' id='C234'>
              JumpCond False 250
            </span>
          </td>
        </tr>
        <tr id='P235'>
          <td align='right'>
            <a name='P235'>235</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu172' id='C235'>
              LoadVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P236'>
          <td align='right'>
            <a name='P236'>236</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu172' id='C236'>
              DelVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P237'>
          <td align='right'>
            <a name='P237'>237</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C237'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P238'>
          <td align='right'>
            <a name='P238'>238</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C238'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P239'>
          <td align='right'>
            <a name='P239'>239</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C239'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P240'>
          <td align='right'>
            <a name='P240'>240</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C240'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P241'>
          <td align='right'>
            <a name='P241'>241</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of prefix' id='C241'>
              LoadVar prefix
            </span>
          </td>
        </tr>
        <tr id='P242'>
          <td align='right'>
            <a name='P242'>242</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C242'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P243'>
          <td align='right'>
            <a name='P243'>243</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C243'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P244'>
          <td align='right'>
            <a name='P244'>244</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C244'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P245'>
          <td align='right'>
            <a name='P245'>245</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C245'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P246'>
          <td align='right'>
            <a name='P246'>246</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C246'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P247'>
          <td align='right'>
            <a name='P247'>247</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C247'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P248'>
          <td align='right'>
            <a name='P248'>248</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu172' id='C248'>
              StoreVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P249'>
          <td align='right'>
            <a name='P249'>249</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 233' id='C249'>
              Jump 233
            </span>
          </td>
        </tr>
        <tr id='P250'>
          <td align='right'>
            <a name='P250'>250</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C250'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P251'>
          <td align='right'>
            <a name='P251'>251</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C251'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P252'>
          <td align='right'>
            <a name='P252'>252</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable prefix' id='C252'>
              DelVar prefix
            </span>
          </td>
        </tr>
        <tr id='P253'>
          <td align='right'>
            <a name='P253'>253</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu172' id='C253'>
              LoadVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P254'>
          <td align='right'>
            <a name='P254'>254</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu172' id='C254'>
              DelVar $accu172
            </span>
          </td>
        </tr>
        <tr id='P255'>
          <td align='right'>
            <a name='P255'>255</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying all' id='C255'>
              1-ary all
            </span>
          </td>
        </tr>
        <tr id='P256'>
          <td align='right'>
            <a name='P256'>256</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 260' id='C256'>
              Jump 260
            </span>
          </td>
        </tr>
        <tr id='P257'>
          <td align='right'>
            <a name='P257'>257</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C257'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P258'>
          <td align='right'>
            <a name='P258'>258</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable prefix' id='C258'>
              DelVar prefix
            </span>
          </td>
        </tr>
        <tr id='P259'>
          <td align='right'>
            <a name='P259'>259</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C259'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P260'>
          <td align='right'>
            <a name='P260'>260</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C260'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P261'>
          <td align='right'>
            <a name='P261'>261</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C261'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P262'>
          <td align='right'>
            <a name='P262'>262</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C262'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P263'>
          <td align='right'>
            <a name='P263'>263</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method foldl' id='C263'>
              Frame foldl(d, f, z)
            </span>
          </td>
        </tr>
        <tr id='P264'>
          <td align='right'>
            <a name='P264'>264</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C264'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P265'>
          <td align='right'>
            <a name='P265'>265</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of z' id='C265'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P266'>
          <td align='right'>
            <a name='P266'>266</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable z' id='C266'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P267'>
          <td align='right'>
            <a name='P267'>267</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C267'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P268'>
          <td align='right'>
            <a name='P268'>268</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C268'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P269'>
          <td align='right'>
            <a name='P269'>269</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C269'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P270'>
          <td align='right'>
            <a name='P270'>270</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C270'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P271'>
          <td align='right'>
            <a name='P271'>271</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to e; push False or True depending on success' id='C271'>
              Cut(e)
            </span>
          </td>
        </tr>
        <tr id='P272'>
          <td align='right'>
            <a name='P272'>272</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 285 if the value is False' id='C272'>
              JumpCond False 285
            </span>
          </td>
        </tr>
        <tr id='P273'>
          <td align='right'>
            <a name='P273'>273</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of f' id='C273'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P274'>
          <td align='right'>
            <a name='P274'>274</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C274'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P275'>
          <td align='right'>
            <a name='P275'>275</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C275'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P276'>
          <td align='right'>
            <a name='P276'>276</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C276'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P277'>
          <td align='right'>
            <a name='P277'>277</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C277'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P278'>
          <td align='right'>
            <a name='P278'>278</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C278'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P279'>
          <td align='right'>
            <a name='P279'>279</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C279'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P280'>
          <td align='right'>
            <a name='P280'>280</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C280'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P281'>
          <td align='right'>
            <a name='P281'>281</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C281'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P282'>
          <td align='right'>
            <a name='P282'>282</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C282'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P283'>
          <td align='right'>
            <a name='P283'>283</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C283'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P284'>
          <td align='right'>
            <a name='P284'>284</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 271' id='C284'>
              Jump 271
            </span>
          </td>
        </tr>
        <tr id='P285'>
          <td align='right'>
            <a name='P285'>285</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C285'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P286'>
          <td align='right'>
            <a name='P286'>286</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable f' id='C286'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P287'>
          <td align='right'>
            <a name='P287'>287</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C287'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P288'>
          <td align='right'>
            <a name='P288'>288</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C288'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P289'>
          <td align='right'>
            <a name='P289'>289</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method foldr' id='C289'>
              Frame foldr(d, f, z)
            </span>
          </td>
        </tr>
        <tr id='P290'>
          <td align='right'>
            <a name='P290'>290</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C290'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P291'>
          <td align='right'>
            <a name='P291'>291</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C291'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P292'>
          <td align='right'>
            <a name='P292'>292</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C292'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P293'>
          <td align='right'>
            <a name='P293'>293</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C293'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P294'>
          <td align='right'>
            <a name='P294'>294</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C294'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P295'>
          <td align='right'>
            <a name='P295'>295</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 301 if the value is False' id='C295'>
              JumpCond False 301
            </span>
          </td>
        </tr>
        <tr id='P296'>
          <td align='right'>
            <a name='P296'>296</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C296'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P297'>
          <td align='right'>
            <a name='P297'>297</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable f' id='C297'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P298'>
          <td align='right'>
            <a name='P298'>298</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of z' id='C298'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P299'>
          <td align='right'>
            <a name='P299'>299</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable z' id='C299'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P300'>
          <td align='right'>
            <a name='P300'>300</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 323' id='C300'>
              Jump 323
            </span>
          </td>
        </tr>
        <tr id='P301'>
          <td align='right'>
            <a name='P301'>301</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of f' id='C301'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P302'>
          <td align='right'>
            <a name='P302'>302</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C302'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P303'>
          <td align='right'>
            <a name='P303'>303</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C303'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P304'>
          <td align='right'>
            <a name='P304'>304</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C304'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P305'>
          <td align='right'>
            <a name='P305'>305</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C305'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P306'>
          <td align='right'>
            <a name='P306'>306</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C306'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P307'>
          <td align='right'>
            <a name='P307'>307</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C307'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P308'>
          <td align='right'>
            <a name='P308'>308</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C308'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P309'>
          <td align='right'>
            <a name='P309'>309</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C309'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P310'>
          <td align='right'>
            <a name='P310'>310</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C310'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P311'>
          <td align='right'>
            <a name='P311'>311</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(55)' id='C311'>
              Apply PC(55)
            </span>
          </td>
        </tr>
        <tr id='P312'>
          <td align='right'>
            <a name='P312'>312</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C312'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P313'>
          <td align='right'>
            <a name='P313'>313</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of f' id='C313'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P314'>
          <td align='right'>
            <a name='P314'>314</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable f' id='C314'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P315'>
          <td align='right'>
            <a name='P315'>315</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C315'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P316'>
          <td align='right'>
            <a name='P316'>316</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of z' id='C316'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P317'>
          <td align='right'>
            <a name='P317'>317</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable z' id='C317'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P318'>
          <td align='right'>
            <a name='P318'>318</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C318'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P319'>
          <td align='right'>
            <a name='P319'>319</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='call method PC(289)' id='C319'>
              Apply PC(289)
            </span>
          </td>
        </tr>
        <tr id='P320'>
          <td align='right'>
            <a name='P320'>320</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C320'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P321'>
          <td align='right'>
            <a name='P321'>321</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C321'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P322'>
          <td align='right'>
            <a name='P322'>322</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C322'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P323'>
          <td align='right'>
            <a name='P323'>323</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C323'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P324'>
          <td align='right'>
            <a name='P324'>324</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C324'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P325'>
          <td align='right'>
            <a name='P325'>325</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C325'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P326'>
          <td align='right'>
            <a name='P326'>326</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method reduce' id='C326'>
              Frame reduce(f, d, z)
            </span>
          </td>
        </tr>
        <tr id='P327'>
          <td align='right'>
            <a name='P327'>327</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C327'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P328'>
          <td align='right'>
            <a name='P328'>328</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C328'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P329'>
          <td align='right'>
            <a name='P329'>329</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C329'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P330'>
          <td align='right'>
            <a name='P330'>330</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C330'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P331'>
          <td align='right'>
            <a name='P331'>331</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C331'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P332'>
          <td align='right'>
            <a name='P332'>332</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of f' id='C332'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P333'>
          <td align='right'>
            <a name='P333'>333</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable f' id='C333'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P334'>
          <td align='right'>
            <a name='P334'>334</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C334'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P335'>
          <td align='right'>
            <a name='P335'>335</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of z' id='C335'>
              LoadVar z
            </span>
          </td>
        </tr>
        <tr id='P336'>
          <td align='right'>
            <a name='P336'>336</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable z' id='C336'>
              DelVar z
            </span>
          </td>
        </tr>
        <tr id='P337'>
          <td align='right'>
            <a name='P337'>337</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C337'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P338'>
          <td align='right'>
            <a name='P338'>338</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='call method PC(263)' id='C338'>
              Apply PC(263)
            </span>
          </td>
        </tr>
        <tr id='P339'>
          <td align='right'>
            <a name='P339'>339</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C339'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P340'>
          <td align='right'>
            <a name='P340'>340</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C340'>
              ReturnOp(result)
            </span>
          </td>
        </tr>
        <tr id='P341'>
          <td align='right'>
            <a name='P341'>341</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C341'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P342'>
          <td align='right'>
            <a name='P342'>342</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method permuted' id='C342'>
              Frame permuted(s)
            </span>
          </td>
        </tr>
        <tr id='P343'>
          <td align='right'>
            <a name='P343'>343</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C343'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P344'>
          <td align='right'>
            <a name='P344'>344</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in perm' id='C344'>
              StoreVar perm
            </span>
          </td>
        </tr>
        <tr id='P345'>
          <td align='right'>
            <a name='P345'>345</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C345'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P346'>
          <td align='right'>
            <a name='P346'>346</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C346'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P347'>
          <td align='right'>
            <a name='P347'>347</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in c' id='C347'>
              StoreVar c
            </span>
          </td>
        </tr>
        <tr id='P348'>
          <td align='right'>
            <a name='P348'>348</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C348'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P349'>
          <td align='right'>
            <a name='P349'>349</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {}' id='C349'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P350'>
          <td align='right'>
            <a name='P350'>350</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying !=' id='C350'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P351'>
          <td align='right'>
            <a name='P351'>351</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 371 if the value is False' id='C351'>
              JumpCond False 371
            </span>
          </td>
        </tr>
        <tr id='P352'>
          <td align='right'>
            <a name='P352'>352</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C352'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P353'>
          <td align='right'>
            <a name='P353'>353</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a set value and push one of its elements' id='C353'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P354'>
          <td align='right'>
            <a name='P354'>354</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in e' id='C354'>
              StoreVar e
            </span>
          </td>
        </tr>
        <tr id='P355'>
          <td align='right'>
            <a name='P355'>355</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of perm' id='C355'>
              LoadVar perm
            </span>
          </td>
        </tr>
        <tr id='P356'>
          <td align='right'>
            <a name='P356'>356</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable perm' id='C356'>
              DelVar perm
            </span>
          </td>
        </tr>
        <tr id='P357'>
          <td align='right'>
            <a name='P357'>357</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C357'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P358'>
          <td align='right'>
            <a name='P358'>358</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C358'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P359'>
          <td align='right'>
            <a name='P359'>359</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C359'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P360'>
          <td align='right'>
            <a name='P360'>360</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C360'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P361'>
          <td align='right'>
            <a name='P361'>361</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in perm' id='C361'>
              StoreVar perm
            </span>
          </td>
        </tr>
        <tr id='P362'>
          <td align='right'>
            <a name='P362'>362</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C362'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P363'>
          <td align='right'>
            <a name='P363'>363</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C363'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P364'>
          <td align='right'>
            <a name='P364'>364</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C364'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P365'>
          <td align='right'>
            <a name='P365'>365</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C365'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P366'>
          <td align='right'>
            <a name='P366'>366</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C366'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P367'>
          <td align='right'>
            <a name='P367'>367</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C367'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P368'>
          <td align='right'>
            <a name='P368'>368</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C368'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P369'>
          <td align='right'>
            <a name='P369'>369</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in c' id='C369'>
              StoreVar c
            </span>
          </td>
        </tr>
        <tr id='P370'>
          <td align='right'>
            <a name='P370'>370</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 348' id='C370'>
              Jump 348
            </span>
          </td>
        </tr>
        <tr id='P371'>
          <td align='right'>
            <a name='P371'>371</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C371'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P372'>
          <td align='right'>
            <a name='P372'>372</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push perm' id='C372'>
              ReturnOp(perm)
            </span>
          </td>
        </tr>
        <tr id='P373'>
          <td align='right'>
            <a name='P373'>373</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable perm' id='C373'>
              DelVar perm
            </span>
          </td>
        </tr>
        <tr id='P374'>
          <td align='right'>
            <a name='P374'>374</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C374'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P375'>
          <td align='right'>
            <a name='P375'>375</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method filter' id='C375'>
              Frame filter(cond, s)
            </span>
          </td>
        </tr>
        <tr id='P376'>
          <td align='right'>
            <a name='P376'>376</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C376'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P377'>
          <td align='right'>
            <a name='P377'>377</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu292' id='C377'>
              StoreVar $accu292
            </span>
          </td>
        </tr>
        <tr id='P378'>
          <td align='right'>
            <a name='P378'>378</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C378'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P379'>
          <td align='right'>
            <a name='P379'>379</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C379'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P380'>
          <td align='right'>
            <a name='P380'>380</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C380'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P381'>
          <td align='right'>
            <a name='P381'>381</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C381'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P382'>
          <td align='right'>
            <a name='P382'>382</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to e; push False or True depending on success' id='C382'>
              Cut(e)
            </span>
          </td>
        </tr>
        <tr id='P383'>
          <td align='right'>
            <a name='P383'>383</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 396 if the value is False' id='C383'>
              JumpCond False 396
            </span>
          </td>
        </tr>
        <tr id='P384'>
          <td align='right'>
            <a name='P384'>384</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of cond' id='C384'>
              LoadVar cond
            </span>
          </td>
        </tr>
        <tr id='P385'>
          <td align='right'>
            <a name='P385'>385</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C385'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P386'>
          <td align='right'>
            <a name='P386'>386</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C386'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P387'>
          <td align='right'>
            <a name='P387'>387</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C387'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P388'>
          <td align='right'>
            <a name='P388'>388</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 381 if the value is False' id='C388'>
              JumpCond False 381
            </span>
          </td>
        </tr>
        <tr id='P389'>
          <td align='right'>
            <a name='P389'>389</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu292' id='C389'>
              LoadVar $accu292
            </span>
          </td>
        </tr>
        <tr id='P390'>
          <td align='right'>
            <a name='P390'>390</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu292' id='C390'>
              DelVar $accu292
            </span>
          </td>
        </tr>
        <tr id='P391'>
          <td align='right'>
            <a name='P391'>391</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C391'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P392'>
          <td align='right'>
            <a name='P392'>392</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C392'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P393'>
          <td align='right'>
            <a name='P393'>393</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C393'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P394'>
          <td align='right'>
            <a name='P394'>394</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu292' id='C394'>
              StoreVar $accu292
            </span>
          </td>
        </tr>
        <tr id='P395'>
          <td align='right'>
            <a name='P395'>395</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 381' id='C395'>
              Jump 381
            </span>
          </td>
        </tr>
        <tr id='P396'>
          <td align='right'>
            <a name='P396'>396</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable cond' id='C396'>
              DelVar cond
            </span>
          </td>
        </tr>
        <tr id='P397'>
          <td align='right'>
            <a name='P397'>397</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C397'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P398'>
          <td align='right'>
            <a name='P398'>398</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu292' id='C398'>
              LoadVar $accu292
            </span>
          </td>
        </tr>
        <tr id='P399'>
          <td align='right'>
            <a name='P399'>399</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu292' id='C399'>
              DelVar $accu292
            </span>
          </td>
        </tr>
        <tr id='P400'>
          <td align='right'>
            <a name='P400'>400</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in t' id='C400'>
              StoreVar t
            </span>
          </td>
        </tr>
        <tr id='P401'>
          <td align='right'>
            <a name='P401'>401</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push t' id='C401'>
              ReturnOp(t)
            </span>
          </td>
        </tr>
        <tr id='P402'>
          <td align='right'>
            <a name='P402'>402</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable t' id='C402'>
              DelVar t
            </span>
          </td>
        </tr>
        <tr id='P403'>
          <td align='right'>
            <a name='P403'>403</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C403'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P404'>
          <td align='right'>
            <a name='P404'>404</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method map' id='C404'>
              Frame map(f, s)
            </span>
          </td>
        </tr>
        <tr id='P405'>
          <td align='right'>
            <a name='P405'>405</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C405'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P406'>
          <td align='right'>
            <a name='P406'>406</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu313' id='C406'>
              StoreVar $accu313
            </span>
          </td>
        </tr>
        <tr id='P407'>
          <td align='right'>
            <a name='P407'>407</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C407'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P408'>
          <td align='right'>
            <a name='P408'>408</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C408'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P409'>
          <td align='right'>
            <a name='P409'>409</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C409'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P410'>
          <td align='right'>
            <a name='P410'>410</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to e; push False or True depending on success' id='C410'>
              Cut(e)
            </span>
          </td>
        </tr>
        <tr id='P411'>
          <td align='right'>
            <a name='P411'>411</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 422 if the value is False' id='C411'>
              JumpCond False 422
            </span>
          </td>
        </tr>
        <tr id='P412'>
          <td align='right'>
            <a name='P412'>412</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu313' id='C412'>
              LoadVar $accu313
            </span>
          </td>
        </tr>
        <tr id='P413'>
          <td align='right'>
            <a name='P413'>413</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu313' id='C413'>
              DelVar $accu313
            </span>
          </td>
        </tr>
        <tr id='P414'>
          <td align='right'>
            <a name='P414'>414</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of f' id='C414'>
              LoadVar f
            </span>
          </td>
        </tr>
        <tr id='P415'>
          <td align='right'>
            <a name='P415'>415</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C415'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P416'>
          <td align='right'>
            <a name='P416'>416</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C416'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P417'>
          <td align='right'>
            <a name='P417'>417</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C417'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P418'>
          <td align='right'>
            <a name='P418'>418</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C418'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P419'>
          <td align='right'>
            <a name='P419'>419</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C419'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P420'>
          <td align='right'>
            <a name='P420'>420</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu313' id='C420'>
              StoreVar $accu313
            </span>
          </td>
        </tr>
        <tr id='P421'>
          <td align='right'>
            <a name='P421'>421</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 410' id='C421'>
              Jump 410
            </span>
          </td>
        </tr>
        <tr id='P422'>
          <td align='right'>
            <a name='P422'>422</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C422'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P423'>
          <td align='right'>
            <a name='P423'>423</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable f' id='C423'>
              DelVar f
            </span>
          </td>
        </tr>
        <tr id='P424'>
          <td align='right'>
            <a name='P424'>424</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu313' id='C424'>
              LoadVar $accu313
            </span>
          </td>
        </tr>
        <tr id='P425'>
          <td align='right'>
            <a name='P425'>425</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu313' id='C425'>
              DelVar $accu313
            </span>
          </td>
        </tr>
        <tr id='P426'>
          <td align='right'>
            <a name='P426'>426</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in t' id='C426'>
              StoreVar t
            </span>
          </td>
        </tr>
        <tr id='P427'>
          <td align='right'>
            <a name='P427'>427</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push t' id='C427'>
              ReturnOp(t)
            </span>
          </td>
        </tr>
        <tr id='P428'>
          <td align='right'>
            <a name='P428'>428</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable t' id='C428'>
              DelVar t
            </span>
          </td>
        </tr>
        <tr id='P429'>
          <td align='right'>
            <a name='P429'>429</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C429'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P430'>
          <td align='right'>
            <a name='P430'>430</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Disque' id='C430'>
              Frame Disque()
            </span>
          </td>
        </tr>
        <tr id='P431'>
          <td align='right'>
            <a name='P431'>431</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C431'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P432'>
          <td align='right'>
            <a name='P432'>432</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C432'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P433'>
          <td align='right'>
            <a name='P433'>433</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C433'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P434'>
          <td align='right'>
            <a name='P434'>434</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C434'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P435'>
          <td align='right'>
            <a name='P435'>435</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C435'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P436'>
          <td align='right'>
            <a name='P436'>436</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C436'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P437'>
          <td align='right'>
            <a name='P437'>437</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C437'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P438'>
          <td align='right'>
            <a name='P438'>438</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in d' id='C438'>
              StoreVar d
            </span>
          </td>
        </tr>
        <tr id='P439'>
          <td align='right'>
            <a name='P439'>439</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push d' id='C439'>
              ReturnOp(d)
            </span>
          </td>
        </tr>
        <tr id='P440'>
          <td align='right'>
            <a name='P440'>440</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C440'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P441'>
          <td align='right'>
            <a name='P441'>441</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 641' id='C441'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P442'>
          <td align='right'>
            <a name='P442'>442</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method insert' id='C442'>
              Frame insert(d, v)
            </span>
          </td>
        </tr>
        <tr id='P443'>
          <td align='right'>
            <a name='P443'>443</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C443'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P444'>
          <td align='right'>
            <a name='P444'>444</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C444'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P445'>
          <td align='right'>
            <a name='P445'>445</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "elements"' id='C445'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P446'>
          <td align='right'>
            <a name='P446'>446</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C446'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P447'>
          <td align='right'>
            <a name='P447'>447</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(2)' id='C447'>
              Push PC(2)
            </span>
          </td>
        </tr>
        <tr id='P448'>
          <td align='right'>
            <a name='P448'>448</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C448'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P449'>
          <td align='right'>
            <a name='P449'>449</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C449'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P450'>
          <td align='right'>
            <a name='P450'>450</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C450'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P451'>
          <td align='right'>
            <a name='P451'>451</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C451'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P452'>
          <td align='right'>
            <a name='P452'>452</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C452'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P453'>
          <td align='right'>
            <a name='P453'>453</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C453'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P454'>
          <td align='right'>
            <a name='P454'>454</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C454'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P455'>
          <td align='right'>
            <a name='P455'>455</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C455'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P456'>
          <td align='right'>
            <a name='P456'>456</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C456'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P457'>
          <td align='right'>
            <a name='P457'>457</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C457'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P458'>
          <td align='right'>
            <a name='P458'>458</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C458'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P459'>
          <td align='right'>
            <a name='P459'>459</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C459'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P460'>
          <td align='right'>
            <a name='P460'>460</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C460'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P461'>
          <td align='right'>
            <a name='P461'>461</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C461'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P462'>
          <td align='right'>
            <a name='P462'>462</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C462'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P463'>
          <td align='right'>
            <a name='P463'>463</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C463'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P464'>
          <td align='right'>
            <a name='P464'>464</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C464'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P465'>
          <td align='right'>
            <a name='P465'>465</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C465'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P466'>
          <td align='right'>
            <a name='P466'>466</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C466'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P467'>
          <td align='right'>
            <a name='P467'>467</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(2)' id='C467'>
              Push PC(2)
            </span>
          </td>
        </tr>
        <tr id='P468'>
          <td align='right'>
            <a name='P468'>468</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C468'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P469'>
          <td align='right'>
            <a name='P469'>469</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C469'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P470'>
          <td align='right'>
            <a name='P470'>470</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C470'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P471'>
          <td align='right'>
            <a name='P471'>471</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C471'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P472'>
          <td align='right'>
            <a name='P472'>472</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C472'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P473'>
          <td align='right'>
            <a name='P473'>473</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C473'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P474'>
          <td align='right'>
            <a name='P474'>474</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C474'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P475'>
          <td align='right'>
            <a name='P475'>475</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C475'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P476'>
          <td align='right'>
            <a name='P476'>476</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C476'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P477'>
          <td align='right'>
            <a name='P477'>477</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C477'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P478'>
          <td align='right'>
            <a name='P478'>478</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C478'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P479'>
          <td align='right'>
            <a name='P479'>479</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C479'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P480'>
          <td align='right'>
            <a name='P480'>480</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C480'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P481'>
          <td align='right'>
            <a name='P481'>481</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "elements"' id='C481'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P482'>
          <td align='right'>
            <a name='P482'>482</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C482'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P483'>
          <td align='right'>
            <a name='P483'>483</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C483'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P484'>
          <td align='right'>
            <a name='P484'>484</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C484'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P485'>
          <td align='right'>
            <a name='P485'>485</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C485'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P486'>
          <td align='right'>
            <a name='P486'>486</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C486'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P487'>
          <td align='right'>
            <a name='P487'>487</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C487'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P488'>
          <td align='right'>
            <a name='P488'>488</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying +' id='C488'>
              3-ary +
            </span>
          </td>
        </tr>
        <tr id='P489'>
          <td align='right'>
            <a name='P489'>489</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C489'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P490'>
          <td align='right'>
            <a name='P490'>490</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C490'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P491'>
          <td align='right'>
            <a name='P491'>491</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C491'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P492'>
          <td align='right'>
            <a name='P492'>492</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C492'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P493'>
          <td align='right'>
            <a name='P493'>493</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method delete' id='C493'>
              Frame delete(d)
            </span>
          </td>
        </tr>
        <tr id='P494'>
          <td align='right'>
            <a name='P494'>494</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C494'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P495'>
          <td align='right'>
            <a name='P495'>495</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant None' id='C495'>
              Push None
            </span>
          </td>
        </tr>
        <tr id='P496'>
          <td align='right'>
            <a name='P496'>496</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in returnVal' id='C496'>
              StoreVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P497'>
          <td align='right'>
            <a name='P497'>497</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C497'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P498'>
          <td align='right'>
            <a name='P498'>498</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C498'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P499'>
          <td align='right'>
            <a name='P499'>499</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C499'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P500'>
          <td align='right'>
            <a name='P500'>500</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C500'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P501'>
          <td align='right'>
            <a name='P501'>501</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C501'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P502'>
          <td align='right'>
            <a name='P502'>502</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C502'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P503'>
          <td align='right'>
            <a name='P503'>503</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >' id='C503'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P504'>
          <td align='right'>
            <a name='P504'>504</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 584 if the value is False' id='C504'>
              JumpCond False 584
            </span>
          </td>
        </tr>
        <tr id='P505'>
          <td align='right'>
            <a name='P505'>505</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable returnVal' id='C505'>
              DelVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P506'>
          <td align='right'>
            <a name='P506'>506</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C506'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P507'>
          <td align='right'>
            <a name='P507'>507</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "elements"' id='C507'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P508'>
          <td align='right'>
            <a name='P508'>508</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C508'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P509'>
          <td align='right'>
            <a name='P509'>509</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C509'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P510'>
          <td align='right'>
            <a name='P510'>510</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "current"' id='C510'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P511'>
          <td align='right'>
            <a name='P511'>511</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C511'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P512'>
          <td align='right'>
            <a name='P512'>512</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C512'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P513'>
          <td align='right'>
            <a name='P513'>513</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C513'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P514'>
          <td align='right'>
            <a name='P514'>514</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C514'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P515'>
          <td align='right'>
            <a name='P515'>515</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in returnVal' id='C515'>
              StoreVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P516'>
          <td align='right'>
            <a name='P516'>516</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C516'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P517'>
          <td align='right'>
            <a name='P517'>517</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "elements"' id='C517'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P518'>
          <td align='right'>
            <a name='P518'>518</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C518'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P519'>
          <td align='right'>
            <a name='P519'>519</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(2)' id='C519'>
              Push PC(2)
            </span>
          </td>
        </tr>
        <tr id='P520'>
          <td align='right'>
            <a name='P520'>520</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C520'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P521'>
          <td align='right'>
            <a name='P521'>521</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C521'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P522'>
          <td align='right'>
            <a name='P522'>522</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C522'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P523'>
          <td align='right'>
            <a name='P523'>523</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C523'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P524'>
          <td align='right'>
            <a name='P524'>524</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C524'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P525'>
          <td align='right'>
            <a name='P525'>525</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C525'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P526'>
          <td align='right'>
            <a name='P526'>526</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C526'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P527'>
          <td align='right'>
            <a name='P527'>527</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C527'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P528'>
          <td align='right'>
            <a name='P528'>528</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C528'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P529'>
          <td align='right'>
            <a name='P529'>529</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C529'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P530'>
          <td align='right'>
            <a name='P530'>530</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C530'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P531'>
          <td align='right'>
            <a name='P531'>531</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C531'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P532'>
          <td align='right'>
            <a name='P532'>532</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C532'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P533'>
          <td align='right'>
            <a name='P533'>533</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C533'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P534'>
          <td align='right'>
            <a name='P534'>534</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C534'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P535'>
          <td align='right'>
            <a name='P535'>535</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(2)' id='C535'>
              Push PC(2)
            </span>
          </td>
        </tr>
        <tr id='P536'>
          <td align='right'>
            <a name='P536'>536</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C536'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P537'>
          <td align='right'>
            <a name='P537'>537</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C537'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P538'>
          <td align='right'>
            <a name='P538'>538</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C538'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P539'>
          <td align='right'>
            <a name='P539'>539</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C539'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P540'>
          <td align='right'>
            <a name='P540'>540</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C540'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P541'>
          <td align='right'>
            <a name='P541'>541</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C541'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P542'>
          <td align='right'>
            <a name='P542'>542</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C542'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P543'>
          <td align='right'>
            <a name='P543'>543</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C543'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P544'>
          <td align='right'>
            <a name='P544'>544</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C544'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P545'>
          <td align='right'>
            <a name='P545'>545</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C545'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P546'>
          <td align='right'>
            <a name='P546'>546</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C546'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P547'>
          <td align='right'>
            <a name='P547'>547</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C547'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P548'>
          <td align='right'>
            <a name='P548'>548</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C548'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P549'>
          <td align='right'>
            <a name='P549'>549</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C549'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P550'>
          <td align='right'>
            <a name='P550'>550</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C550'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P551'>
          <td align='right'>
            <a name='P551'>551</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C551'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P552'>
          <td align='right'>
            <a name='P552'>552</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C552'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P553'>
          <td align='right'>
            <a name='P553'>553</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C553'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P554'>
          <td align='right'>
            <a name='P554'>554</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C554'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P555'>
          <td align='right'>
            <a name='P555'>555</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C555'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P556'>
          <td align='right'>
            <a name='P556'>556</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C556'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P557'>
          <td align='right'>
            <a name='P557'>557</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C557'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P558'>
          <td align='right'>
            <a name='P558'>558</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C558'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P559'>
          <td align='right'>
            <a name='P559'>559</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C559'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P560'>
          <td align='right'>
            <a name='P560'>560</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "current"' id='C560'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P561'>
          <td align='right'>
            <a name='P561'>561</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C561'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P562'>
          <td align='right'>
            <a name='P562'>562</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C562'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P563'>
          <td align='right'>
            <a name='P563'>563</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C563'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P564'>
          <td align='right'>
            <a name='P564'>564</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C564'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P565'>
          <td align='right'>
            <a name='P565'>565</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C565'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P566'>
          <td align='right'>
            <a name='P566'>566</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C566'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P567'>
          <td align='right'>
            <a name='P567'>567</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C567'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P568'>
          <td align='right'>
            <a name='P568'>568</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "current"' id='C568'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P569'>
          <td align='right'>
            <a name='P569'>569</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C569'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P570'>
          <td align='right'>
            <a name='P570'>570</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C570'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P571'>
          <td align='right'>
            <a name='P571'>571</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C571'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P572'>
          <td align='right'>
            <a name='P572'>572</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C572'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P573'>
          <td align='right'>
            <a name='P573'>573</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C573'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P574'>
          <td align='right'>
            <a name='P574'>574</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C574'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P575'>
          <td align='right'>
            <a name='P575'>575</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C575'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P576'>
          <td align='right'>
            <a name='P576'>576</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying >=' id='C576'>
              2-ary >=
            </span>
          </td>
        </tr>
        <tr id='P577'>
          <td align='right'>
            <a name='P577'>577</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 584 if the value is False' id='C577'>
              JumpCond False 584
            </span>
          </td>
        </tr>
        <tr id='P578'>
          <td align='right'>
            <a name='P578'>578</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C578'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P579'>
          <td align='right'>
            <a name='P579'>579</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C579'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P580'>
          <td align='right'>
            <a name='P580'>580</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "current"' id='C580'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P581'>
          <td align='right'>
            <a name='P581'>581</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C581'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P582'>
          <td align='right'>
            <a name='P582'>582</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C582'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P583'>
          <td align='right'>
            <a name='P583'>583</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C583'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P584'>
          <td align='right'>
            <a name='P584'>584</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C584'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P585'>
          <td align='right'>
            <a name='P585'>585</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C585'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P586'>
          <td align='right'>
            <a name='P586'>586</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push returnVal' id='C586'>
              ReturnOp(returnVal)
            </span>
          </td>
        </tr>
        <tr id='P587'>
          <td align='right'>
            <a name='P587'>587</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable returnVal' id='C587'>
              DelVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P588'>
          <td align='right'>
            <a name='P588'>588</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 641' id='C588'>
              Jump 641
            </span>
          </td>
        </tr>
        <tr id='P589'>
          <td align='right'>
            <a name='P589'>589</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method next' id='C589'>
              Frame next(d)
            </span>
          </td>
        </tr>
        <tr id='P590'>
          <td align='right'>
            <a name='P590'>590</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C590'>
              AtomicInc(eager)
            </span>
          </td>
        </tr>
        <tr id='P591'>
          <td align='right'>
            <a name='P591'>591</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant None' id='C591'>
              Push None
            </span>
          </td>
        </tr>
        <tr id='P592'>
          <td align='right'>
            <a name='P592'>592</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in returnVal' id='C592'>
              StoreVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P593'>
          <td align='right'>
            <a name='P593'>593</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C593'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P594'>
          <td align='right'>
            <a name='P594'>594</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "elements"' id='C594'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P595'>
          <td align='right'>
            <a name='P595'>595</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C595'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P596'>
          <td align='right'>
            <a name='P596'>596</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C596'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P597'>
          <td align='right'>
            <a name='P597'>597</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C597'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P598'>
          <td align='right'>
            <a name='P598'>598</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C598'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P599'>
          <td align='right'>
            <a name='P599'>599</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >' id='C599'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P600'>
          <td align='right'>
            <a name='P600'>600</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 637 if the value is False' id='C600'>
              JumpCond False 637
            </span>
          </td>
        </tr>
        <tr id='P601'>
          <td align='right'>
            <a name='P601'>601</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable returnVal' id='C601'>
              DelVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P602'>
          <td align='right'>
            <a name='P602'>602</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C602'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P603'>
          <td align='right'>
            <a name='P603'>603</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "elements"' id='C603'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P604'>
          <td align='right'>
            <a name='P604'>604</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C604'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P605'>
          <td align='right'>
            <a name='P605'>605</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C605'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P606'>
          <td align='right'>
            <a name='P606'>606</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "current"' id='C606'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P607'>
          <td align='right'>
            <a name='P607'>607</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C607'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P608'>
          <td align='right'>
            <a name='P608'>608</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C608'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P609'>
          <td align='right'>
            <a name='P609'>609</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C609'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P610'>
          <td align='right'>
            <a name='P610'>610</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C610'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P611'>
          <td align='right'>
            <a name='P611'>611</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in returnVal' id='C611'>
              StoreVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P612'>
          <td align='right'>
            <a name='P612'>612</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C612'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P613'>
          <td align='right'>
            <a name='P613'>613</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C613'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P614'>
          <td align='right'>
            <a name='P614'>614</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C614'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P615'>
          <td align='right'>
            <a name='P615'>615</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C615'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P616'>
          <td align='right'>
            <a name='P616'>616</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C616'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P617'>
          <td align='right'>
            <a name='P617'>617</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C617'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P618'>
          <td align='right'>
            <a name='P618'>618</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C618'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P619'>
          <td align='right'>
            <a name='P619'>619</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C619'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P620'>
          <td align='right'>
            <a name='P620'>620</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C620'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P621'>
          <td align='right'>
            <a name='P621'>621</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C621'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P622'>
          <td align='right'>
            <a name='P622'>622</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C622'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P623'>
          <td align='right'>
            <a name='P623'>623</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C623'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P624'>
          <td align='right'>
            <a name='P624'>624</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C624'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P625'>
          <td align='right'>
            <a name='P625'>625</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "elements"' id='C625'>
              Push "elements"
            </span>
          </td>
        </tr>
        <tr id='P626'>
          <td align='right'>
            <a name='P626'>626</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C626'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P627'>
          <td align='right'>
            <a name='P627'>627</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C627'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P628'>
          <td align='right'>
            <a name='P628'>628</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying len' id='C628'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P629'>
          <td align='right'>
            <a name='P629'>629</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >=' id='C629'>
              2-ary >=
            </span>
          </td>
        </tr>
        <tr id='P630'>
          <td align='right'>
            <a name='P630'>630</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 637 if the value is False' id='C630'>
              JumpCond False 637
            </span>
          </td>
        </tr>
        <tr id='P631'>
          <td align='right'>
            <a name='P631'>631</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C631'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P632'>
          <td align='right'>
            <a name='P632'>632</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C632'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P633'>
          <td align='right'>
            <a name='P633'>633</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "current"' id='C633'>
              Push "current"
            </span>
          </td>
        </tr>
        <tr id='P634'>
          <td align='right'>
            <a name='P634'>634</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C634'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P635'>
          <td align='right'>
            <a name='P635'>635</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C635'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P636'>
          <td align='right'>
            <a name='P636'>636</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C636'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P637'>
          <td align='right'>
            <a name='P637'>637</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C637'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P638'>
          <td align='right'>
            <a name='P638'>638</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C638'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P639'>
          <td align='right'>
            <a name='P639'>639</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push returnVal' id='C639'>
              ReturnOp(returnVal)
            </span>
          </td>
        </tr>
        <tr id='P640'>
          <td align='right'>
            <a name='P640'>640</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable returnVal' id='C640'>
              DelVar returnVal
            </span>
          </td>
        </tr>
        <tr id='P641'>
          <td align='right'>
            <a name='P641'>641</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(430)' id='C641'>
              Push PC(430)
            </span>
          </td>
        </tr>
        <tr id='P642'>
          <td align='right'>
            <a name='P642'>642</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C642'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P643'>
          <td align='right'>
            <a name='P643'>643</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C643'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P644'>
          <td align='right'>
            <a name='P644'>644</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C644'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P645'>
          <td align='right'>
            <a name='P645'>645</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable d' id='C645'>
              Store d
            </span>
          </td>
        </tr>
        <tr id='P646'>
          <td align='right'>
            <a name='P646'>646</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 719' id='C646'>
              Jump 719
            </span>
          </td>
        </tr>
        <tr id='P647'>
          <td align='right'>
            <a name='P647'>647</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method insert_test' id='C647'>
              Frame insert_test(self)
            </span>
          </td>
        </tr>
        <tr id='P648'>
          <td align='right'>
            <a name='P648'>648</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C648'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P649'>
          <td align='right'>
            <a name='P649'>649</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "Testing insert"' id='C649'>
              Push "Testing insert"
            </span>
          </td>
        </tr>
        <tr id='P650'>
          <td align='right'>
            <a name='P650'>650</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C650'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P651'>
          <td align='right'>
            <a name='P651'>651</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C651'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P652'>
          <td align='right'>
            <a name='P652'>652</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C652'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P653'>
          <td align='right'>
            <a name='P653'>653</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C653'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P654'>
          <td align='right'>
            <a name='P654'>654</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(442)' id='C654'>
              Push PC(442)
            </span>
          </td>
        </tr>
        <tr id='P655'>
          <td align='right'>
            <a name='P655'>655</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C655'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P656'>
          <td align='right'>
            <a name='P656'>656</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?d' id='C656'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P657'>
          <td align='right'>
            <a name='P657'>657</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C657'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P658'>
          <td align='right'>
            <a name='P658'>658</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C658'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P659'>
          <td align='right'>
            <a name='P659'>659</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C659'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P660'>
          <td align='right'>
            <a name='P660'>660</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying Closure' id='C660'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P661'>
          <td align='right'>
            <a name='P661'>661</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C661'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P662'>
          <td align='right'>
            <a name='P662'>662</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C662'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P663'>
          <td align='right'>
            <a name='P663'>663</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C663'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P664'>
          <td align='right'>
            <a name='P664'>664</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "Done inserting"' id='C664'>
              Push "Done inserting"
            </span>
          </td>
        </tr>
        <tr id='P665'>
          <td align='right'>
            <a name='P665'>665</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C665'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P666'>
          <td align='right'>
            <a name='P666'>666</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C666'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P667'>
          <td align='right'>
            <a name='P667'>667</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable self' id='C667'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P668'>
          <td align='right'>
            <a name='P668'>668</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C668'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P669'>
          <td align='right'>
            <a name='P669'>669</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C669'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P670'>
          <td align='right'>
            <a name='P670'>670</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C670'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P671'>
          <td align='right'>
            <a name='P671'>671</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 719' id='C671'>
              Jump 719
            </span>
          </td>
        </tr>
        <tr id='P672'>
          <td align='right'>
            <a name='P672'>672</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method delete_test' id='C672'>
              Frame delete_test(self)
            </span>
          </td>
        </tr>
        <tr id='P673'>
          <td align='right'>
            <a name='P673'>673</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C673'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P674'>
          <td align='right'>
            <a name='P674'>674</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "Testing delete"' id='C674'>
              Push "Testing delete"
            </span>
          </td>
        </tr>
        <tr id='P675'>
          <td align='right'>
            <a name='P675'>675</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C675'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P676'>
          <td align='right'>
            <a name='P676'>676</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C676'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P677'>
          <td align='right'>
            <a name='P677'>677</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C677'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P678'>
          <td align='right'>
            <a name='P678'>678</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C678'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P679'>
          <td align='right'>
            <a name='P679'>679</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(493)' id='C679'>
              Push PC(493)
            </span>
          </td>
        </tr>
        <tr id='P680'>
          <td align='right'>
            <a name='P680'>680</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?d' id='C680'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P681'>
          <td align='right'>
            <a name='P681'>681</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C681'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P682'>
          <td align='right'>
            <a name='P682'>682</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C682'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P683'>
          <td align='right'>
            <a name='P683'>683</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in v' id='C683'>
              StoreVar v
            </span>
          </td>
        </tr>
        <tr id='P684'>
          <td align='right'>
            <a name='P684'>684</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C684'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P685'>
          <td align='right'>
            <a name='P685'>685</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "Done deleting"' id='C685'>
              Push "Done deleting"
            </span>
          </td>
        </tr>
        <tr id='P686'>
          <td align='right'>
            <a name='P686'>686</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C686'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P687'>
          <td align='right'>
            <a name='P687'>687</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C687'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P688'>
          <td align='right'>
            <a name='P688'>688</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable self' id='C688'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P689'>
          <td align='right'>
            <a name='P689'>689</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C689'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P690'>
          <td align='right'>
            <a name='P690'>690</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C690'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P691'>
          <td align='right'>
            <a name='P691'>691</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C691'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P692'>
          <td align='right'>
            <a name='P692'>692</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C692'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P693'>
          <td align='right'>
            <a name='P693'>693</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C693'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P694'>
          <td align='right'>
            <a name='P694'>694</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C694'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P695'>
          <td align='right'>
            <a name='P695'>695</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 719' id='C695'>
              Jump 719
            </span>
          </td>
        </tr>
        <tr id='P696'>
          <td align='right'>
            <a name='P696'>696</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method next_test' id='C696'>
              Frame next_test(self)
            </span>
          </td>
        </tr>
        <tr id='P697'>
          <td align='right'>
            <a name='P697'>697</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C697'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P698'>
          <td align='right'>
            <a name='P698'>698</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "Testing next"' id='C698'>
              Push "Testing next"
            </span>
          </td>
        </tr>
        <tr id='P699'>
          <td align='right'>
            <a name='P699'>699</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C699'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P700'>
          <td align='right'>
            <a name='P700'>700</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of self' id='C700'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P701'>
          <td align='right'>
            <a name='P701'>701</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C701'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P702'>
          <td align='right'>
            <a name='P702'>702</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and add to print history' id='C702'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P703'>
          <td align='right'>
            <a name='P703'>703</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(589)' id='C703'>
              Push PC(589)
            </span>
          </td>
        </tr>
        <tr id='P704'>
          <td align='right'>
            <a name='P704'>704</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?d' id='C704'>
              Push ?d
            </span>
          </td>
        </tr>
        <tr id='P705'>
          <td align='right'>
            <a name='P705'>705</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying Closure' id='C705'>
              2-ary Closure
            </span>
          </td>
        </tr>
        <tr id='P706'>
          <td align='right'>
            <a name='P706'>706</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C706'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P707'>
          <td align='right'>
            <a name='P707'>707</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in v' id='C707'>
              StoreVar v
            </span>
          </td>
        </tr>
        <tr id='P708'>
          <td align='right'>
            <a name='P708'>708</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C708'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P709'>
          <td align='right'>
            <a name='P709'>709</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "Done next"' id='C709'>
              Push "Done next"
            </span>
          </td>
        </tr>
        <tr id='P710'>
          <td align='right'>
            <a name='P710'>710</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C710'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P711'>
          <td align='right'>
            <a name='P711'>711</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of self' id='C711'>
              LoadVar self
            </span>
          </td>
        </tr>
        <tr id='P712'>
          <td align='right'>
            <a name='P712'>712</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable self' id='C712'>
              DelVar self
            </span>
          </td>
        </tr>
        <tr id='P713'>
          <td align='right'>
            <a name='P713'>713</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C713'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P714'>
          <td align='right'>
            <a name='P714'>714</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C714'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P715'>
          <td align='right'>
            <a name='P715'>715</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C715'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P716'>
          <td align='right'>
            <a name='P716'>716</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C716'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P717'>
          <td align='right'>
            <a name='P717'>717</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and add to print history' id='C717'>
              Print
            </span>
          </td>
        </tr>
        <tr id='P718'>
          <td align='right'>
            <a name='P718'>718</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C718'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P719'>
          <td align='right'>
            <a name='P719'>719</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C719'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P720'>
          <td align='right'>
            <a name='P720'>720</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 2' id='C720'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P721'>
          <td align='right'>
            <a name='P721'>721</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ..' id='C721'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P722'>
          <td align='right'>
            <a name='P722'>722</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C722'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P723'>
          <td align='right'>
            <a name='P723'>723</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C723'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P724'>
          <td align='right'>
            <a name='P724'>724</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 732 if the value is False' id='C724'>
              JumpCond False 732
            </span>
          </td>
        </tr>
        <tr id='P725'>
          <td align='right'>
            <a name='P725'>725</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?PC(647)' id='C725'>
              Push ?PC(647)
            </span>
          </td>
        </tr>
        <tr id='P726'>
          <td align='right'>
            <a name='P726'>726</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C726'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P727'>
          <td align='right'>
            <a name='P727'>727</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C727'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P728'>
          <td align='right'>
            <a name='P728'>728</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C728'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P729'>
          <td align='right'>
            <a name='P729'>729</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C729'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P730'>
          <td align='right'>
            <a name='P730'>730</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C730'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P731'>
          <td align='right'>
            <a name='P731'>731</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 723' id='C731'>
              Jump 723
            </span>
          </td>
        </tr>
        <tr id='P732'>
          <td align='right'>
            <a name='P732'>732</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C732'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P733'>
          <td align='right'>
            <a name='P733'>733</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C733'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P734'>
          <td align='right'>
            <a name='P734'>734</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 2' id='C734'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P735'>
          <td align='right'>
            <a name='P735'>735</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ..' id='C735'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P736'>
          <td align='right'>
            <a name='P736'>736</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C736'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P737'>
          <td align='right'>
            <a name='P737'>737</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C737'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P738'>
          <td align='right'>
            <a name='P738'>738</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 746 if the value is False' id='C738'>
              JumpCond False 746
            </span>
          </td>
        </tr>
        <tr id='P739'>
          <td align='right'>
            <a name='P739'>739</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?PC(672)' id='C739'>
              Push ?PC(672)
            </span>
          </td>
        </tr>
        <tr id='P740'>
          <td align='right'>
            <a name='P740'>740</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C740'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P741'>
          <td align='right'>
            <a name='P741'>741</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C741'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P742'>
          <td align='right'>
            <a name='P742'>742</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C742'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P743'>
          <td align='right'>
            <a name='P743'>743</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C743'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P744'>
          <td align='right'>
            <a name='P744'>744</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C744'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P745'>
          <td align='right'>
            <a name='P745'>745</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 737' id='C745'>
              Jump 737
            </span>
          </td>
        </tr>
        <tr id='P746'>
          <td align='right'>
            <a name='P746'>746</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C746'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P747'>
          <td align='right'>
            <a name='P747'>747</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C747'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P748'>
          <td align='right'>
            <a name='P748'>748</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 2' id='C748'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P749'>
          <td align='right'>
            <a name='P749'>749</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ..' id='C749'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P750'>
          <td align='right'>
            <a name='P750'>750</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C750'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P751'>
          <td align='right'>
            <a name='P751'>751</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C751'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P752'>
          <td align='right'>
            <a name='P752'>752</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 760 if the value is False' id='C752'>
              JumpCond False 760
            </span>
          </td>
        </tr>
        <tr id='P753'>
          <td align='right'>
            <a name='P753'>753</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?PC(696)' id='C753'>
              Push ?PC(696)
            </span>
          </td>
        </tr>
        <tr id='P754'>
          <td align='right'>
            <a name='P754'>754</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C754'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P755'>
          <td align='right'>
            <a name='P755'>755</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C755'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P756'>
          <td align='right'>
            <a name='P756'>756</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying AddArg' id='C756'>
              2-ary AddArg
            </span>
          </td>
        </tr>
        <tr id='P757'>
          <td align='right'>
            <a name='P757'>757</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C757'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P758'>
          <td align='right'>
            <a name='P758'>758</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C758'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P759'>
          <td align='right'>
            <a name='P759'>759</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 751' id='C759'>
              Jump 751
            </span>
          </td>
        </tr>
        <tr id='P760'>
          <td align='right'>
            <a name='P760'>760</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C760'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P761'>
          <td align='right'>
            <a name='P761'>761</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C761'>
              ReturnOp(result. None)
            </span>
          </td>
        </tr>
        <tr id='P762'>
          <td align='right'>
            <a name='P762'>762</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C762'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
 </div>
</div>
    </td>
    <td valign='top' class='dynamic-hidden-col'>
      <img src='disque_btest.png' alt='DFA image'>
    </td>
  </tr>
</table>
<script>
var nthreads = 0;
var nmegasteps = 0;
var vardir = [
  []
];
var state =
{
  "nstates": 46054,
  "hvm": {
    "modules": {
        "__main__": {
            "file": "disque_btest.hny",
            "lines": [
                "import disque",
                "",
                "const N_INSERT = 1",
                "const N_DELETE = 1",
                "const N_NEXT = 1",
                "",
                "d = disque.Disque()",
                "",
                "def insert_test(self):",
                "    print(\"Testing insert\", self)",
                "    disque.insert(?d, self)",
                "    print(\"Done inserting\", self)",
                "",
                "def delete_test(self):",
                "    print(\"Testing delete\", self)",
                "    let v = disque.delete(?d):",
                "        print(\"Done deleting\", self, v)",
                "",
                "def next_test(self):",
                "    print(\"Testing next\", self)",
                "    let v = disque.next(?d):",
                "        print(\"Done next\", self, v)",
                "",
                "",
                "for i in {1..N_INSERT}:",
                "    spawn insert_test(i)",
                "for i in {1..N_DELETE}:",
                "    spawn delete_test(i)",
                "for i in {1..N_NEXT}:",
                "    spawn next_test(i)",
                ""
              ],
            "identifiers": {
                "d": "global",
                "self": "local-const",
                "N_INSERT": "constant",
                "N_NEXT": "constant",
                "i": "local-const",
                "disque": "module",
                "this": "local-var",
                "v": "local-const",
                "N_DELETE": "constant",
                "next_test": "constant",
                "___": "___",
                "delete_test": "constant",
                "insert_test": "constant"
              }
          },
        "disque": {
            "file": "disque.hny",
            "lines": [
                "import lists",
                "",
                "def Disque() returns d:",
                "  d = {.elements: [], .current: 0}",
                "",
                "def insert(d, v):",
                "  atomically:",
                "    d->elements = lists.subseq(d->elements, 0, d->current) + [v,] + lists.subseq(d->elements, d->current, len d->elements)",
                "",
                "def delete(d) returns returnVal:",
                "  atomically:",
                "    returnVal = None",
                "    ",
                "    if len d->elements > 0: ",
                "      returnVal = d->elements[d->current]",
                "      d->elements = lists.subseq(d->elements, 0, d->current) + lists.subseq(d->elements, d->current + 1, len d->elements)",
                "      d->current += 1",
                "      if d->current >= len d->elements: d->current = 0",
                "",
                "def next(d) returns returnVal:",
                "  atomically:",
                "    returnVal = None",
                "    if len d->elements > 0:",
                "      returnVal = d->elements[d->current]",
                "      d->current += 1",
                "      if d->current >= len d->elements: d->current = 0"
              ],
            "identifiers": {
                "d": "local-const",
                "this": "local-var",
                "v": "local-const",
                "Disque": "constant",
                "next": "constant",
                "delete": "constant",
                "lists": "module",
                "___": "___",
                "insert": "constant"
              }
          },
        "lists": {
            "file": "/Users/stutigupta/.local/lib/python3.12/site-packages/harmony_model_checker/modules/lists.hny",
            "lines": [
                "# return s[b:e]",
                "def subseq(s, b, e) returns result:",
                "    result = [ s[x] for x in {b..e-1} ]",
                "",
                "def append(s, e) returns result:",
                "    result = s + [e,]",
                "",
                "def head(s) returns result:",
                "    result = s[0]",
                "",
                "def tail(s) returns result:",
                "    result = s",
                "    del result[0]",
                "",
                "# convert values of a dictionary into a list",
                "def values(d) returns result:",
                "    result = [ v for _:v in d ]",
                "",
                "# like Python .items()",
                "def items(d) returns result:",
                "    result = [ (k, v) for k:v in d ]",
                "",
                "# quicksort of a list",
                "def qsort(a) returns sorted_list:",
                "    if a == []:",
                "        sorted_list = []",
                "    else:",
                "        let (pivot, rest) = head(a), tail(a)",
                "        let lower = [ v for v in rest where v < pivot ]",
                "        let higher = [ v for v in rest where v >= pivot ]:",
                "            sorted_list = qsort(lower) + [pivot,] + qsort(higher)",
                "",
                "# like Python index()",
                "def index(d, e) returns i:",
                "    i = 0",
                "    while d[i] != e:",
                "        i += 1",
                "",
                "# like Python startswith (only defined for strings)",
                "def startswith(d, prefix) returns result:",
                "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
                "",
                "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
                "def foldl(d, f, z) returns result:",
                "    result = z",
                "    for e in d:",
                "        result = f(result, e)",
                "",
                "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
                "def foldr(d, f, z) returns result:",
                "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
                "",
                "# Python functools reduce operator",
                "def reduce(f, d, z) returns result:",
                "    result = foldl(d, f, z)",
                "",
                "# Return a permutation of set s",
                "def permuted(s) returns perm:",
                "    perm = []",
                "    var c = s",
                "    while c != {}:",
                "        let e = choose c:",
                "            perm += [ e, ]",
                "            c -= { e }",
                "",
                "# Return a list of elements satisfying the condition",
                "def filter(cond, s) returns t:",
                "    t = [ e for e in s where cond(e) ]",
                "",
                "# Return a list of elements mapped by f",
                "def map(f, s) returns t:",
                "    t = [ f(e) for e in s ]"
              ],
            "identifiers": {
                "f": "local-const",
                "z": "local-const",
                "filter": "constant",
                "d": "local-const",
                "head": "constant",
                "x": "local-const",
                "higher": "local-const",
                "i": "local-const",
                "startswith": "constant",
                "foldl": "constant",
                "values": "constant",
                "k": "local-const",
                "e": "local-const",
                "map": "constant",
                "qsort": "constant",
                "pivot": "local-const",
                "a": "local-const",
                "c": "local-var",
                "rest": "local-const",
                "b": "local-const",
                "permuted": "constant",
                "this": "local-var",
                "v": "local-const",
                "prefix": "local-const",
                "subseq": "constant",
                "cond": "local-const",
                "s": "local-const",
                "lower": "local-const",
                "reduce": "constant",
                "tail": "constant",
                "___": "___",
                "items": "constant",
                "foldr": "constant",
                "index": "constant",
                "append": "constant"
              }
          }
      },
    "labels": {
        "__end__": 763
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame subseq(s, b, e)",
            "start of method subseq"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu3",
            "initialize accumulator for list comprehension: pop a value and store in $accu3"
          ],
        [
            "LoadVar b",
            "push the value of b"
          ],
        [
            "DelVar b",
            "delete method variable b"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 26",
            "check if loop is done: pop a value and jump to 26 if the value is False"
          ],
        [
            "LoadVar $accu3",
            "load accumulator: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu3",
            "update accumulator: pop a value and store in $accu3"
          ],
        [
            "Jump 14",
            "set program counter to 14"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu3",
            "load final accumulator result: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame append(s, e)",
            "start of method append"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame head(s)",
            "start of method head"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame tail(s)",
            "start of method tail"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "DelVar [result]",
            "pop an address of a method variable and delete that variable"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame values(d)",
            "start of method values"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu52",
            "initialize accumulator for list comprehension: pop a value and store in $accu52"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, v)",
            "get next element and assign to _:v; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 83",
            "check if loop is done: pop a value and jump to 83 if the value is False"
          ],
        [
            "LoadVar $accu52",
            "load accumulator: push the value of $accu52"
          ],
        [
            "DelVar $accu52",
            "delete method variable $accu52"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu52",
            "update accumulator: pop a value and store in $accu52"
          ],
        [
            "Jump 73",
            "set program counter to 73"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu52",
            "load final accumulator result: push the value of $accu52"
          ],
        [
            "DelVar $accu52",
            "delete method variable $accu52"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame items(d)",
            "start of method items"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu68",
            "initialize accumulator for list comprehension: pop a value and store in $accu68"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(k, v)",
            "get next element and assign to k:v; push False or True depending on success"
          ],
        [
            "JumpCond False 110",
            "check if loop is done: pop a value and jump to 110 if the value is False"
          ],
        [
            "LoadVar $accu68",
            "load accumulator: push the value of $accu68"
          ],
        [
            "DelVar $accu68",
            "delete method variable $accu68"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu68",
            "update accumulator: pop a value and store in $accu68"
          ],
        [
            "Jump 96",
            "set program counter to 96"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu68",
            "load final accumulator result: push the value of $accu68"
          ],
        [
            "DelVar $accu68",
            "delete method variable $accu68"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame qsort(a)",
            "start of method qsort"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 126",
            "pop a value and jump to 126 if the value is False"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar sorted_list",
            "pop a value and store in sorted_list"
          ],
        [
            "Jump 192",
            "set program counter to 192"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Apply PC(45)",
            "call method PC(45)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Apply PC(55)",
            "call method PC(55)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar (pivot, rest)",
            "pop a value and store in (pivot, rest)"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu103",
            "initialize accumulator for list comprehension: pop a value and store in $accu103"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 153",
            "check if loop is done: pop a value and jump to 153 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "JumpCond False 139",
            "pop a value and jump to 139 if the value is False"
          ],
        [
            "LoadVar $accu103",
            "load accumulator: push the value of $accu103"
          ],
        [
            "DelVar $accu103",
            "delete method variable $accu103"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu103",
            "update accumulator: pop a value and store in $accu103"
          ],
        [
            "Jump 139",
            "set program counter to 139"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu103",
            "load final accumulator result: push the value of $accu103"
          ],
        [
            "DelVar $accu103",
            "delete method variable $accu103"
          ],
        [
            "StoreVar lower",
            "pop a value and store in lower"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu120",
            "initialize accumulator for list comprehension: pop a value and store in $accu120"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "DelVar rest",
            "delete method variable rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 176",
            "check if loop is done: pop a value and jump to 176 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 162",
            "pop a value and jump to 162 if the value is False"
          ],
        [
            "LoadVar $accu120",
            "load accumulator: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu120",
            "update accumulator: pop a value and store in $accu120"
          ],
        [
            "Jump 162",
            "set program counter to 162"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu120",
            "load final accumulator result: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "StoreVar higher",
            "pop a value and store in higher"
          ],
        [
            "LoadVar lower",
            "push the value of lower"
          ],
        [
            "DelVar lower",
            "delete method variable lower"
          ],
        [
            "Apply PC(117)",
            "call method PC(117)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "DelVar pivot",
            "delete method variable pivot"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar higher",
            "push the value of higher"
          ],
        [
            "DelVar higher",
            "delete method variable higher"
          ],
        [
            "Apply PC(117)",
            "call method PC(117)"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "StoreVar sorted_list",
            "pop a value and store in sorted_list"
          ],
        [
            "ReturnOp(sorted_list)",
            "restore caller method state and push sorted_list"
          ],
        [
            "DelVar sorted_list",
            "delete method variable sorted_list"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame index(d, e)",
            "start of method index"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 211",
            "pop a value and jump to 211 if the value is False"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Jump 198",
            "set program counter to 198"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "ReturnOp(i)",
            "restore caller method state and push i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame startswith(d, prefix)",
            "start of method startswith"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "JumpCond False 257",
            "pop a value and jump to 257 if the value is False"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu172",
            "initialize accumulator for list comprehension: pop a value and store in $accu172"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 250",
            "check if loop is done: pop a value and jump to 250 if the value is False"
          ],
        [
            "LoadVar $accu172",
            "load accumulator: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu172",
            "update accumulator: pop a value and store in $accu172"
          ],
        [
            "Jump 233",
            "set program counter to 233"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "LoadVar $accu172",
            "load final accumulator result: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "1-ary all",
            "pop 1 value and push the result of applying all"
          ],
        [
            "Jump 260",
            "set program counter to 260"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame foldl(d, f, z)",
            "start of method foldl"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 285",
            "check if loop is done: pop a value and jump to 285 if the value is False"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 271",
            "set program counter to 271"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame foldr(d, f, z)",
            "start of method foldr"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 301",
            "pop a value and jump to 301 if the value is False"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "Jump 323",
            "set program counter to 323"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(55)",
            "call method PC(55)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(289)",
            "call method PC(289)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame reduce(f, d, z)",
            "start of method reduce"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(263)",
            "call method PC(263)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame permuted(s)",
            "start of method permuted"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 371",
            "pop a value and jump to 371 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar e",
            "pop a value and store in e"
          ],
        [
            "LoadVar perm",
            "push the value of perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "Jump 348",
            "set program counter to 348"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(perm)",
            "restore caller method state and push perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame filter(cond, s)",
            "start of method filter"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu292",
            "initialize accumulator for list comprehension: pop a value and store in $accu292"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 396",
            "check if loop is done: pop a value and jump to 396 if the value is False"
          ],
        [
            "LoadVar cond",
            "push the value of cond"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 381",
            "pop a value and jump to 381 if the value is False"
          ],
        [
            "LoadVar $accu292",
            "load accumulator: push the value of $accu292"
          ],
        [
            "DelVar $accu292",
            "delete method variable $accu292"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu292",
            "update accumulator: pop a value and store in $accu292"
          ],
        [
            "Jump 381",
            "set program counter to 381"
          ],
        [
            "DelVar cond",
            "delete method variable cond"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "LoadVar $accu292",
            "load final accumulator result: push the value of $accu292"
          ],
        [
            "DelVar $accu292",
            "delete method variable $accu292"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame map(f, s)",
            "start of method map"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu313",
            "initialize accumulator for list comprehension: pop a value and store in $accu313"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 422",
            "check if loop is done: pop a value and jump to 422 if the value is False"
          ],
        [
            "LoadVar $accu313",
            "load accumulator: push the value of $accu313"
          ],
        [
            "DelVar $accu313",
            "delete method variable $accu313"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu313",
            "update accumulator: pop a value and store in $accu313"
          ],
        [
            "Jump 410",
            "set program counter to 410"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar $accu313",
            "load final accumulator result: push the value of $accu313"
          ],
        [
            "DelVar $accu313",
            "delete method variable $accu313"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame Disque()",
            "start of method Disque"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar d",
            "pop a value and store in d"
          ],
        [
            "ReturnOp(d)",
            "restore caller method state and push d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame insert(d, v)",
            "start of method insert"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame delete(d)",
            "start of method delete"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 584",
            "pop a value and jump to 584 if the value is False"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 584",
            "pop a value and jump to 584 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(returnVal)",
            "restore caller method state and push returnVal"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "Jump 641",
            "jump over method definition: set program counter to 641"
          ],
        [
            "Frame next(d)",
            "start of method next"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 637",
            "pop a value and jump to 637 if the value is False"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 637",
            "pop a value and jump to 637 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(returnVal)",
            "restore caller method state and push returnVal"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "Push PC(430)",
            "push constant PC(430)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store d",
            "pop a value and store it in shared variable d"
          ],
        [
            "Jump 719",
            "jump over method definition: set program counter to 719"
          ],
        [
            "Frame insert_test(self)",
            "start of method insert_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Testing insert\"",
            "push constant \"Testing insert\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(442)",
            "push constant PC(442)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Done inserting\"",
            "push constant \"Done inserting\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 719",
            "jump over method definition: set program counter to 719"
          ],
        [
            "Frame delete_test(self)",
            "start of method delete_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Testing delete\"",
            "push constant \"Testing delete\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(493)",
            "push constant PC(493)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Done deleting\"",
            "push constant \"Done deleting\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 719",
            "jump over method definition: set program counter to 719"
          ],
        [
            "Frame next_test(self)",
            "start of method next_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Testing next\"",
            "push constant \"Testing next\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(589)",
            "push constant PC(589)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Done next\"",
            "push constant \"Done next\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 732",
            "check if loop is done: pop a value and jump to 732 if the value is False"
          ],
        [
            "Push ?PC(647)",
            "push constant ?PC(647)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 723",
            "set program counter to 723"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 746",
            "check if loop is done: pop a value and jump to 746 if the value is False"
          ],
        [
            "Push ?PC(672)",
            "push constant ?PC(672)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 737",
            "set program counter to 737"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 760",
            "check if loop is done: pop a value and jump to 760 if the value is False"
          ],
        [
            "Push ?PC(696)",
            "push constant ?PC(696)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 751",
            "set program counter to 751"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                1,
                1,
                32,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 31
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                6
              ],
            "line": 4,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                6
              ],
            "line": 7,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                6
              ],
            "line": 10,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 15,
            "stmt": [
                15,
                45,
                15,
                50
              ],
            "line": 15,
            "endcolumn": 50,
            "column": 45
          },
        {
            "module": "lists",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 19,
            "stmt": [
                19,
                23,
                19,
                28
              ],
            "line": 19,
            "endcolumn": 28,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                28
              ],
            "line": 20,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                28
              ],
            "line": 20,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 23,
            "stmt": [
                23,
                22,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 24,
            "stmt": [
                24,
                1,
                24,
                33
              ],
            "line": 24,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 24,
            "stmt": [
                24,
                1,
                24,
                33
              ],
            "line": 24,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 14,
            "column": 8
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 38
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 45
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 37,
            "column": 33
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 37,
            "column": 33
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 38,
            "column": 27
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 47,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 47,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 65,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 65,
            "column": 27
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 33,
            "stmt": [
                33,
                22,
                33,
                27
              ],
            "line": 33,
            "endcolumn": 27,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 33,
            "stmt": [
                33,
                22,
                33,
                27
              ],
            "line": 33,
            "endcolumn": 27,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                26
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                26
              ],
            "line": 34,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                9
              ],
            "line": 35,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                9
              ],
            "line": 35,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 35,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 35,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 75,
            "column": 75
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 89,
            "column": 84
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 90,
            "column": 80
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 94,
            "column": 94
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 94,
            "column": 80
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 94,
            "column": 75
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 62,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 96
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 42
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 40,
            "column": 38
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 43,
            "stmt": [
                43,
                55,
                43,
                60
              ],
            "line": 43,
            "endcolumn": 60,
            "column": 55
          },
        {
            "module": "lists",
            "endline": 44,
            "stmt": [
                44,
                1,
                44,
                34
              ],
            "line": 44,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 44,
            "stmt": [
                44,
                1,
                44,
                34
              ],
            "line": 44,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 49,
            "stmt": [
                49,
                59,
                49,
                64
              ],
            "line": 49,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 49,
            "stmt": [
                49,
                59,
                49,
                64
              ],
            "line": 49,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 49,
            "stmt": [
                49,
                59,
                49,
                64
              ],
            "line": 49,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                34
              ],
            "line": 50,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                34
              ],
            "line": 50,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 28,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 63,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 55,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 53,
            "stmt": [
                53,
                35,
                53,
                40
              ],
            "line": 53,
            "endcolumn": 40,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 54,
            "stmt": [
                54,
                1,
                54,
                35
              ],
            "line": 54,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 54,
            "stmt": [
                54,
                1,
                54,
                35
              ],
            "line": 54,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 57,
            "stmt": [
                57,
                32,
                57,
                37
              ],
            "line": 57,
            "endcolumn": 37,
            "column": 32
          },
        {
            "module": "lists",
            "endline": 58,
            "stmt": [
                58,
                1,
                58,
                29
              ],
            "line": 58,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 58,
            "stmt": [
                58,
                1,
                58,
                29
              ],
            "line": 58,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                13
              ],
            "line": 59,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "lists",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                13
              ],
            "line": 59,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                13
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                13
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                13
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 62,
            "stmt": [
                62,
                9,
                62,
                24
              ],
            "line": 62,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 62,
            "stmt": [
                62,
                9,
                62,
                24
              ],
            "line": 62,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 62,
            "stmt": [
                62,
                9,
                62,
                24
              ],
            "line": 62,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 18,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 66,
            "stmt": [
                66,
                53,
                66,
                58
              ],
            "line": 66,
            "endcolumn": 58,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 66,
            "stmt": [
                66,
                53,
                66,
                58
              ],
            "line": 66,
            "endcolumn": 58,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 66,
            "stmt": [
                66,
                53,
                66,
                58
              ],
            "line": 66,
            "endcolumn": 58,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                30
              ],
            "line": 67,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                30
              ],
            "line": 67,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 70,
            "stmt": [
                70,
                40,
                70,
                45
              ],
            "line": 70,
            "endcolumn": 45,
            "column": 40
          },
        {
            "module": "lists",
            "endline": 70,
            "stmt": [
                70,
                40,
                70,
                45
              ],
            "line": 70,
            "endcolumn": 45,
            "column": 40
          },
        {
            "module": "lists",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                6
              ],
            "line": 73,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                6
              ],
            "line": 73,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                23
              ],
            "line": 3,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                23
              ],
            "line": 3,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 16,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 23
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 33
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 5,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                6
              ],
            "line": 5,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                6
              ],
            "line": 5,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                17
              ],
            "line": 6,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                17
              ],
            "line": 6,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 7,
            "stmt": [
                7,
                3,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 30,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 35
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 51
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 48
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 48
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 58,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 58,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 64,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 64,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 80,
            "column": 69
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 82,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 92,
            "column": 85
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 92,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 92,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 95,
            "column": 95
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 104,
            "column": 98
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 104,
            "column": 95
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 104,
            "column": 95
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 111,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 111,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 114
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 107
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 122,
            "column": 69
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 122,
            "column": 69
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 122,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 7,
            "stmt": [
                7,
                3,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                6
              ],
            "line": 9,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                32
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                32
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 11,
            "stmt": [
                11,
                3,
                11,
                13
              ],
            "line": 11,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                20
              ],
            "line": 12,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "disque",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                20
              ],
            "line": 12,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 15
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 26,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 29,
            "column": 22
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 29,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 40,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 7,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 17,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 44,
            "column": 37
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 44,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 44,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 47,
            "column": 47
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 53
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 50
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 50
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 60,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 60,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 75,
            "column": 64
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 77,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 87,
            "column": 80
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 87,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 87,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 90,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 99,
            "column": 93
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 99,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 99,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 103,
            "column": 103
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 103,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 110,
            "column": 110
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 113
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 110
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 110
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 106
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 121,
            "column": 64
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 121,
            "column": 64
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 121,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 19,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 7,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 19,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 24
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 8,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 50,
            "column": 44
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 50,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 52,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 11,
            "stmt": [
                11,
                3,
                11,
                13
              ],
            "line": 11,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 11,
            "stmt": [
                11,
                3,
                11,
                13
              ],
            "line": 11,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                6
              ],
            "line": 19,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                6
              ],
            "line": 19,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 21,
            "stmt": [
                21,
                3,
                21,
                13
              ],
            "line": 21,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                20
              ],
            "line": 22,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "disque",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                20
              ],
            "line": 22,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 15
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 26,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 22
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 40,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 16,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 19,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 24
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 8,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 50,
            "column": 44
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 50,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 52,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 21,
            "stmt": [
                21,
                3,
                21,
                13
              ],
            "line": 21,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 21,
            "stmt": [
                21,
                3,
                21,
                13
              ],
            "line": 21,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                55,
                26,
                60
              ],
            "line": 26,
            "endcolumn": 60,
            "column": 55
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                55,
                26,
                60
              ],
            "line": 26,
            "endcolumn": 60,
            "column": 55
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 22,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                6
              ],
            "line": 13,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                1,
                14,
                22
              ],
            "line": 14,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                1,
                14,
                22
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 39,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                1,
                18,
                6
              ],
            "line": 18,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 31,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 23,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                1,
                24,
                6
              ],
            "line": 24,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                24
              ],
            "line": 28,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                24
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                24
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                24
              ],
            "line": 28,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                24
              ],
            "line": 28,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                5,
                28,
                24
              ],
            "line": 28,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                1,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 19,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 22,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                6,
                32,
                6
              ],
            "line": 32,
            "endcolumn": 6,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                6,
                32,
                6
              ],
            "line": 32,
            "endcolumn": 6,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                6,
                32,
                6
              ],
            "line": 32,
            "endcolumn": 6,
            "column": 6
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(s, b, e)",
            "name": "subseq",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "value": "b",
            "op": "LoadVar"
          },
        {
            "value": "b",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "26",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "pc": "14",
            "op": "Jump"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(s, e)",
            "name": "append",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "head",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "tail",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "values",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu52",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "83",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu52",
            "op": "LoadVar"
          },
        {
            "value": "$accu52",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu52",
            "op": "StoreVar"
          },
        {
            "pc": "73",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu52",
            "op": "LoadVar"
          },
        {
            "value": "$accu52",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "items",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu68",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "k",
            "op": "Cut"
          },
        {
            "pc": "110",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu68",
            "op": "LoadVar"
          },
        {
            "value": "$accu68",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu68",
            "op": "StoreVar"
          },
        {
            "pc": "96",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu68",
            "op": "LoadVar"
          },
        {
            "value": "$accu68",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "qsort",
            "op": "Frame"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "126",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "sorted_list",
            "op": "StoreVar"
          },
        {
            "pc": "192",
            "op": "Jump"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "45"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "55"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "(pivot, rest)",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu103",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "153",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "139",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu103",
            "op": "LoadVar"
          },
        {
            "value": "$accu103",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu103",
            "op": "StoreVar"
          },
        {
            "pc": "139",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu103",
            "op": "LoadVar"
          },
        {
            "value": "$accu103",
            "op": "DelVar"
          },
        {
            "value": "lower",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": "rest",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "176",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "162",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "pc": "162",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": "higher",
            "op": "StoreVar"
          },
        {
            "value": "lower",
            "op": "LoadVar"
          },
        {
            "value": "lower",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "117"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "higher",
            "op": "LoadVar"
          },
        {
            "value": "higher",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "117"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "sorted_list",
            "op": "StoreVar"
          },
        {
            "result": "sorted_list",
            "op": "Return"
          },
        {
            "value": "sorted_list",
            "op": "DelVar"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(d, e)",
            "name": "index",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "211",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "pc": "198",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "result": "i",
            "op": "Return"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(d, prefix)",
            "name": "startswith",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "257",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "250",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "pc": "233",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "all",
            "op": "Nary"
          },
        {
            "pc": "260",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldl",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "285",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "271",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldr",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "301",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "pc": "323",
            "op": "Jump"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "55"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "289"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(f, d, z)",
            "name": "reduce",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "263"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "permuted",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "371",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "e",
            "op": "StoreVar"
          },
        {
            "value": "perm",
            "op": "LoadVar"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "pc": "348",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "perm",
            "op": "Return"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(cond, s)",
            "name": "filter",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu292",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "396",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "cond",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "381",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu292",
            "op": "LoadVar"
          },
        {
            "value": "$accu292",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu292",
            "op": "StoreVar"
          },
        {
            "pc": "381",
            "op": "Jump"
          },
        {
            "value": "cond",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "$accu292",
            "op": "LoadVar"
          },
        {
            "value": "$accu292",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(f, s)",
            "name": "map",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu313",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "422",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu313",
            "op": "LoadVar"
          },
        {
            "value": "$accu313",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu313",
            "op": "StoreVar"
          },
        {
            "pc": "410",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "$accu313",
            "op": "LoadVar"
          },
        {
            "value": "$accu313",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Disque",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "StoreVar"
          },
        {
            "result": "d",
            "op": "Return"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "(d, v)",
            "name": "insert",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "delete",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "584",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "584",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "returnVal",
            "op": "Return"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "pc": "641",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "next",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "637",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "637",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "returnVal",
            "op": "Return"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "430"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "d"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "719",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "insert_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Testing insert"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "442"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Done inserting"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "719",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "delete_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Testing delete"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "493"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Done deleting"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "719",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "next_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Testing next"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "589"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Done next"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "732",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "647"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "723",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "746",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "672"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "737",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "760",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "696"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "751",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "issue": "No issues",
  "dfasize": 7395,
  "profile": [
    1,
    1,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    42,
    42,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    32,
    32,
    32,
    32,
    32,
    32,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    4,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    0,
    14,
    28,
    28,
    28,
    28,
    28,
    28,
    14,
    14,
    14,
    14,
    14,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    14,
    14,
    14,
    0,
    0,
    14,
    28,
    28,
    28,
    28,
    28,
    28,
    14,
    14,
    14,
    14,
    14,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    12,
    8,
    8,
    8,
    8,
    8,
    8,
    14,
    14,
    14,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    14,
    14,
    0,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    22,
    22,
    0,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    14,
    42,
    42,
    1,
    1,
    1,
    1,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    0
  ]
}

;
var tickers = [];
var boxSize = 10;
var timeWidth = 40;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
// var hvmrow = document.getElementById("hvmrow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;
var colors = [ "green", "coral", "blueviolet" ];

// printing contexts
var contexts = {};
var ctxGen = 0;

var detailed = false;
var detailed_list = ['HVMcode', 'PChdr', 'StackTopHdr'];
var abbrev_list = [];

const issue_explanation = new Map([
    [ "Non-terminating state",
        `Some execution of the program leads to a state where not all threads can terminate, or where some threads are for ever busy.  This can include both deadlock and livelock situations.`
    ],
    [ "Safety violation",
        `Some execution of the program ran into an issue such as a failing assertion or accessing a non-existent variable.`
    ],
    [ "Active busy waiting",
        `Active busy waiting occurs when a thread is waiting for a condition in a loop while modifying the state.  A common example is waiting while acquiring and releasing a lock.  Using a condition variable or semaphore is preferred.`
    ],
    [ "Behavior violation: unexpected output",
        `Some execution of the program produced an output that is not recognized by the automaton provided as input.`
    ],
    [ "Behavior violation: terminal state not final",
        `Some execution of the program terminated, producing only a prefix of the outputs allowed by teh automaton provided as input.`
    ]
]);

function explain_issue(issue) {
    const x = " This interactive web page allows you to explore that execution."
    if (issue.startsWith("Data race ")) {
        var v = issue.substring(12, issue.length - 1);
        alert("The Harmony program suffers from a data race on variable '" + v + "'." + x);
    }
    else {
        var e = issue_explanation.get(issue);
        if (e == undefined) {
            alert("The Harmony program is not correct." + x);
        }
        else {
            alert(e + x);
        }
    }
}

function explain_turn() {
    alert(`In a Harmony program, threads take turns executing.  This table provides some information on each of these turns.  The turn that is currently active is highlighted in lightgreen, as is the corresponding thread in the thread table below.`);
}

function explain_status() {
    alert(`At any time, each thread can be in various different modes. 
        runnable:   thread is executing;
        terminated: thread has terminated;
        atomic:     thread is running exclusively;
        read-only:  thread cannot change shared state;
        failed:     thread has failed;
        blocked:    thread is waiting for shared state to change.`);
}

function explain_stacktrace() {
    alert(`This column lists the current stack trace for each thread.  On the left are the methods (functions) that the thread has invoked, and on the right the values of the local variables in each of these methods.`);
}

function set_details() {
  disp = detailed ? "" : "none";
  for (var i = 0; i < detailed_list.length; i++) {
    var x = document.getElementById(detailed_list[i]);
    x.style.display = disp;
  }
  var disp = detailed ? "none" : "";
  for (var i = 0; i < abbrev_list.length; i++) {
    var x = document.getElementById(abbrev_list[i]);
    x.style.display = disp;
  }
  var b = document.getElementById("details-button");
  b.innerHTML = detailed ? "Hide details" : "Show details";
}

function toggle_details() {
  detailed = !detailed;
  set_details();
}

function json_string_list(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "[ " + result + " ]";
}

function json_string_tuple(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "(" + result + ")";
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "{:}"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(func, args) {
  var result = "?";
  var index = 0;
  if (func.type == "pc") {
    if (func.value == -1 || func.value == -2) {
      result += args[0].value;
      index = 1;
    }
    else if (func.value == -3) {
      result += "this." + args[0].value;
      index = 1;
    }
    else {
      result += json_string(func);
    }
  }
  else {
    result += json_string(func);
  }
  for (var i = index; i < args.length; i++) {
    result += "[" + json_string(args[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  // TODO.  Is JSON.stringify deterministic (same context --> same string)?
  var key = JSON.stringify(obj);
  if (!(key in contexts)) {
    contexts[key] = ++ctxGen;
  }
  var output = '<span title="CONTEXT\n';
  if ("id" in obj) {
    output += "id: " + json_string(obj["id"]) + "\n";
  }
  output += "pc: " + json_string(obj["pc"]) + "\n";
  output += "vars: " + stringify_vars(obj["vars"]) + "\n";
  var atomic = "atomic" in obj && obj["atomic"]["value"] == "True";
  var stopped = "stopped" in obj && obj["stopped"]["value"] == "True";
  if (atomic || stopped) {
    output += "mode:"
    if (atomic) output += " atomic";
    if (stopped) output += " stopped";
    output += "\n";
  }
  output += "sp: " + json_string(obj["sp"]);
  return output + '" style="color:blue">C' + contexts[key] + '</span>';

  // var pc = json_string(obj.pc);
  // return "CTX(" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "list":
    return json_string_list(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    if ("func" in obj) {
      return json_string_address(obj.func, obj.args);
    }
    return "None";
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var loc = state.hvm.locs[pc];
  var module = state.hvm.modules[loc.module];
  loc.file = module.file;
  if (loc.line - 1 < module.lines.length) {
    loc.code = module.lines[loc.line - 1];
  }
  else {
    loc.code = null;
  }
  return loc;
//  var locs = state.locations;
//  while (pc >= 0) {
//    s = "" + pc;
//    if (locs.hasOwnProperty(s)) {
//      return locs[s];
//    }
//    pc--;
//  }
//  return noloc;
}

function drawTimeLine(mes, mis) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var nsteps = mes.nsteps;

  // Compute the total number of rows
  var yboxes = Math.ceil(mes.nsteps / timeWidth);

  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > timeWidth ? timeWidth : nsteps;
    for (var x = 0; x < xboxes; x++) {
      if (t >= currentTime) {
        c.fillStyle = "white";
      }
      else {
        c.fillStyle = colors[mis[t].trace.length % colors.length];
      }
      // c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      t += 1;
    }
    nsteps -= xboxes;
  }
  c.stroke();
  // mes.nextstep.innerHTML = "";
  return t;
}

function updateStatus(mes) {
  for (var i = 0; i < mes.contexts.length; i++) {
    var c = mes.contexts[i];
    if (c.tid == mes.tid) {
      if (c.mode == "terminated") {
        mes.nextstep.innerHTML = "terminated"
      }
      else if (c.hasOwnProperty("next")) {
        switch (c.next.type) {
        case "Continue":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "stopped in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line;
          break;
        case "Store":
          mes.nextstep.innerHTML = "about to store " + json_string(c.next.value) + " in variable " + c.next.var;
          break;
        case "Load":
          mes.nextstep.innerHTML = "about to load variable " + c.next.var;
          break;
        case "Assert":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "assertion failed in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + ":" + loc.code;
          mes.nextstep.style.color = "red";
          break;
        case "AtomicInc":
          var loc = getCode(c.pc);
          mes.nextstep.innerHTML = "about to execute in " + '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + ":" + loc.code;
          break;
        case "Print":
          mes.nextstep.innerHTML = "about to print " + json_string(c.next.value);
          break;
        default:
           mes.nextstep.innerHTML = "about to " + state.hvm.pretty[c.pc][1];
        }
      }
      break;
    }
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (false && k == "result" && obj[k].type == "address" && !("func" in obj)) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);      // TODO.  convert_var???
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function method_call(m, arg) {
  var result = "";
  if (m.type == "atom") {
    result += m.value;
  }
  else {
    result += json_string(m);
  }
  if (arg.type == "list") {
    result += json_string_tuple(arg.value);
  }
  else {
    result += "(" + json_string(arg) + ")";
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    // mcell.innerHTML = trace[i].method;
    mcell.innerHTML = method_call(trace[i].method_name, trace[i].method_arg);
    switch (trace[i].calltype) {
    case "process":
        // mcell.style.color = "blue";
        mcell.style.color = colors[(i + 1) % colors.length];
        break;
    case "normal":
        // mcell.style.color = "black";
        mcell.style.color = colors[(i + 1) % colors.length];
        break;
    case "interrupt":
        // mcell.style.color = "orange";
        mcell.style.color = colors[(i + 1) % colors.length];
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    // var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    var vtext = document.createElement("div");
    vtext.innerHTML = stringify_vars(trace[i].vars);
    vcell.appendChild(vtext);
  }
  if (false && failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function addToStep(step, entry) {
  var table = megasteps[step].thisstep;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*timeWidth + x + 1;
  run_microsteps();
}

function goto_time(which) {
  var tid = microsteps[tickers[which]].tid;
  currentTime = tickers[which] + 1;
  while (currentTime < totalTime) {
    if (microsteps[currentTime].tid != tid) {
      break;
    }
    if (which < tickers.length - 1 && currentTime == tickers[which + 1]) {
        break;
    }
    currentTime++;
  }
  run_microsteps();
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (!detailed) {
        if (tickers.length < 2 || currentTime <= tickers[1]) {
          currentTime = 0;
          run_microsteps();
          return;
        }
        for (var i = 2; i < tickers.length; i++) {
          if (tickers[i] >= currentTime) {
            goto_time(i-2)
            return;
          }
        }
        goto_time(tickers.length - 2);
      }
      else {
        if (currentTime > 0) {
          currentTime -= 1;
        }
        run_microsteps();
      }
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        if (!detailed) {
          for (var i = 0; i < tickers.length; i++) {
            if (tickers[i] >= currentTime) {
              goto_time(i)
              return;
            }
          }
          currentTime = totalTime;
        }
        else {
          currentTime += 1;
        }
        run_microsteps();
      }
      break;
    case 'ArrowUp':
      if (!detailed) {
        if (tickers.length < 2 || currentTime <= tickers[1]) {
          currentTime = 0;
          run_microsteps();
          return;
        }
        for (var i = 2; i < tickers.length; i++) {
          if (tickers[i] >= currentTime) {
            goto_time(i-2)
            return;
          }
        }
        goto_time(tickers.length - 2);
      }
      else if (currentTime > 0) {
        currentTime--;
        var mesidx = currentMegaStep();
        var mes = megasteps[mesidx];
        var mis = microsteps[currentTime];
        var tl = mis.trace.length;
        var endTime = mes.startTime + mes.nsteps;
        while (currentTime > mes.startTime) {
          mis = microsteps[currentTime - 1];
          tl2 = mis.trace.length;
          if (tl2 < tl) {
            break;
          }
          currentTime--;
        }
        run_microsteps();
      }
      break;
    case 'ArrowDown':
      if (currentTime < totalTime) {
        if (!detailed) {
          for (var i = 0; i < tickers.length; i++) {
            if (tickers[i] >= currentTime) {
              goto_time(i)
              return;
            }
          }
          currentTime = totalTime;
        }
        else {
          var mesidx = currentMegaStep();
          var mes = megasteps[mesidx];
          var mis = microsteps[currentTime];
          var tl = mis.trace.length;
          var endTime = mes.startTime + mes.nsteps;
          while (++currentTime < endTime) {
            mis = microsteps[currentTime];
            tl2 = mis.trace.length;
            if (tl2 < tl) {
              break;
            }
          }
        }
        run_microsteps();
      }
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var mesidx = currentMegaStep();
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
          if (currentMegaStep() != mesidx) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var tid = mas.tid;
  var t = microsteps.length;
  megasteps[curMegaStep].contexts = mas.contexts;
  if (t > 0 && microsteps[t - 1].tid != tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
    megasteps[curMegaStep].tid = tid;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(tid),
    pc: parseInt(mis.pc),
    // invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts,
    hvm: mis.code,
    explain2: mis.explain2
  };
  if (misidx != 0) {
    previous = microsteps[t-1];
  }
  else {
    ctx = mas.context;
    previous = { mode: ctx.mode, };
    if (ctx.hasOwnProperty("atomic")) {
      previous.atomic = ctx["atomic"];
    }
    else {
      previous.atomic = 0;
    }
    if (ctx.hasOwnProperty("readonly")) {
      previous.readonly = ctx["readonly"];
    }
    else {
      previous.readonly = 0;
    }
    if (ctx.hasOwnProperty("interruptlevel")) {
      previous.interruptlevel = ctx["interruptlevel"];
    }
    else {
      previous.interruptlevel = 0;
    }
    if (ctx.hasOwnProperty("trace")) {
      previous.trace = ctx.trace;
    }
    else {
      previous.trace = [];
    }
    if (ctx.hasOwnProperty("fp")) {
      previous.fp = ctx.fp;
    }
    else {
      previous.fp = 0;
    }
    if (ctx.hasOwnProperty("stack")) {
      previous.stack = ctx.stack.map(x => json_string(x));
    }
    else {
      previous.stack = [];
    }
    if (mas.hasOwnProperty("shared")) {
      previous.shared = convert_vars(mas.shared);
    }
    else {
      previous.shared = {};
    }
  }

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = previous.mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else {
    microsteps[t].atomic = previous.atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else {
    microsteps[t].readonly = previous.readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else {
    microsteps[t].interruptlevel = previous.interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choice = mis["choose"];
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choice = null;
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else {
    microsteps[t].trace = previous.trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace));
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  // if (mis.pc == "963") {
  //   alert(JSON.stringify(convert_vars(mis.shared)))
  // }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else {
    microsteps[t].shared = previous.shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else {
    microsteps[t].fp = previous.fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = previous.stack.slice(0,
                              previous.stack.length - n);
  }
  else {
    microsteps[t].stack = previous.stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function explain_expand(e) {
    var s = e.text;
    var result = "";
    var arg = 0;
    for (var i = 0; i < s.length; i++) {
      if (s[i] == '#') {
        i++;
        if (i == s.length) {
          break;
        }
        if (s[i] == '#') {
          result += '#';
        }
        else if (s[i] == '+') {
          result += json_string(e.args[arg++]);
        }
        else if (s[i] == '@') {
          var addr = json_string(e.args[arg++]);
          result += addr.slice(1);
        }
        else {
          result += json_string(e.args[parseInt(s[i])]);
        }
      }
      else {
        result += s[i];
      }
    }
    return result;
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mes = megasteps[mis.mesidx];
  var mesrow = mestable.rows[mis.mesidx];
  // mesrow.cells[3].innerHTML = mis.npc;
  x = document.getElementById('PC' + mis.mesidx);
  x.innerHTML = mis.npc;

  /*
  var op = state.hvm.code[mis.pc].op;
  if (op == "Store") {
    addToStep(mis.mesidx, "Store " + json_string(mis.explain2.args[0]) + " into " + json_string(mis.explain2.args[1]).slice(1));
  }
  else if (op == "Choose") {
    addToStep(mis.mesidx, "Choose " + json_string(mis.choice));
  }
  else if (op == "Print") {
    addToStep(mis.mesidx, "Print " + json_string(mis.explain2.args[0]));
  }
  */

  // if (mis.pc == 963) {
  //   alert(JSON.stringify(mis.shared));
  // }
  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i]);
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print);
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var cv = mis.contexts[ctx];
    var tid = parseInt(cv.tid);
    threads[tid].name = cv.name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(cv);
    threadtable.rows[tid].cells[3].innerHTML = cv.stack.slice(cv.fp).map(x => json_string(x));
  }
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

//  if (mis.invfails.length > 0) {
//    var inv = mis.invfails[0];
//    code = getCode(inv.pc);
//    coderow.style.color = "red";
//    coderow.innerHTML = '<a href="' + code.file + '">' + code.module + "</a>:" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
//    mis.cloc = null;
//  }
//  else
  {
    coderow.style.color = "blue";
    if (t+1 < microsteps.length) {
      var nmis = microsteps[t+1];
      loc = getCode(nmis.pc);
      if (loc.code == null) {
          coderow.innerHTML = '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML("<end>");
      }
      else {
        var l1 = parseInt(loc.line);
        var l2 = parseInt(loc.endline);
        if (l1 == l2 && l1 == loc.stmt[0] && l2 == loc.stmt[2]) {
          var c1 = parseInt(loc.column) - 1;
          var c2 = parseInt(loc.endcolumn);
          var s1 = loc.code.slice(0, c1);
          var s2 = loc.code.slice(c1, c2);
          var s3 = loc.code.slice(c2);
          coderow.innerHTML = '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(s1) + "<span style='color:green'>" + escapeHTML(s2) + "</span>" + escapeHTML(s3);
        }
        else {
          coderow.innerHTML = '<a href="' + loc.file + '">' + loc.module + "</a>:" + loc.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(loc.code);
        }
      }
    }
  }

  if (mis.failure != null) {
    mes.nextstep.innerHTML = '<span style="color:red">' + mis.failure + '</span>';
  }
  else if (t+1 < microsteps.length) {
    var nmis = microsteps[t+1];
    if (nmis.tid == mis.tid) {
        mes.nextstep.innerHTML = "after: " + explain_expand(nmis.explain2);
    }
    else {
        updateStatus(mes);
    }

    // hvmrow.innerHTML = "T" + nmis.tid + "/" + nmis.pc + ": " + nmis.hvm + " (" + explain_expand(nmis.explain2) + ")"
    currCloc = document.getElementById('C' + nmis.pc);
    currOffset = document.getElementById('P' + nmis.pc);
  }
  else {
    currCloc = null;
    currOffset = mis.offset;
    updateStatus(mes);
  }
}

function run_microsteps() {
  coderow.innerHTML = "";
  // hvmrow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
  }
  currCloc = document.getElementById('C0');
  currOffset = document.getElementById('P0');
  for (var i = 0; i < nmegasteps; i++) {
    // mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    // megasteps[i].thisstep.innerHTML = "";
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = threads[tid].stack;
  }

  for (var i = 0; i < nmegasteps; i++) {
    megasteps[i].nextstep.innerHTML = "";
  }
  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i], microsteps);
  }
  if (currentTime < microsteps.length /* && (currentTime == 0 ||
           microsteps[currentTime - 1].tid != microsteps[currentTime].tid) */) {
    var mis = microsteps[currentTime];
    var mes = megasteps[mis.mesidx];
    mes.nextstep.innerHTML = "next: " + explain_expand(mis.explain2);
    var mesrow = mestable.rows[mis.mesidx];
    // mesrow.cells[3].innerHTML = mis.pc;
    x = document.getElementById('PC' + mis.mesidx);
    x.innerHTML = mis.pc;

    if (false && mis.mesidx > 0) {
      var oldrow = mestable.rows[mis.mesidx - 1];
      for (var i = 0; i < vardir.length; i++) {
        mesrow.cells[i + 4].innerHTML = oldrow.cells[i + 4].innerHTML;
      }
    }
  }
  container.scrollTop = currOffset.offsetTop - 50;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = currentTime > 0 ? microsteps[currentTime - 1].mesidx : -1;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes);
    if (mes == curmes) {
      // row.style = 'background-color: #A5FF33;';
      row.style = 'background-color: #DFFF00;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = currentTime > 0 ? microsteps[currentTime - 1].tid : -1;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid);
    if (tid == curtid) {
      // row.style = 'background-color: #A5FF33;';
      row.style = 'background-color: #DFFF00;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  for (var i = 0; i < tickers.length; i++) {
    document.getElementById('radio' + i).checked = tickers[i] < currentTime;
    var k = document.getElementById('var' + i);
    if (k != null) {
        k.style.color = tickers[i] < currentTime ? "blue" : "grey";
    }
    var v = document.getElementById('val' + i);
    if (v != null) {
        v.style.color = tickers[i] < currentTime ? "green" : "grey";
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
  detailed_list.push("stacktop" + tid);
}
threads[0].stack = [ "()" ]
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  var thisstep = document.getElementById("thisstep" + i); 
  var nextstep = document.getElementById("nextstep" + i); 
  megasteps[i] = {
    canvas: canvas,
    thisstep: thisstep,
    nextstep: nextstep,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    tid: 0,
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
  detailed_list.push("timeline" + i)
  detailed_list.push("PC" + i)
  abbrev_list.push("thisstep" + i)
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
set_details()
document.addEventListener('keydown', handleKeyPress);

</script>
</body>
</html>

{
  "labels": {
    "__end__": 1490
  },
  "modules": {
    "lists": {
      "file": "/Users/stutigupta/.local/lib/python3.12/site-packages/harmony_model_checker/modules/lists.hny",
      "lines": [
        "# return s[b:e]",
        "def subseq(s, b, e) returns result:",
        "    result = [ s[x] for x in {b..e-1} ]",
        "",
        "def append(s, e) returns result:",
        "    result = s + [e,]",
        "",
        "def head(s) returns result:",
        "    result = s[0]",
        "",
        "def tail(s) returns result:",
        "    result = s",
        "    del result[0]",
        "",
        "# convert values of a dictionary into a list",
        "def values(d) returns result:",
        "    result = [ v for _:v in d ]",
        "",
        "# like Python .items()",
        "def items(d) returns result:",
        "    result = [ (k, v) for k:v in d ]",
        "",
        "# quicksort of a list",
        "def qsort(a) returns sorted_list:",
        "    if a == []:",
        "        sorted_list = []",
        "    else:",
        "        let (pivot, rest) = head(a), tail(a)",
        "        let lower = [ v for v in rest where v < pivot ]",
        "        let higher = [ v for v in rest where v >= pivot ]:",
        "            sorted_list = qsort(lower) + [pivot,] + qsort(higher)",
        "",
        "# like Python index()",
        "def index(d, e) returns i:",
        "    i = 0",
        "    while d[i] != e:",
        "        i += 1",
        "",
        "# like Python startswith (only defined for strings)",
        "def startswith(d, prefix) returns result:",
        "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
        "",
        "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
        "def foldl(d, f, z) returns result:",
        "    result = z",
        "    for e in d:",
        "        result = f(result, e)",
        "",
        "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
        "def foldr(d, f, z) returns result:",
        "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
        "",
        "# Python functools reduce operator",
        "def reduce(f, d, z) returns result:",
        "    result = foldl(d, f, z)",
        "",
        "# Return a permutation of set s",
        "def permuted(s) returns perm:",
        "    perm = []",
        "    var c = s",
        "    while c != {}:",
        "        let e = choose c:",
        "            perm += [ e, ]",
        "            c -= { e }",
        "",
        "# Return a list of elements satisfying the condition",
        "def filter(cond, s) returns t:",
        "    t = [ e for e in s where cond(e) ]",
        "",
        "# Return a list of elements mapped by f",
        "def map(f, s) returns t:",
        "    t = [ f(e) for e in s ]"
      ],
      "identifiers": {
        "s": "local-const",
        "b": "local-const",
        "e": "local-const",
        "x": "local-const",
        "d": "local-const",
        "v": "local-const",
        "k": "local-const",
        "a": "local-const",
        "pivot": "local-const",
        "rest": "local-const",
        "lower": "local-const",
        "higher": "local-const",
        "prefix": "local-const",
        "i": "local-const",
        "f": "local-const",
        "z": "local-const",
        "c": "local-var",
        "cond": "local-const",
        "this": "local-var",
        "subseq": "constant",
        "append": "constant",
        "head": "constant",
        "tail": "constant",
        "values": "constant",
        "items": "constant",
        "qsort": "constant",
        "index": "constant",
        "startswith": "constant",
        "foldl": "constant",
        "foldr": "constant",
        "reduce": "constant",
        "permuted": "constant",
        "filter": "constant",
        "map": "constant",
        "___": "___"
      }
    },
    "bags": {
      "file": "/Users/stutigupta/.local/lib/python3.12/site-packages/harmony_model_checker/modules/bags.hny",
      "lines": [
        "def empty() returns bg:",
        "    bg = {:}",
        "",
        "def fromSet(s) returns bg:",
        "    bg = { elt:1 for elt in s }",
        "",
        "def fromList(a) returns bg:",
        "    bg = {:}",
        "    for v in a:",
        "        if v in bg:",
        "            bg[v] += 1",
        "        else:",
        "            bg[v] = 1",
        "",
        "builtin multiplicity \"bag$multiplicity\"",
        "def multiplicity(bg, elt) returns count:",
        "    if elt in bg:",
        "        count = bg[elt]",
        "    else:",
        "        count = 0",
        "",
        "builtin size \"bag$size\"",
        "def size(bg) returns count:",
        "    count = 0",
        "    for _:c in bg:",
        "        count += c",
        "",
        "builtin bmin \"bag$bmin\"",
        "def bmin(bg) returns count:",
        "    assert bg != {:}",
        "    count = min(keys(bg))",
        "",
        "builtin bmax \"bag$bmax\"",
        "def bmax(bg) returns count:",
        "    assert bg != {:}",
        "    count = max(keys(bg))",
        "",
        "def bchoose(bg) returns elt:",
        "    elt = choose(keys(bg))",
        "",
        "builtin add \"bag$add\"",
        "def add(bg, elt) returns result:",
        "    result = bg",
        "    if elt in result:",
        "        result[elt] += 1",
        "    else:",
        "        result[elt] = 1",
        "",
        "builtin remove \"bag$remove\"",
        "def remove(bg, elt) returns result:",
        "    result = bg",
        "    if elt in result:",
        "        assert result[elt] > 0",
        "        result[elt] -= 1",
        "        if result[elt] == 0:",
        "            del result[elt]",
        "",
        "# Return set of all subbags of bg of size k",
        "def combinations(bg, k) returns result:",
        "    if k == 0:",
        "        result = { {:} }",
        "    else:",
        "        let n = size(bg):",
        "            if k > n:",
        "                result = {}",
        "            elif k == n:",
        "                result = { bg }",
        "            else:",
        "                let hd = bmin(bg) let tl = remove(bg, hd):",
        "                    result = { add(x, hd) for x in combinations(tl, k - 1) }",
        "                                | combinations(tl, k)"
      ],
      "identifiers": {
        "s": "local-const",
        "elt": "local-const",
        "a": "local-const",
        "v": "local-const",
        "bg": "local-const",
        "c": "local-const",
        "k": "local-const",
        "n": "local-const",
        "hd": "local-const",
        "tl": "local-const",
        "x": "local-const",
        "this": "local-var",
        "empty": "constant",
        "fromSet": "constant",
        "fromList": "constant",
        "multiplicity": "constant",
        "size": "constant",
        "bmin": "constant",
        "bmax": "constant",
        "bchoose": "constant",
        "add": "constant",
        "remove": "constant",
        "combinations": "constant",
        "___": "___"
      }
    },
    "synch": {
      "file": "/Users/stutigupta/.local/lib/python3.12/site-packages/harmony_model_checker/modules/synch.hny",
      "lines": [
        "import lists",
        "import bags",
        "",
        "def atomic_load(p) returns current:",
        "    atomically current = !p",
        "",
        "def atomic_store(p, v):",
        "    atomically !p = v",
        "",
        "def tas(lk) returns oldvalue:",
        "    atomically:",
        "        oldvalue = !lk",
        "        !lk = True",
        "",
        "def cas(p, old, new) returns success:",
        "    atomically:",
        "        success = !p == old",
        "        if success:",
        "            !p = new",
        "",
        "def BinSema(initial) returns sema:",
        "    assert initial in { False, True }",
        "    sema = initial",
        "",
        "def Lock() returns result:",
        "    result = False",
        "",
        "def acquired(lock) returns result:",
        "    result = !lock",
        "    ",
        "def held(lock) returns result:",
        "    result = !lock",
        "",
        "def acquire(lock):",
        "    atomically when not !lock:",
        "        !lock = True",
        "",
        "def release(lock):",
        "    atomically:",
        "        assert !lock, \"release(): lock not owned\"",
        "        !lock = False",
        "",
        "def Condition() returns result:",
        "    result = bags.empty()",
        "",
        "def wait(c, lk):",
        "    var cnt = 0",
        "    let (), ctx = save():",
        "        atomically:",
        "            cnt = bags.multiplicity(!c, ctx)",
        "            !c = bags.add(!c, ctx)",
        "            !lk = False",
        "        atomically when (not !lk) and bags.multiplicity(!c, ctx) <= cnt:",
        "            !lk = True",
        "",
        "def notify(c):",
        "    atomically if !c != bags.empty():",
        "        !c = bags.remove(!c, bags.bchoose(!c))",
        "",
        "def notify_all(c):",
        "    atomically !c = bags.empty()",
        "",
        "# Deprecated",
        "def notifyAll(c):",
        "    atomically !c = bags.empty()",
        "",
        "def Semaphore(cnt) returns result:",
        "    result = cnt",
        "",
        "def P(sema):",
        "    atomically when !sema > 0:",
        "        !sema -= 1",
        "",
        "def V(sema):",
        "    atomically !sema += 1",
        "    ",
        "def Queue() returns result:",
        "    result = []",
        "",
        "def get(q) returns result:",
        "    atomically when !q != []:",
        "        result = lists.head(!q)",
        "        !q = lists.tail(!q)",
        "",
        "def put(q, item):",
        "    atomically !q = lists.append(!q, item)"
      ],
      "identifiers": {
        "lists": "module",
        "bags": "module",
        "p": "local-const",
        "v": "local-const",
        "lk": "local-const",
        "old": "local-const",
        "new": "local-const",
        "initial": "local-const",
        "lock": "local-const",
        "c": "local-const",
        "cnt": "local-const",
        "ctx": "local-const",
        "sema": "local-const",
        "q": "local-const",
        "item": "local-const",
        "this": "local-var",
        "atomic_load": "constant",
        "atomic_store": "constant",
        "tas": "constant",
        "cas": "constant",
        "BinSema": "constant",
        "Lock": "constant",
        "acquired": "constant",
        "held": "constant",
        "acquire": "constant",
        "release": "constant",
        "Condition": "constant",
        "wait": "constant",
        "notify": "constant",
        "notify_all": "constant",
        "notifyAll": "constant",
        "Semaphore": "constant",
        "P": "constant",
        "V": "constant",
        "Queue": "constant",
        "get": "constant",
        "put": "constant",
        "___": "___"
      }
    },
    "alloc": {
      "file": "/Users/stutigupta/.local/lib/python3.12/site-packages/harmony_model_checker/modules/alloc.hny",
      "lines": [
        "pool = {:}",
        "next = 0",
        "",
        "# builtin malloc \"alloc$malloc\"",
        "# TODO.  builtin malloc temporarily disabled",
        "def malloc(v) returns copy:",
        "    atomically:",
        "        pool[next] = v",
        "        copy = ?pool[next]",
        "        next += 1",
        "",
        "# Commented out code tests for bad frees, but can lead to data races",
        "def free(r):",
        "    atomically:",
        "       # let poolcopy = pool:",
        "            del !r",
        "       #    assert poolcopy != pool, .bad_free",
        "",
        "def leak_check():",
        "    assert pool == {:}, .alloc_leak"
      ],
      "identifiers": {
        "v": "local-const",
        "r": "local-const",
        "this": "local-var",
        "malloc": "constant",
        "free": "constant",
        "leak_check": "constant",
        "pool": "global",
        "next": "global",
        "___": "___"
      }
    },
    "disque": {
      "file": "disque_impl.hny",
      "lines": [
        "from synch import Lock, acquire, release",
        "from alloc import malloc, free",
        "",
        "def Disque() returns d:",
        "  d = {.current: None, .lock: Lock()}",
        "",
        "def insert(d, v):",
        "  let node = malloc({.value: v, .next: None, .prev: None}):",
        "    acquire(?d -> lock)",
        "",
        "    if d->current == None:",
        "      node -> next = node",
        "      node -> prev = node",
        "      d->current = node",
        "    else:",
        "      node -> prev = d -> current -> prev",
        "      node -> next = d -> current",
        "      d -> current -> prev -> next = node",
        "      d -> current -> prev = node",
        "",
        "    release(?d -> lock)",
        "",
        "def delete(d) returns returnVal:",
        "    acquire(?d -> lock)",
        "    returnVal = None",
        "",
        "    if d->current != None: ",
        "      returnVal = d -> current -> value",
        "      if d->current->next == d->current: ",
        "          d->current->next = None",
        "          d->current->prev = None",
        "          d->current=None",
        "      else: ",
        "          currNext = d -> current -> next",
        "          currPrev = d -> current -> prev",
        "          currPrev -> next = currNext",
        "          currNext -> prev = currPrev",
        "          d -> current = currNext",
        "",
        "    release(?d -> lock)",
        "  ",
        "",
        "def next(d) returns returnVal:",
        "    acquire(?d -> lock)",
        "    returnVal = None",
        "",
        "    if d -> current != None: ",
        "      returnVal = d -> current -> value",
        "      d-> current = d->current-> next",
        "",
        "    release(?d -> lock)"
      ],
      "identifiers": {
        "synch": "module",
        "Lock": "imported",
        "acquire": "imported",
        "release": "imported",
        "alloc": "module",
        "malloc": "imported",
        "free": "imported",
        "d": "local-const",
        "v": "local-const",
        "node": "local-const",
        "this": "local-var",
        "Disque": "constant",
        "insert": "constant",
        "delete": "constant",
        "next": "constant",
        "___": "___"
      }
    },
    "__main__": {
      "file": "disque_btest.hny",
      "lines": [
        "import disque",
        "",
        "const N_INSERT = 1",
        "const N_DELETE = 1",
        "const N_NEXT = 1",
        "",
        "d = disque.Disque()",
        "",
        "def insert_test(self):",
        "    print(\"Testing insert\", self)",
        "    disque.insert(?d, self)",
        "    print(\"Done inserting\", self)",
        "",
        "def delete_test(self):",
        "    print(\"Testing delete\", self)",
        "    let v = disque.delete(?d):",
        "        print(\"Done deleting\", self, v)",
        "",
        "def next_test(self):",
        "    print(\"Testing next\", self)",
        "    let v = disque.next(?d):",
        "        print(\"Done next\", self, v)",
        "",
        "for i in {1..N_INSERT}:",
        "    spawn insert_test(i)",
        "# for i in {1..N_DELETE}:",
        "#     spawn delete_test(i)",
        "# for i in {1..N_NEXT}:",
        "#     spawn next_test(i)"
      ],
      "identifiers": {
        "disque": "module",
        "N_INSERT": "constant",
        "N_DELETE": "constant",
        "N_NEXT": "constant",
        "self": "local-const",
        "v": "local-const",
        "i": "local-const",
        "this": "local-var",
        "insert_test": "constant",
        "delete_test": "constant",
        "next_test": "constant",
        "d": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "subseq", "args": "(s, b, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "b" },
    { "op": "DelVar", "value": "b" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "x" },
    { "op": "JumpCond", "pc": "26", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "Jump", "pc": "14" },
    { "op": "DelVar", "value": "s" },
    { "op": "DelVar", "value": "x" },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "append", "args": "(s, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "head", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "tail", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "DelVar" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "values", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu52" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "_", "value": "v" },
    { "op": "DelVar", "value": "_" },
    { "op": "JumpCond", "pc": "83", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu52" },
    { "op": "DelVar", "value": "$accu52" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu52" },
    { "op": "Jump", "pc": "73" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu52" },
    { "op": "DelVar", "value": "$accu52" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "items", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu68" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "k", "value": "v" },
    { "op": "JumpCond", "pc": "110", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu68" },
    { "op": "DelVar", "value": "$accu68" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "k" },
    { "op": "DelVar", "value": "k" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu68" },
    { "op": "Jump", "pc": "96" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu68" },
    { "op": "DelVar", "value": "$accu68" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "qsort", "args": "a" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "126", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "sorted_list" },
    { "op": "Jump", "pc": "192" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "a" },
    { "op": "Apply", "value": { "type": "pc", "value": "45" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Apply", "value": { "type": "pc", "value": "55" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "(pivot, rest)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu103" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "153", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "139", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu103" },
    { "op": "DelVar", "value": "$accu103" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu103" },
    { "op": "Jump", "pc": "139" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu103" },
    { "op": "DelVar", "value": "$accu103" },
    { "op": "StoreVar", "value": "lower" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu120" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "DelVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "176", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": ">=" },
    { "op": "JumpCond", "pc": "162", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu120" },
    { "op": "DelVar", "value": "$accu120" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu120" },
    { "op": "Jump", "pc": "162" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu120" },
    { "op": "DelVar", "value": "$accu120" },
    { "op": "StoreVar", "value": "higher" },
    { "op": "LoadVar", "value": "lower" },
    { "op": "DelVar", "value": "lower" },
    { "op": "Apply", "value": { "type": "pc", "value": "117" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "DelVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "higher" },
    { "op": "DelVar", "value": "higher" },
    { "op": "Apply", "value": { "type": "pc", "value": "117" } },
    { "op": "Nary", "arity": 3, "value": "+" },
    { "op": "StoreVar", "value": "sorted_list" },
    { "op": "Return", "result": "sorted_list" },
    { "op": "DelVar", "value": "sorted_list" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "index", "args": "(d, e)" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "211", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "198" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "e" },
    { "op": "Return", "result": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "startswith", "args": "(d, prefix)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "JumpCond", "pc": "257", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu172" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "250", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu172" },
    { "op": "DelVar", "value": "$accu172" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu172" },
    { "op": "Jump", "pc": "233" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "prefix" },
    { "op": "LoadVar", "value": "$accu172" },
    { "op": "DelVar", "value": "$accu172" },
    { "op": "Nary", "arity": 1, "value": "all" },
    { "op": "Jump", "pc": "260" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "prefix" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "foldl", "args": "(d, f, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "285", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "f" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "result" },
    { "op": "DelVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "271" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "foldr", "args": "(d, f, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "301", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "f" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Jump", "pc": "323" },
    { "op": "LoadVar", "value": "f" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Apply", "value": { "type": "pc", "value": "55" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "f" },
    { "op": "DelVar", "value": "f" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "289" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "reduce", "args": "(f, d, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "f" },
    { "op": "DelVar", "value": "f" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "263" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "permuted", "args": "s" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "perm" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "StoreVar", "value": "c" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "371", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "e" },
    { "op": "LoadVar", "value": "perm" },
    { "op": "DelVar", "value": "perm" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "perm" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar", "value": "c" },
    { "op": "Jump", "pc": "348" },
    { "op": "DelVar", "value": "c" },
    { "op": "Return", "result": "perm" },
    { "op": "DelVar", "value": "perm" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "filter", "args": "(cond, s)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu292" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "e" },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "396", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "cond" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "381", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu292" },
    { "op": "DelVar", "value": "$accu292" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu292" },
    { "op": "Jump", "pc": "381" },
    { "op": "DelVar", "value": "cond" },
    { "op": "DelVar", "value": "e" },
    { "op": "LoadVar", "value": "$accu292" },
    { "op": "DelVar", "value": "$accu292" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "map", "args": "(f, s)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu313" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "422", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu313" },
    { "op": "DelVar", "value": "$accu313" },
    { "op": "LoadVar", "value": "f" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu313" },
    { "op": "Jump", "pc": "410" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "LoadVar", "value": "$accu313" },
    { "op": "DelVar", "value": "$accu313" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "empty", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "bg" },
    { "op": "Return", "result": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "fromSet", "args": "s" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "$accu337" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "elt" },
    { "op": "JumpCond", "pc": "452", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu337" },
    { "op": "DelVar", "value": "$accu337" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "$accu337" },
    { "op": "Jump", "pc": "442" },
    { "op": "DelVar", "value": "elt" },
    { "op": "LoadVar", "value": "$accu337" },
    { "op": "DelVar", "value": "$accu337" },
    { "op": "StoreVar", "value": "bg" },
    { "op": "Return", "result": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Jump", "pc": "491" },
    { "op": "Frame", "name": "fromList", "args": "a" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "StoreVar", "value": "bg" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "488", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "481", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "bg" }] } },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "465" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "bg" }] } },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "465" },
    { "op": "DelVar", "value": "v" },
    { "op": "Return", "result": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Push", "value": { "type": "pc", "value": "494" } },
    { "op": "Builtin", "value": "bag$multiplicity" },
    { "op": "Jump", "pc": "513" },
    { "op": "Frame", "name": "multiplicity", "args": "(bg, elt)" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "507", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Jump", "pc": "511" },
    { "op": "DelVar", "value": "bg" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "count" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Push", "value": { "type": "pc", "value": "516" } },
    { "op": "Builtin", "value": "bag$size" },
    { "op": "Jump", "pc": "535" },
    { "op": "Frame", "name": "size", "args": "bg" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "count" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "_", "value": "c" },
    { "op": "DelVar", "value": "_" },
    { "op": "JumpCond", "pc": "532", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Jump", "pc": "522" },
    { "op": "DelVar", "value": "c" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Push", "value": { "type": "pc", "value": "538" } },
    { "op": "Builtin", "value": "bag$bmin" },
    { "op": "Jump", "pc": "554" },
    { "op": "Frame", "name": "bmin", "args": "bg" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 1, "value": "min" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Push", "value": { "type": "pc", "value": "557" } },
    { "op": "Builtin", "value": "bag$bmax" },
    { "op": "Jump", "pc": "582" },
    { "op": "Frame", "name": "bmax", "args": "bg" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Nary", "arity": 1, "value": "max" },
    { "op": "StoreVar", "value": "count" },
    { "op": "Return", "result": "count" },
    { "op": "DelVar", "value": "count" },
    { "op": "Jump", "pc": "582" },
    { "op": "Frame", "name": "bchoose", "args": "bg" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 1, "value": "keys" },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "elt" },
    { "op": "Return", "result": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Push", "value": { "type": "pc", "value": "585" } },
    { "op": "Builtin", "value": "bag$add" },
    { "op": "Jump", "pc": "611" },
    { "op": "Frame", "name": "add", "args": "(bg, elt)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "604", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar" },
    { "op": "Jump", "pc": "610" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "StoreVar" },
    { "op": "Return", "result": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "614" } },
    { "op": "Builtin", "value": "bag$remove" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "remove", "args": "(bg, elt)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "LoadVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "JumpCond", "pc": "654", "cond": { "type": "bool", "value": "False" } },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar" },
    { "op": "LoadVar", "value": "result" },
    { "op": "LoadVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "654", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "LoadVar", "value": "elt" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "DelVar" },
    { "op": "DelVar", "value": "elt" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "combinations", "args": "(bg, k)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "k" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "670", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "bg" },
    { "op": "DelVar", "value": "k" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "745" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Apply", "value": { "type": "pc", "value": "516" } },
    { "op": "StoreVar", "value": "n" },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "683", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "bg" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "n" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "745" },
    { "op": "LoadVar", "value": "k" },
    { "op": "LoadVar", "value": "n" },
    { "op": "DelVar", "value": "n" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "695", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "k" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "745" },
    { "op": "LoadVar", "value": "bg" },
    { "op": "Apply", "value": { "type": "pc", "value": "538" } },
    { "op": "StoreVar", "value": "hd" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "bg" },
    { "op": "DelVar", "value": "bg" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "hd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "614" } },
    { "op": "StoreVar", "value": "tl" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "StoreVar", "value": "$accu560" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "tl" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "k" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "657" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "x" },
    { "op": "JumpCond", "pc": "731", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu560" },
    { "op": "DelVar", "value": "$accu560" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "hd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "585" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "StoreVar", "value": "$accu560" },
    { "op": "Jump", "pc": "717" },
    { "op": "DelVar", "value": "hd" },
    { "op": "DelVar", "value": "x" },
    { "op": "LoadVar", "value": "$accu560" },
    { "op": "DelVar", "value": "$accu560" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "tl" },
    { "op": "DelVar", "value": "tl" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "k" },
    { "op": "DelVar", "value": "k" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "657" } },
    { "op": "Nary", "arity": 2, "value": "|" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "atomic_load", "args": "p" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "current" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "current" },
    { "op": "DelVar", "value": "current" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "atomic_store", "args": "(p, v)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "tas", "args": "lk" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "oldvalue" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "DelVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "oldvalue" },
    { "op": "DelVar", "value": "oldvalue" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "cas", "args": "(p, old, new)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "p" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "old" },
    { "op": "DelVar", "value": "old" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "StoreVar", "value": "success" },
    { "op": "LoadVar", "value": "success" },
    { "op": "JumpCond", "pc": "795", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "LoadVar", "value": "new" },
    { "op": "DelVar", "value": "new" },
    { "op": "Store" },
    { "op": "DelVar", "value": "new" },
    { "op": "DelVar", "value": "p" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "success" },
    { "op": "DelVar", "value": "success" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "BinSema", "args": "initial" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "initial" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "initial" },
    { "op": "DelVar", "value": "initial" },
    { "op": "StoreVar", "value": "sema" },
    { "op": "Return", "result": "sema" },
    { "op": "DelVar", "value": "sema" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "Lock", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "acquired", "args": "lock" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "held", "args": "lock" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "acquire", "args": "lock" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "850", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "853" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "843" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "release", "args": "lock" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "release(): lock not owned" } },
    { "op": "Assert2" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "Condition", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "pc", "value": "430" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "wait", "args": "(c, lk)" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "cnt" },
    { "op": "DelVar", "value": "cnt" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Save" },
    { "op": "Continue" },
    { "op": "StoreVar", "value": "((), ctx)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Push", "value": { "type": "pc", "value": "494" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "cnt" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "pc", "value": "585" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "939", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "pc", "value": "494" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "ctx" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "cnt" },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "Jump", "pc": "940" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "JumpCond", "pc": "945", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "c" },
    { "op": "DelVar", "value": "cnt" },
    { "op": "DelVar", "value": "ctx" },
    { "op": "Jump", "pc": "948" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "921" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "lk" },
    { "op": "DelVar", "value": "lk" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "notify", "args": "c" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "pc", "value": "430" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "982", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "pc", "value": "614" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "pc", "value": "574" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "DelVar", "value": "c" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "notify_all", "args": "c" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Push", "value": { "type": "pc", "value": "430" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "notifyAll", "args": "c" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Push", "value": { "type": "pc", "value": "430" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "Semaphore", "args": "cnt" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "cnt" },
    { "op": "DelVar", "value": "cnt" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "P", "args": "sema" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "1026", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "1029" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "1018" },
    { "op": "ReadonlyDec" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "DelVar", "value": "sema" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "V", "args": "sema" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "sema" },
    { "op": "DelVar", "value": "sema" },
    { "op": "Dup" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "Queue", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "get", "args": "q" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "DelVar", "value": "result" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1068", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "1071" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Jump", "pc": "1059" },
    { "op": "ReadonlyDec" },
    { "op": "Push", "value": { "type": "pc", "value": "45" } },
    { "op": "LoadVar", "value": "q" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Push", "value": { "type": "pc", "value": "55" } },
    { "op": "LoadVar", "value": "q" },
    { "op": "DelVar", "value": "q" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "1106" },
    { "op": "Frame", "name": "put", "args": "(q, item)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "q" },
    { "op": "Push", "value": { "type": "pc", "value": "33" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "q" },
    { "op": "DelVar", "value": "q" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "item" },
    { "op": "DelVar", "value": "item" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "alloc$pool"}] },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "alloc$next"}] },
    { "op": "Jump", "pc": "1396" },
    { "op": "Frame", "name": "malloc", "args": "v" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }] } },
    { "op": "Load", "value": [{ "type": "atom", "value": "alloc$next"}] },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "alloc$pool" }] } },
    { "op": "Load", "value": [{ "type": "atom", "value": "alloc$next"}] },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "StoreVar", "value": "copy" },
    { "op": "Load", "value": [{ "type": "atom", "value": "alloc$next"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "alloc$next"}] },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "copy" },
    { "op": "DelVar", "value": "copy" },
    { "op": "Jump", "pc": "1396" },
    { "op": "Frame", "name": "free", "args": "r" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "r" },
    { "op": "DelVar", "value": "r" },
    { "op": "Del" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1396" },
    { "op": "Frame", "name": "leak_check", "args": "()" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "Load", "value": [{ "type": "atom", "value": "alloc$pool"}] },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Push", "value": { "type": "atom", "value": "alloc_leak" } },
    { "op": "Assert2" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1396" },
    { "op": "Frame", "name": "Disque", "args": "()" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Apply", "value": { "type": "pc", "value": "820" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "d" },
    { "op": "Return", "result": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Jump", "pc": "1396" },
    { "op": "Frame", "name": "insert", "args": "(d, v)" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "value" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "1111" } },
    { "op": "StoreVar", "value": "node" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "842" } },
    { "op": "Pop" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1207", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "node" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "node" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "node" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "node" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "node" },
    { "op": "DelVar", "value": "node" },
    { "op": "Store" },
    { "op": "Jump", "pc": "1246" },
    { "op": "LoadVar", "value": "node" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "node" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "node" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "node" },
    { "op": "DelVar", "value": "node" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "861" } },
    { "op": "Pop" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1396" },
    { "op": "Frame", "name": "delete", "args": "d" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "842" } },
    { "op": "Pop" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "StoreVar", "value": "returnVal" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1344", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "returnVal" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "value" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "returnVal" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "1313", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "1344" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Store", "value": [{ "type": "atom", "value": "disque$currNext"}] },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Store", "value": [{ "type": "atom", "value": "disque$currPrev"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "disque$currPrev"}] },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load", "value": [{ "type": "atom", "value": "disque$currNext"}] },
    { "op": "Store" },
    { "op": "Load", "value": [{ "type": "atom", "value": "disque$currNext"}] },
    { "op": "Push", "value": { "type": "atom", "value": "prev" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load", "value": [{ "type": "atom", "value": "disque$currPrev"}] },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load", "value": [{ "type": "atom", "value": "disque$currNext"}] },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "861" } },
    { "op": "Pop" },
    { "op": "Return", "result": "returnVal" },
    { "op": "DelVar", "value": "returnVal" },
    { "op": "Jump", "pc": "1396" },
    { "op": "Frame", "name": "next", "args": "d" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "842" } },
    { "op": "Pop" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "StoreVar", "value": "returnVal" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "1388", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "returnVal" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "value" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "returnVal" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "current" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Push", "value": { "type": "atom", "value": "next" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Store" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "atom", "value": "lock" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Apply", "value": { "type": "pc", "value": "861" } },
    { "op": "Pop" },
    { "op": "Return", "result": "returnVal" },
    { "op": "DelVar", "value": "returnVal" },
    { "op": "Push", "value": { "type": "pc", "value": "1151" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Store", "value": [{ "type": "atom", "value": "d"}] },
    { "op": "Jump", "pc": "1474" },
    { "op": "Frame", "name": "insert_test", "args": "self" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Testing insert" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "pc", "value": "1164" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }] } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Pop" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Done inserting" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "DelVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1474" },
    { "op": "Frame", "name": "delete_test", "args": "self" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Testing delete" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "pc", "value": "1254" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "v" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Done deleting" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "DelVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "1474" },
    { "op": "Frame", "name": "next_test", "args": "self" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Testing next" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "pc", "value": "1353" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }] } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "v" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "Done next" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "self" },
    { "op": "DelVar", "value": "self" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Print" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "1487", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "1402" }, "args": [] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "1478" },
    { "op": "DelVar", "value": "i" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame subseq(s, b, e)","start of method subseq"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu3","initialize accumulator for list comprehension: pop a value and store in $accu3"],
    ["LoadVar b","push the value of b"],
    ["DelVar b","delete method variable b"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(x)","get next element and assign to x; push False or True depending on success"],
    ["JumpCond False 26","check if loop is done: pop a value and jump to 26 if the value is False"],
    ["LoadVar $accu3","load accumulator: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["LoadVar s","push the value of s"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu3","update accumulator: pop a value and store in $accu3"],
    ["Jump 14","set program counter to 14"],
    ["DelVar s","delete method variable s"],
    ["DelVar x","delete method variable x"],
    ["LoadVar $accu3","load final accumulator result: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame append(s, e)","start of method append"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame head(s)","start of method head"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame tail(s)","start of method tail"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["StoreVar result","pop a value and store in result"],
    ["Push ?result","push constant ?result"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["DelVar [result]","pop an address of a method variable and delete that variable"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame values(d)","start of method values"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu52","initialize accumulator for list comprehension: pop a value and store in $accu52"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(_, v)","get next element and assign to _:v; push False or True depending on success"],
    ["DelVar _","delete method variable _"],
    ["JumpCond False 83","check if loop is done: pop a value and jump to 83 if the value is False"],
    ["LoadVar $accu52","load accumulator: push the value of $accu52"],
    ["DelVar $accu52","delete method variable $accu52"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu52","update accumulator: pop a value and store in $accu52"],
    ["Jump 73","set program counter to 73"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu52","load final accumulator result: push the value of $accu52"],
    ["DelVar $accu52","delete method variable $accu52"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame items(d)","start of method items"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu68","initialize accumulator for list comprehension: pop a value and store in $accu68"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(k, v)","get next element and assign to k:v; push False or True depending on success"],
    ["JumpCond False 110","check if loop is done: pop a value and jump to 110 if the value is False"],
    ["LoadVar $accu68","load accumulator: push the value of $accu68"],
    ["DelVar $accu68","delete method variable $accu68"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar k","push the value of k"],
    ["DelVar k","delete method variable k"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu68","update accumulator: pop a value and store in $accu68"],
    ["Jump 96","set program counter to 96"],
    ["DelVar k","delete method variable k"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu68","load final accumulator result: push the value of $accu68"],
    ["DelVar $accu68","delete method variable $accu68"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame qsort(a)","start of method qsort"],
    ["LoadVar a","push the value of a"],
    ["Push ()","push constant ()"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 126","pop a value and jump to 126 if the value is False"],
    ["DelVar a","delete method variable a"],
    ["Push ()","push constant ()"],
    ["StoreVar sorted_list","pop a value and store in sorted_list"],
    ["Jump 192","set program counter to 192"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar a","push the value of a"],
    ["Apply PC(45)","call method PC(45)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Apply PC(55)","call method PC(55)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar (pivot, rest)","pop a value and store in (pivot, rest)"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu103","initialize accumulator for list comprehension: pop a value and store in $accu103"],
    ["LoadVar rest","push the value of rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 153","check if loop is done: pop a value and jump to 153 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 139","pop a value and jump to 139 if the value is False"],
    ["LoadVar $accu103","load accumulator: push the value of $accu103"],
    ["DelVar $accu103","delete method variable $accu103"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu103","update accumulator: pop a value and store in $accu103"],
    ["Jump 139","set program counter to 139"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu103","load final accumulator result: push the value of $accu103"],
    ["DelVar $accu103","delete method variable $accu103"],
    ["StoreVar lower","pop a value and store in lower"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu120","initialize accumulator for list comprehension: pop a value and store in $accu120"],
    ["LoadVar rest","push the value of rest"],
    ["DelVar rest","delete method variable rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 176","check if loop is done: pop a value and jump to 176 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary >=","pop 2 values and push the result of applying >="],
    ["JumpCond False 162","pop a value and jump to 162 if the value is False"],
    ["LoadVar $accu120","load accumulator: push the value of $accu120"],
    ["DelVar $accu120","delete method variable $accu120"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu120","update accumulator: pop a value and store in $accu120"],
    ["Jump 162","set program counter to 162"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu120","load final accumulator result: push the value of $accu120"],
    ["DelVar $accu120","delete method variable $accu120"],
    ["StoreVar higher","pop a value and store in higher"],
    ["LoadVar lower","push the value of lower"],
    ["DelVar lower","delete method variable lower"],
    ["Apply PC(117)","call method PC(117)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar pivot","push the value of pivot"],
    ["DelVar pivot","delete method variable pivot"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar higher","push the value of higher"],
    ["DelVar higher","delete method variable higher"],
    ["Apply PC(117)","call method PC(117)"],
    ["3-ary +","pop 3 values and push the result of applying +"],
    ["StoreVar sorted_list","pop a value and store in sorted_list"],
    ["ReturnOp(sorted_list)","restore caller method state and push sorted_list"],
    ["DelVar sorted_list","delete method variable sorted_list"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame index(d, e)","start of method index"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["LoadVar d","push the value of d"],
    ["LoadVar i","push the value of i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar e","push the value of e"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 211","pop a value and jump to 211 if the value is False"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 198","set program counter to 198"],
    ["DelVar d","delete method variable d"],
    ["DelVar e","delete method variable e"],
    ["ReturnOp(i)","restore caller method state and push i"],
    ["DelVar i","delete method variable i"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame startswith(d, prefix)","start of method startswith"],
    ["DelVar result","delete method variable result"],
    ["LoadVar prefix","push the value of prefix"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["JumpCond False 257","pop a value and jump to 257 if the value is False"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu172","initialize accumulator for list comprehension: pop a value and store in $accu172"],
    ["Push 0","push constant 0"],
    ["LoadVar prefix","push the value of prefix"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 250","check if loop is done: pop a value and jump to 250 if the value is False"],
    ["LoadVar $accu172","load accumulator: push the value of $accu172"],
    ["DelVar $accu172","delete method variable $accu172"],
    ["LoadVar d","push the value of d"],
    ["LoadVar i","push the value of i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar prefix","push the value of prefix"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu172","update accumulator: pop a value and store in $accu172"],
    ["Jump 233","set program counter to 233"],
    ["DelVar d","delete method variable d"],
    ["DelVar i","delete method variable i"],
    ["DelVar prefix","delete method variable prefix"],
    ["LoadVar $accu172","load final accumulator result: push the value of $accu172"],
    ["DelVar $accu172","delete method variable $accu172"],
    ["1-ary all","pop 1 value and push the result of applying all"],
    ["Jump 260","set program counter to 260"],
    ["DelVar d","delete method variable d"],
    ["DelVar prefix","delete method variable prefix"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame foldl(d, f, z)","start of method foldl"],
    ["DelVar result","delete method variable result"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 285","check if loop is done: pop a value and jump to 285 if the value is False"],
    ["LoadVar f","push the value of f"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar result","push the value of result"],
    ["DelVar result","delete method variable result"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 271","set program counter to 271"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame foldr(d, f, z)","start of method foldr"],
    ["DelVar result","delete method variable result"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 301","pop a value and jump to 301 if the value is False"],
    ["DelVar d","delete method variable d"],
    ["DelVar f","delete method variable f"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["Jump 323","set program counter to 323"],
    ["LoadVar f","push the value of f"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["Push 0","push constant 0"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Apply PC(55)","call method PC(55)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar f","push the value of f"],
    ["DelVar f","delete method variable f"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(289)","call method PC(289)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame reduce(f, d, z)","start of method reduce"],
    ["DelVar result","delete method variable result"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar f","push the value of f"],
    ["DelVar f","delete method variable f"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(263)","call method PC(263)"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame permuted(s)","start of method permuted"],
    ["Push ()","push constant ()"],
    ["StoreVar perm","pop a value and store in perm"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["StoreVar c","pop a value and store in c"],
    ["LoadVar c","push the value of c"],
    ["Push {}","push constant {}"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 371","pop a value and jump to 371 if the value is False"],
    ["LoadVar c","push the value of c"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar e","pop a value and store in e"],
    ["LoadVar perm","push the value of perm"],
    ["DelVar perm","delete method variable perm"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar perm","pop a value and store in perm"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Push {}","push constant {}"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar c","pop a value and store in c"],
    ["Jump 348","set program counter to 348"],
    ["DelVar c","delete method variable c"],
    ["ReturnOp(perm)","restore caller method state and push perm"],
    ["DelVar perm","delete method variable perm"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame filter(cond, s)","start of method filter"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu292","initialize accumulator for list comprehension: pop a value and store in $accu292"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["DelVar e","delete method variable e"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 396","check if loop is done: pop a value and jump to 396 if the value is False"],
    ["LoadVar cond","push the value of cond"],
    ["LoadVar e","push the value of e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 381","pop a value and jump to 381 if the value is False"],
    ["LoadVar $accu292","load accumulator: push the value of $accu292"],
    ["DelVar $accu292","delete method variable $accu292"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu292","update accumulator: pop a value and store in $accu292"],
    ["Jump 381","set program counter to 381"],
    ["DelVar cond","delete method variable cond"],
    ["DelVar e","delete method variable e"],
    ["LoadVar $accu292","load final accumulator result: push the value of $accu292"],
    ["DelVar $accu292","delete method variable $accu292"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame map(f, s)","start of method map"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu313","initialize accumulator for list comprehension: pop a value and store in $accu313"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 422","check if loop is done: pop a value and jump to 422 if the value is False"],
    ["LoadVar $accu313","load accumulator: push the value of $accu313"],
    ["DelVar $accu313","delete method variable $accu313"],
    ["LoadVar f","push the value of f"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu313","update accumulator: pop a value and store in $accu313"],
    ["Jump 410","set program counter to 410"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["LoadVar $accu313","load final accumulator result: push the value of $accu313"],
    ["DelVar $accu313","delete method variable $accu313"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame empty()","start of method empty"],
    ["Push {:}","push constant {:}"],
    ["StoreVar bg","pop a value and store in bg"],
    ["ReturnOp(bg)","restore caller method state and push bg"],
    ["DelVar bg","delete method variable bg"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame fromSet(s)","start of method fromSet"],
    ["Push {:}","initialize accumulator for dict comprehension: push constant {:}"],
    ["StoreVar $accu337","initialize accumulator for dict comprehension: pop a value and store in $accu337"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Cut(elt)","get next element and assign to elt; push False or True depending on success"],
    ["JumpCond False 452","check if loop is done: pop a value and jump to 452 if the value is False"],
    ["LoadVar $accu337","load accumulator: push the value of $accu337"],
    ["DelVar $accu337","delete method variable $accu337"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["Push 1","push constant 1"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar $accu337","update accumulator: pop a value and store in $accu337"],
    ["Jump 442","set program counter to 442"],
    ["DelVar elt","delete method variable elt"],
    ["LoadVar $accu337","load final accumulator result: push the value of $accu337"],
    ["DelVar $accu337","delete method variable $accu337"],
    ["StoreVar bg","pop a value and store in bg"],
    ["ReturnOp(bg)","restore caller method state and push bg"],
    ["DelVar bg","delete method variable bg"],
    ["Jump 491","jump over method definition: set program counter to 491"],
    ["Frame fromList(a)","start of method fromList"],
    ["Push {:}","push constant {:}"],
    ["StoreVar bg","pop a value and store in bg"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Push 0","push constant 0"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 488","check if loop is done: pop a value and jump to 488 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 481","pop a value and jump to 481 if the value is False"],
    ["Push ?bg","push constant ?bg"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar [bg]","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 465","set program counter to 465"],
    ["Push ?bg","push constant ?bg"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push 1","push constant 1"],
    ["StoreVar [bg]","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 465","set program counter to 465"],
    ["DelVar v","delete method variable v"],
    ["ReturnOp(bg)","restore caller method state and push bg"],
    ["DelVar bg","delete method variable bg"],
    ["Push PC(494)","push constant PC(494)"],
    ["Builtin(bag$multiplicity)","top of stack is a built-in operation called bag$multiplicity"],
    ["Jump 513","jump over method definition: set program counter to 513"],
    ["Frame multiplicity(bg, elt)","start of method multiplicity"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar bg","push the value of bg"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 507","pop a value and jump to 507 if the value is False"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar count","pop a value and store in count"],
    ["Jump 511","set program counter to 511"],
    ["DelVar bg","delete method variable bg"],
    ["DelVar elt","delete method variable elt"],
    ["Push 0","push constant 0"],
    ["StoreVar count","pop a value and store in count"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Push PC(516)","push constant PC(516)"],
    ["Builtin(bag$size)","top of stack is a built-in operation called bag$size"],
    ["Jump 535","jump over method definition: set program counter to 535"],
    ["Frame size(bg)","start of method size"],
    ["Push 0","push constant 0"],
    ["StoreVar count","pop a value and store in count"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["Push 0","push constant 0"],
    ["Cut(_, c)","get next element and assign to _:c; push False or True depending on success"],
    ["DelVar _","delete method variable _"],
    ["JumpCond False 532","check if loop is done: pop a value and jump to 532 if the value is False"],
    ["LoadVar count","push the value of count"],
    ["DelVar count","delete method variable count"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar count","pop a value and store in count"],
    ["Jump 522","set program counter to 522"],
    ["DelVar c","delete method variable c"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Push PC(538)","push constant PC(538)"],
    ["Builtin(bag$bmin)","top of stack is a built-in operation called bag$bmin"],
    ["Jump 554","jump over method definition: set program counter to 554"],
    ["Frame bmin(bg)","start of method bmin"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar bg","push the value of bg"],
    ["Push {:}","push constant {:}"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["1-ary min","pop 1 value and push the result of applying min"],
    ["StoreVar count","pop a value and store in count"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Push PC(557)","push constant PC(557)"],
    ["Builtin(bag$bmax)","top of stack is a built-in operation called bag$bmax"],
    ["Jump 582","jump over method definition: set program counter to 582"],
    ["Frame bmax(bg)","start of method bmax"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar bg","push the value of bg"],
    ["Push {:}","push constant {:}"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["1-ary max","pop 1 value and push the result of applying max"],
    ["StoreVar count","pop a value and store in count"],
    ["ReturnOp(count)","restore caller method state and push count"],
    ["DelVar count","delete method variable count"],
    ["Jump 582","jump over method definition: set program counter to 582"],
    ["Frame bchoose(bg)","start of method bchoose"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["1-ary keys","pop 1 value and push the result of applying keys"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar elt","pop a value and store in elt"],
    ["ReturnOp(elt)","restore caller method state and push elt"],
    ["DelVar elt","delete method variable elt"],
    ["Push PC(585)","push constant PC(585)"],
    ["Builtin(bag$add)","top of stack is a built-in operation called bag$add"],
    ["Jump 611","jump over method definition: set program counter to 611"],
    ["Frame add(bg, elt)","start of method add"],
    ["DelVar result","delete method variable result"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 604","pop a value and jump to 604 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar [result]","pop a value and the address of a method variable and store the value at that address"],
    ["Jump 610","set program counter to 610"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push 1","push constant 1"],
    ["StoreVar [result]","pop a value and the address of a method variable and store the value at that address"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Push PC(614)","push constant PC(614)"],
    ["Builtin(bag$remove)","top of stack is a built-in operation called bag$remove"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame remove(bg, elt)","start of method remove"],
    ["DelVar result","delete method variable result"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar elt","push the value of elt"],
    ["LoadVar result","push the value of result"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["JumpCond False 654","pop a value and jump to 654 if the value is False"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar result","push the value of result"],
    ["LoadVar elt","push the value of elt"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar [result]","pop a value and the address of a method variable and store the value at that address"],
    ["LoadVar result","push the value of result"],
    ["LoadVar elt","push the value of elt"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 654","pop a value and jump to 654 if the value is False"],
    ["Push ?result","push constant ?result"],
    ["LoadVar elt","push the value of elt"],
    ["DelVar elt","delete method variable elt"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["DelVar [result]","pop an address of a method variable and delete that variable"],
    ["DelVar elt","delete method variable elt"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame combinations(bg, k)","start of method combinations"],
    ["DelVar result","delete method variable result"],
    ["LoadVar k","push the value of k"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 670","pop a value and jump to 670 if the value is False"],
    ["DelVar bg","delete method variable bg"],
    ["DelVar k","delete method variable k"],
    ["Push {}","push constant {}"],
    ["Push {:}","push constant {:}"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 745","set program counter to 745"],
    ["LoadVar bg","push the value of bg"],
    ["Apply PC(516)","call method PC(516)"],
    ["StoreVar n","pop a value and store in n"],
    ["LoadVar k","push the value of k"],
    ["LoadVar n","push the value of n"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 683","pop a value and jump to 683 if the value is False"],
    ["DelVar bg","delete method variable bg"],
    ["DelVar k","delete method variable k"],
    ["DelVar n","delete method variable n"],
    ["Push {}","push constant {}"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 745","set program counter to 745"],
    ["LoadVar k","push the value of k"],
    ["LoadVar n","push the value of n"],
    ["DelVar n","delete method variable n"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 695","pop a value and jump to 695 if the value is False"],
    ["DelVar k","delete method variable k"],
    ["Push {}","push constant {}"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 745","set program counter to 745"],
    ["LoadVar bg","push the value of bg"],
    ["Apply PC(538)","call method PC(538)"],
    ["StoreVar hd","pop a value and store in hd"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar bg","push the value of bg"],
    ["DelVar bg","delete method variable bg"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar hd","push the value of hd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(614)","call method PC(614)"],
    ["StoreVar tl","pop a value and store in tl"],
    ["Push {}","initialize accumulator for set comprehension: push constant {}"],
    ["StoreVar $accu560","initialize accumulator for set comprehension: pop a value and store in $accu560"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar tl","push the value of tl"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar k","push the value of k"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(657)","call method PC(657)"],
    ["Push 0","push constant 0"],
    ["Cut(x)","get next element and assign to x; push False or True depending on success"],
    ["JumpCond False 731","check if loop is done: pop a value and jump to 731 if the value is False"],
    ["LoadVar $accu560","load accumulator: push the value of $accu560"],
    ["DelVar $accu560","delete method variable $accu560"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar hd","push the value of hd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(585)","call method PC(585)"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["StoreVar $accu560","update accumulator: pop a value and store in $accu560"],
    ["Jump 717","set program counter to 717"],
    ["DelVar hd","delete method variable hd"],
    ["DelVar x","delete method variable x"],
    ["LoadVar $accu560","load final accumulator result: push the value of $accu560"],
    ["DelVar $accu560","delete method variable $accu560"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar tl","push the value of tl"],
    ["DelVar tl","delete method variable tl"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar k","push the value of k"],
    ["DelVar k","delete method variable k"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(657)","call method PC(657)"],
    ["2-ary |","pop 2 values and push the result of applying |"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame atomic_load(p)","start of method atomic_load"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar current","pop a value and store in current"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(current)","restore caller method state and push current"],
    ["DelVar current","delete method variable current"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame atomic_store(p, v)","start of method atomic_store"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame tas(lk)","start of method tas"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar lk","push the value of lk"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar oldvalue","pop a value and store in oldvalue"],
    ["LoadVar lk","push the value of lk"],
    ["DelVar lk","delete method variable lk"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(oldvalue)","restore caller method state and push oldvalue"],
    ["DelVar oldvalue","delete method variable oldvalue"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame cas(p, old, new)","start of method cas"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar old","push the value of old"],
    ["DelVar old","delete method variable old"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["StoreVar success","pop a value and store in success"],
    ["LoadVar success","push the value of success"],
    ["JumpCond False 795","pop a value and jump to 795 if the value is False"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["LoadVar new","push the value of new"],
    ["DelVar new","delete method variable new"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar new","delete method variable new"],
    ["DelVar p","delete method variable p"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(success)","restore caller method state and push success"],
    ["DelVar success","delete method variable success"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame BinSema(initial)","start of method BinSema"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar initial","push the value of initial"],
    ["Push {}","push constant {}"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar initial","push the value of initial"],
    ["DelVar initial","delete method variable initial"],
    ["StoreVar sema","pop a value and store in sema"],
    ["ReturnOp(sema)","restore caller method state and push sema"],
    ["DelVar sema","delete method variable sema"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame Lock()","start of method Lock"],
    ["DelVar result","delete method variable result"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame acquired(lock)","start of method acquired"],
    ["DelVar result","delete method variable result"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame held(lock)","start of method held"],
    ["DelVar result","delete method variable result"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame acquire(lock)","start of method acquire"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar lock","push the value of lock"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 850","pop a value and jump to 850 if the value is False"],
    ["Jump 853","set program counter to 853"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 843","set program counter to 843"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame release(lock)","start of method release"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar lock","push the value of lock"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"release(): lock not owned\"","push constant \"release(): lock not owned\""],
    ["Assert2","pop a value and a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame Condition()","start of method Condition"],
    ["DelVar result","delete method variable result"],
    ["Push PC(430)","push constant PC(430)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame wait(c, lk)","start of method wait"],
    ["Push 0","push constant 0"],
    ["StoreVar cnt","pop a value and store in cnt"],
    ["DelVar cnt","delete method variable cnt"],
    ["Push ()","push constant ()"],
    ["Save","pop a value and save context"],
    ["Continue","a no-op, must follow a Stop or Save operation"],
    ["StoreVar ((), ctx)","pop a value and store in ((), ctx)"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push PC(494)","push constant PC(494)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar ctx","push the value of ctx"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar cnt","pop a value and store in cnt"],
    ["LoadVar c","push the value of c"],
    ["Push PC(585)","push constant PC(585)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar ctx","push the value of ctx"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar lk","push the value of lk"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar lk","push the value of lk"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond False 939","pop a value and jump to 939 if the value is False"],
    ["Push PC(494)","push constant PC(494)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar ctx","push the value of ctx"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar cnt","push the value of cnt"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["Jump 940","set program counter to 940"],
    ["Push False","push constant False"],
    ["JumpCond False 945","pop a value and jump to 945 if the value is False"],
    ["DelVar c","delete method variable c"],
    ["DelVar cnt","delete method variable cnt"],
    ["DelVar ctx","delete method variable ctx"],
    ["Jump 948","set program counter to 948"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 921","set program counter to 921"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar lk","push the value of lk"],
    ["DelVar lk","delete method variable lk"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame notify(c)","start of method notify"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["Push PC(430)","push constant PC(430)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 982","pop a value and jump to 982 if the value is False"],
    ["LoadVar c","push the value of c"],
    ["Push PC(614)","push constant PC(614)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar c","push the value of c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push PC(574)","push constant PC(574)"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["DelVar c","delete method variable c"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame notify_all(c)","start of method notify_all"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Push PC(430)","push constant PC(430)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame notifyAll(c)","start of method notifyAll"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Push PC(430)","push constant PC(430)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame Semaphore(cnt)","start of method Semaphore"],
    ["DelVar result","delete method variable result"],
    ["LoadVar cnt","push the value of cnt"],
    ["DelVar cnt","delete method variable cnt"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame P(sema)","start of method P"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar sema","push the value of sema"],
    ["Load","pop an address and push the value at the address"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 1026","pop a value and jump to 1026 if the value is False"],
    ["Jump 1029","set program counter to 1029"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 1018","set program counter to 1018"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["LoadVar sema","push the value of sema"],
    ["DelVar sema","delete method variable sema"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame V(sema)","start of method V"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar sema","push the value of sema"],
    ["DelVar sema","delete method variable sema"],
    ["Dup","push a copy of the top value on the stack"],
    ["Load","pop an address and push the value at the address"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame Queue()","start of method Queue"],
    ["DelVar result","delete method variable result"],
    ["Push ()","push constant ()"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame get(q)","start of method get"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["DelVar result","delete method variable result"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["Push ()","push constant ()"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 1068","pop a value and jump to 1068 if the value is False"],
    ["Jump 1071","set program counter to 1071"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Jump 1059","set program counter to 1059"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["Push PC(45)","push constant PC(45)"],
    ["LoadVar q","push the value of q"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar q","push the value of q"],
    ["Push PC(55)","push constant PC(55)"],
    ["LoadVar q","push the value of q"],
    ["DelVar q","delete method variable q"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 1106","jump over method definition: set program counter to 1106"],
    ["Frame put(q, item)","start of method put"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar q","push the value of q"],
    ["Push PC(33)","push constant PC(33)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar q","push the value of q"],
    ["DelVar q","delete method variable q"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar item","push the value of item"],
    ["DelVar item","delete method variable item"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push {:}","push constant {:}"],
    ["Store alloc$pool","pop a value and store it in shared variable pool"],
    ["Push 0","push constant 0"],
    ["Store alloc$next","pop a value and store it in shared variable next"],
    ["Jump 1396","jump over method definition: set program counter to 1396"],
    ["Frame malloc(v)","start of method malloc"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Push ?alloc$pool","push constant ?alloc$pool"],
    ["Load alloc$next","push value of shared variable next"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?alloc$pool","push constant ?alloc$pool"],
    ["Load alloc$next","push value of shared variable next"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["StoreVar copy","pop a value and store in copy"],
    ["Load alloc$next","push value of shared variable next"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store alloc$next","pop a value and store it in shared variable next"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(copy)","restore caller method state and push copy"],
    ["DelVar copy","delete method variable copy"],
    ["Jump 1396","jump over method definition: set program counter to 1396"],
    ["Frame free(r)","start of method free"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar r","push the value of r"],
    ["DelVar r","delete method variable r"],
    ["Del","pop an address and delete the shared variable at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1396","jump over method definition: set program counter to 1396"],
    ["Frame leak_check()","start of method leak_check"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["Load alloc$pool","push value of shared variable pool"],
    ["Push {:}","push constant {:}"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Push \"alloc_leak\"","push constant \"alloc_leak\""],
    ["Assert2","pop a value and a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1396","jump over method definition: set program counter to 1396"],
    ["Frame Disque()","start of method Disque"],
    ["Push {:}","push constant {:}"],
    ["Push \"current\"","push constant \"current\""],
    ["Push None","push constant None"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"lock\"","push constant \"lock\""],
    ["Push ()","push constant ()"],
    ["Apply PC(820)","call method PC(820)"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar d","pop a value and store in d"],
    ["ReturnOp(d)","restore caller method state and push d"],
    ["DelVar d","delete method variable d"],
    ["Jump 1396","jump over method definition: set program counter to 1396"],
    ["Frame insert(d, v)","start of method insert"],
    ["Push {:}","push constant {:}"],
    ["Push \"value\"","push constant \"value\""],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"next\"","push constant \"next\""],
    ["Push None","push constant None"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"prev\"","push constant \"prev\""],
    ["Push None","push constant None"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Apply PC(1111)","call method PC(1111)"],
    ["StoreVar node","pop a value and store in node"],
    ["LoadVar d","push the value of d"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(842)","call method PC(842)"],
    ["Pop","discard the top value on the stack"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push None","push constant None"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1207","pop a value and jump to 1207 if the value is False"],
    ["LoadVar node","push the value of node"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar node","push the value of node"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar node","push the value of node"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar node","push the value of node"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar node","push the value of node"],
    ["DelVar node","delete method variable node"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 1246","set program counter to 1246"],
    ["LoadVar node","push the value of node"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar node","push the value of node"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar node","push the value of node"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar node","push the value of node"],
    ["DelVar node","delete method variable node"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(861)","call method PC(861)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1396","jump over method definition: set program counter to 1396"],
    ["Frame delete(d)","start of method delete"],
    ["LoadVar d","push the value of d"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(842)","call method PC(842)"],
    ["Pop","discard the top value on the stack"],
    ["Push None","push constant None"],
    ["StoreVar returnVal","pop a value and store in returnVal"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push None","push constant None"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 1344","pop a value and jump to 1344 if the value is False"],
    ["DelVar returnVal","delete method variable returnVal"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"value\"","push constant \"value\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar returnVal","pop a value and store in returnVal"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 1313","pop a value and jump to 1313 if the value is False"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push None","push constant None"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push None","push constant None"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push None","push constant None"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 1344","set program counter to 1344"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Store disque$currNext","pop a value and store it in shared variable currNext"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Store disque$currPrev","pop a value and store it in shared variable currPrev"],
    ["Load disque$currPrev","push value of shared variable currPrev"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load disque$currNext","push value of shared variable currNext"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Load disque$currNext","push value of shared variable currNext"],
    ["Push \"prev\"","push constant \"prev\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load disque$currPrev","push value of shared variable currPrev"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load disque$currNext","push value of shared variable currNext"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(861)","call method PC(861)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(returnVal)","restore caller method state and push returnVal"],
    ["DelVar returnVal","delete method variable returnVal"],
    ["Jump 1396","jump over method definition: set program counter to 1396"],
    ["Frame next(d)","start of method next"],
    ["LoadVar d","push the value of d"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(842)","call method PC(842)"],
    ["Pop","discard the top value on the stack"],
    ["Push None","push constant None"],
    ["StoreVar returnVal","pop a value and store in returnVal"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push None","push constant None"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 1388","pop a value and jump to 1388 if the value is False"],
    ["DelVar returnVal","delete method variable returnVal"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"value\"","push constant \"value\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar returnVal","pop a value and store in returnVal"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar d","push the value of d"],
    ["Push \"current\"","push constant \"current\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Push \"next\"","push constant \"next\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Store","pop a value and an address and store the value at the address"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push \"lock\"","push constant \"lock\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Apply PC(861)","call method PC(861)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(returnVal)","restore caller method state and push returnVal"],
    ["DelVar returnVal","delete method variable returnVal"],
    ["Push PC(1151)","push constant PC(1151)"],
    ["Push ()","push constant ()"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Store d","pop a value and store it in shared variable d"],
    ["Jump 1474","jump over method definition: set program counter to 1474"],
    ["Frame insert_test(self)","start of method insert_test"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Testing insert\"","push constant \"Testing insert\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Push PC(1164)","push constant PC(1164)"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push ?d","push constant ?d"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["Pop","discard the top value on the stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Done inserting\"","push constant \"Done inserting\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["DelVar self","delete method variable self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1474","jump over method definition: set program counter to 1474"],
    ["Frame delete_test(self)","start of method delete_test"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Testing delete\"","push constant \"Testing delete\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Push PC(1254)","push constant PC(1254)"],
    ["Push ?d","push constant ?d"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar v","pop a value and store in v"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Done deleting\"","push constant \"Done deleting\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["DelVar self","delete method variable self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 1474","jump over method definition: set program counter to 1474"],
    ["Frame next_test(self)","start of method next_test"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Testing next\"","push constant \"Testing next\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["Push PC(1353)","push constant PC(1353)"],
    ["Push ?d","push constant ?d"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar v","pop a value and store in v"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push \"Done next\"","push constant \"Done next\""],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar self","push the value of self"],
    ["DelVar self","delete method variable self"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Print","pop a value and add to print history"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push 1","push constant 1"],
    ["Push 2","push constant 2"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 1487","check if loop is done: pop a value and jump to 1487 if the value is False"],
    ["Push ?PC(1402)","push constant ?PC(1402)"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 1478","set program counter to 1478"],
    ["DelVar i","delete method variable i"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 29, "endcolumn": 30, "stmt": [1,1,29,30] },
    { "module": "lists", "line": 2, "column": 1, "endline": 2, "endcolumn": 3, "stmt": [2,1,2,35] },
    { "module": "lists", "line": 2, "column": 1, "endline": 2, "endcolumn": 35, "stmt": [2,1,2,35] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 36, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 34, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 31, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 19, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 19, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 37, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 5, "endline": 3, "endcolumn": 12, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 4, "column": 1, "endline": 4, "endcolumn": 6, "stmt": [4,1,4,6] },
    { "module": "lists", "line": 5, "column": 1, "endline": 5, "endcolumn": 3, "stmt": [5,1,5,32] },
    { "module": "lists", "line": 5, "column": 1, "endline": 5, "endcolumn": 32, "stmt": [5,1,5,32] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 5, "endline": 6, "endcolumn": 12, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 7, "column": 1, "endline": 7, "endcolumn": 6, "stmt": [7,1,7,6] },
    { "module": "lists", "line": 8, "column": 1, "endline": 8, "endcolumn": 3, "stmt": [8,1,8,27] },
    { "module": "lists", "line": 8, "column": 1, "endline": 8, "endcolumn": 27, "stmt": [8,1,8,27] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 16, "endline": 9, "endcolumn": 16, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 17, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 17, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 5, "endline": 9, "endcolumn": 12, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 10, "column": 1, "endline": 10, "endcolumn": 6, "stmt": [10,1,10,6] },
    { "module": "lists", "line": 11, "column": 1, "endline": 11, "endcolumn": 3, "stmt": [11,1,11,27] },
    { "module": "lists", "line": 11, "column": 1, "endline": 11, "endcolumn": 27, "stmt": [11,1,11,27] },
    { "module": "lists", "line": 12, "column": 14, "endline": 12, "endcolumn": 14, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 12, "column": 14, "endline": 12, "endcolumn": 14, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 12, "column": 14, "endline": 12, "endcolumn": 14, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 12, "column": 5, "endline": 12, "endcolumn": 12, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 13, "column": 9, "endline": 13, "endcolumn": 14, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 13, "column": 16, "endline": 13, "endcolumn": 16, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 13, "column": 9, "endline": 13, "endcolumn": 17, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 13, "column": 5, "endline": 13, "endcolumn": 17, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 15, "column": 45, "endline": 15, "endcolumn": 50, "stmt": [15,45,15,50] },
    { "module": "lists", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,29] },
    { "module": "lists", "line": 16, "column": 1, "endline": 16, "endcolumn": 29, "stmt": [16,1,16,29] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 29, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 29, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 29, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 5, "endline": 17, "endcolumn": 12, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 19, "column": 23, "endline": 19, "endcolumn": 28, "stmt": [19,23,19,28] },
    { "module": "lists", "line": 20, "column": 1, "endline": 20, "endcolumn": 3, "stmt": [20,1,20,28] },
    { "module": "lists", "line": 20, "column": 1, "endline": 20, "endcolumn": 28, "stmt": [20,1,20,28] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 34, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 34, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 16, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 16, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 16, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 17, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 17, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 20, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 20, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 34, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 5, "endline": 21, "endcolumn": 12, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 23, "column": 22, "endline": 23, "endcolumn": 27, "stmt": [23,22,23,27] },
    { "module": "lists", "line": 24, "column": 1, "endline": 24, "endcolumn": 3, "stmt": [24,1,24,33] },
    { "module": "lists", "line": 24, "column": 1, "endline": 24, "endcolumn": 33, "stmt": [24,1,24,33] },
    { "module": "lists", "line": 25, "column": 8, "endline": 25, "endcolumn": 8, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 25, "column": 13, "endline": 25, "endcolumn": 14, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 25, "column": 8, "endline": 25, "endcolumn": 14, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 25, "column": 5, "endline": 25, "endcolumn": 6, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 26, "column": 23, "endline": 26, "endcolumn": 24, "stmt": [26,9,26,24] },
    { "module": "lists", "line": 26, "column": 23, "endline": 26, "endcolumn": 24, "stmt": [26,9,26,24] },
    { "module": "lists", "line": 26, "column": 9, "endline": 26, "endcolumn": 21, "stmt": [26,9,26,24] },
    { "module": "lists", "line": 25, "column": 5, "endline": 25, "endcolumn": 15, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 34, "endline": 28, "endcolumn": 34, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 35, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 43, "endline": 28, "endcolumn": 43, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 43, "endline": 28, "endcolumn": 43, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 38, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 9, "endline": 28, "endcolumn": 27, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 34, "endline": 29, "endcolumn": 37, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 45, "endline": 29, "endcolumn": 45, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 49, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 45, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 49, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 9, "endline": 29, "endcolumn": 19, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 35, "endline": 30, "endcolumn": 38, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 35, "endline": 30, "endcolumn": 38, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 46, "endline": 30, "endcolumn": 46, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 51, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 46, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 51, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 9, "endline": 30, "endcolumn": 20, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 31, "column": 33, "endline": 31, "endcolumn": 37, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 33, "endline": 31, "endcolumn": 37, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 27, "endline": 31, "endcolumn": 38, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 48, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 47, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 47, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 48, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 59, "endline": 31, "endcolumn": 64, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 59, "endline": 31, "endcolumn": 64, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 53, "endline": 31, "endcolumn": 65, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 27, "endline": 31, "endcolumn": 65, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 13, "endline": 31, "endcolumn": 25, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 33, "column": 22, "endline": 33, "endcolumn": 27, "stmt": [33,22,33,27] },
    { "module": "lists", "line": 33, "column": 22, "endline": 33, "endcolumn": 27, "stmt": [33,22,33,27] },
    { "module": "lists", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,26] },
    { "module": "lists", "line": 34, "column": 1, "endline": 34, "endcolumn": 26, "stmt": [34,1,34,26] },
    { "module": "lists", "line": 35, "column": 9, "endline": 35, "endcolumn": 9, "stmt": [35,5,35,9] },
    { "module": "lists", "line": 35, "column": 5, "endline": 35, "endcolumn": 7, "stmt": [35,5,35,9] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 11, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 13, "endline": 36, "endcolumn": 13, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 14, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 14, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 19, "endline": 36, "endcolumn": 19, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 19, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 5, "endline": 36, "endcolumn": 9, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 14, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 12, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 36, "column": 5, "endline": 36, "endcolumn": 20, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 40, "column": 1, "endline": 40, "endcolumn": 3, "stmt": [40,1,40,41] },
    { "module": "lists", "line": 40, "column": 1, "endline": 40, "endcolumn": 41, "stmt": [40,1,40,41] },
    { "module": "lists", "line": 41, "column": 19, "endline": 41, "endcolumn": 24, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 19, "endline": 41, "endcolumn": 24, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 25, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 34, "endline": 41, "endcolumn": 34, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 30, "endline": 41, "endcolumn": 35, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 35, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 75, "endline": 41, "endcolumn": 75, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 84, "endline": 41, "endcolumn": 89, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 80, "endline": 41, "endcolumn": 90, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 94, "endline": 41, "endcolumn": 94, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 80, "endline": 41, "endcolumn": 94, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 75, "endline": 41, "endcolumn": 94, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 48, "endline": 41, "endcolumn": 48, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 49, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 49, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 54, "endline": 41, "endcolumn": 59, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 61, "endline": 41, "endcolumn": 61, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 61, "endline": 41, "endcolumn": 61, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 54, "endline": 41, "endcolumn": 62, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 54, "endline": 41, "endcolumn": 62, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 62, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 96, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 42, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 38, "endline": 41, "endcolumn": 40, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 5, "endline": 41, "endcolumn": 12, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 43, "column": 55, "endline": 43, "endcolumn": 60, "stmt": [43,55,43,60] },
    { "module": "lists", "line": 44, "column": 1, "endline": 44, "endcolumn": 3, "stmt": [44,1,44,34] },
    { "module": "lists", "line": 44, "column": 1, "endline": 44, "endcolumn": 34, "stmt": [44,1,44,34] },
    { "module": "lists", "line": 45, "column": 14, "endline": 45, "endcolumn": 14, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 45, "column": 14, "endline": 45, "endcolumn": 14, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 45, "column": 14, "endline": 45, "endcolumn": 14, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 45, "column": 5, "endline": 45, "endcolumn": 12, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 46, "column": 14, "endline": 46, "endcolumn": 14, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 14, "endline": 46, "endcolumn": 14, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 5, "endline": 46, "endcolumn": 7, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 5, "endline": 46, "endcolumn": 7, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 5, "endline": 46, "endcolumn": 7, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 47, "column": 18, "endline": 47, "endcolumn": 18, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 25, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 25, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 28, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 28, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 18, "endline": 47, "endcolumn": 29, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 18, "endline": 47, "endcolumn": 29, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 9, "endline": 47, "endcolumn": 16, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 46, "column": 14, "endline": 46, "endcolumn": 14, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 49, "column": 59, "endline": 49, "endcolumn": 64, "stmt": [49,59,49,64] },
    { "module": "lists", "line": 49, "column": 59, "endline": 49, "endcolumn": 64, "stmt": [49,59,49,64] },
    { "module": "lists", "line": 49, "column": 59, "endline": 49, "endcolumn": 64, "stmt": [49,59,49,64] },
    { "module": "lists", "line": 50, "column": 1, "endline": 50, "endcolumn": 3, "stmt": [50,1,50,34] },
    { "module": "lists", "line": 50, "column": 1, "endline": 50, "endcolumn": 34, "stmt": [50,1,50,34] },
    { "module": "lists", "line": 51, "column": 23, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 23, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 19, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 28, "endline": 51, "endcolumn": 28, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 19, "endline": 51, "endcolumn": 28, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 63, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 16, "endline": 51, "endcolumn": 17, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 35, "endline": 51, "endcolumn": 35, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 37, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 39, "endline": 51, "endcolumn": 39, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 40, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 40, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 54, "endline": 51, "endcolumn": 54, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 54, "endline": 51, "endcolumn": 54, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 55, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 58, "endline": 51, "endcolumn": 58, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 58, "endline": 51, "endcolumn": 58, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 61, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 61, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 43, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 35, "endline": 51, "endcolumn": 63, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 35, "endline": 51, "endcolumn": 63, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 5, "endline": 51, "endcolumn": 12, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 53, "column": 35, "endline": 53, "endcolumn": 40, "stmt": [53,35,53,40] },
    { "module": "lists", "line": 54, "column": 1, "endline": 54, "endcolumn": 3, "stmt": [54,1,54,35] },
    { "module": "lists", "line": 54, "column": 1, "endline": 54, "endcolumn": 35, "stmt": [54,1,54,35] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 20, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 20, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 23, "endline": 55, "endcolumn": 23, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 23, "endline": 55, "endcolumn": 23, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 26, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 26, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 14, "endline": 55, "endcolumn": 27, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 5, "endline": 55, "endcolumn": 12, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 57, "column": 32, "endline": 57, "endcolumn": 37, "stmt": [57,32,57,37] },
    { "module": "lists", "line": 58, "column": 1, "endline": 58, "endcolumn": 3, "stmt": [58,1,58,29] },
    { "module": "lists", "line": 58, "column": 1, "endline": 58, "endcolumn": 29, "stmt": [58,1,58,29] },
    { "module": "lists", "line": 59, "column": 12, "endline": 59, "endcolumn": 13, "stmt": [59,5,59,13] },
    { "module": "lists", "line": 59, "column": 5, "endline": 59, "endcolumn": 10, "stmt": [59,5,59,13] },
    { "module": "lists", "line": 60, "column": 13, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,13] },
    { "module": "lists", "line": 60, "column": 13, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,13] },
    { "module": "lists", "line": 60, "column": 5, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,13] },
    { "module": "lists", "line": 61, "column": 11, "endline": 61, "endcolumn": 11, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 61, "column": 16, "endline": 61, "endcolumn": 17, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 61, "column": 11, "endline": 61, "endcolumn": 17, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 61, "column": 5, "endline": 61, "endcolumn": 9, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 62, "column": 24, "endline": 62, "endcolumn": 24, "stmt": [62,9,62,24] },
    { "module": "lists", "line": 62, "column": 17, "endline": 62, "endcolumn": 24, "stmt": [62,9,62,24] },
    { "module": "lists", "line": 62, "column": 9, "endline": 62, "endcolumn": 15, "stmt": [62,9,62,24] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 26, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 26, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 23, "endline": 63, "endcolumn": 24, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 23, "endline": 63, "endcolumn": 23, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 23, "endline": 63, "endcolumn": 24, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 26, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 19, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 22, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 22, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 22, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 16, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 61, "column": 5, "endline": 61, "endcolumn": 18, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 66, "column": 53, "endline": 66, "endcolumn": 58, "stmt": [66,53,66,58] },
    { "module": "lists", "line": 66, "column": 53, "endline": 66, "endcolumn": 58, "stmt": [66,53,66,58] },
    { "module": "lists", "line": 66, "column": 53, "endline": 66, "endcolumn": 58, "stmt": [66,53,66,58] },
    { "module": "lists", "line": 67, "column": 1, "endline": 67, "endcolumn": 3, "stmt": [67,1,67,30] },
    { "module": "lists", "line": 67, "column": 1, "endline": 67, "endcolumn": 30, "stmt": [67,1,67,30] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 22, "endline": 68, "endcolumn": 22, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 22, "endline": 68, "endcolumn": 22, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 30, "endline": 68, "endcolumn": 33, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 35, "endline": 68, "endcolumn": 35, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 30, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 30, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 36, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 5, "endline": 68, "endcolumn": 7, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 70, "column": 40, "endline": 70, "endcolumn": 45, "stmt": [70,40,70,45] },
    { "module": "lists", "line": 70, "column": 40, "endline": 70, "endcolumn": 45, "stmt": [70,40,70,45] },
    { "module": "lists", "line": 71, "column": 1, "endline": 71, "endcolumn": 3, "stmt": [71,1,71,24] },
    { "module": "lists", "line": 71, "column": 1, "endline": 71, "endcolumn": 24, "stmt": [71,1,71,24] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 25, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 25, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 13, "endline": 72, "endcolumn": 13, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 13, "endline": 72, "endcolumn": 13, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 14, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 14, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 25, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 5, "endline": 72, "endcolumn": 7, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 73, "column": 1, "endline": 73, "endcolumn": 6, "stmt": [73,1,73,6] },
    { "module": "lists", "line": 73, "column": 1, "endline": 73, "endcolumn": 6, "stmt": [73,1,73,6] },
    { "module": "bags", "line": 1, "column": 1, "endline": 1, "endcolumn": 3, "stmt": [1,1,1,23] },
    { "module": "bags", "line": 1, "column": 1, "endline": 1, "endcolumn": 23, "stmt": [1,1,1,23] },
    { "module": "bags", "line": 2, "column": 10, "endline": 2, "endcolumn": 12, "stmt": [2,5,2,12] },
    { "module": "bags", "line": 2, "column": 5, "endline": 2, "endcolumn": 8, "stmt": [2,5,2,12] },
    { "module": "bags", "line": 3, "column": 1, "endline": 3, "endcolumn": 6, "stmt": [3,1,3,6] },
    { "module": "bags", "line": 3, "column": 1, "endline": 3, "endcolumn": 6, "stmt": [3,1,3,6] },
    { "module": "bags", "line": 4, "column": 1, "endline": 4, "endcolumn": 3, "stmt": [4,1,4,26] },
    { "module": "bags", "line": 4, "column": 1, "endline": 4, "endcolumn": 26, "stmt": [4,1,4,26] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 29, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 29, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 14, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 16, "endline": 5, "endcolumn": 16, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 29, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 12, "endline": 5, "endcolumn": 29, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 5, "column": 5, "endline": 5, "endcolumn": 8, "stmt": [5,5,5,31] },
    { "module": "bags", "line": 6, "column": 1, "endline": 6, "endcolumn": 6, "stmt": [6,1,6,6] },
    { "module": "bags", "line": 6, "column": 1, "endline": 6, "endcolumn": 6, "stmt": [6,1,6,6] },
    { "module": "bags", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,27] },
    { "module": "bags", "line": 7, "column": 1, "endline": 7, "endcolumn": 27, "stmt": [7,1,7,27] },
    { "module": "bags", "line": 8, "column": 10, "endline": 8, "endcolumn": 12, "stmt": [8,5,8,12] },
    { "module": "bags", "line": 8, "column": 5, "endline": 8, "endcolumn": 8, "stmt": [8,5,8,12] },
    { "module": "bags", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,14] },
    { "module": "bags", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,14] },
    { "module": "bags", "line": 9, "column": 5, "endline": 9, "endcolumn": 7, "stmt": [9,5,9,14] },
    { "module": "bags", "line": 9, "column": 5, "endline": 9, "endcolumn": 7, "stmt": [9,5,9,14] },
    { "module": "bags", "line": 9, "column": 5, "endline": 9, "endcolumn": 7, "stmt": [9,5,9,14] },
    { "module": "bags", "line": 10, "column": 12, "endline": 10, "endcolumn": 12, "stmt": [10,9,10,19] },
    { "module": "bags", "line": 10, "column": 17, "endline": 10, "endcolumn": 18, "stmt": [10,9,10,19] },
    { "module": "bags", "line": 10, "column": 12, "endline": 10, "endcolumn": 18, "stmt": [10,9,10,19] },
    { "module": "bags", "line": 10, "column": 9, "endline": 10, "endcolumn": 10, "stmt": [10,9,10,19] },
    { "module": "bags", "line": 11, "column": 13, "endline": 11, "endcolumn": 14, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 16, "endline": 11, "endcolumn": 16, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 16, "endline": 11, "endcolumn": 16, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 13, "endline": 11, "endcolumn": 17, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 13, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 13, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 22, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 13, "endline": 11, "endcolumn": 22, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 11, "column": 13, "endline": 11, "endcolumn": 20, "stmt": [11,13,11,22] },
    { "module": "bags", "line": 10, "column": 9, "endline": 10, "endcolumn": 19, "stmt": [10,9,10,19] },
    { "module": "bags", "line": 13, "column": 13, "endline": 13, "endcolumn": 14, "stmt": [13,13,13,21] },
    { "module": "bags", "line": 13, "column": 16, "endline": 13, "endcolumn": 16, "stmt": [13,13,13,21] },
    { "module": "bags", "line": 13, "column": 16, "endline": 13, "endcolumn": 16, "stmt": [13,13,13,21] },
    { "module": "bags", "line": 13, "column": 13, "endline": 13, "endcolumn": 17, "stmt": [13,13,13,21] },
    { "module": "bags", "line": 13, "column": 21, "endline": 13, "endcolumn": 21, "stmt": [13,13,13,21] },
    { "module": "bags", "line": 13, "column": 13, "endline": 13, "endcolumn": 19, "stmt": [13,13,13,21] },
    { "module": "bags", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,14] },
    { "module": "bags", "line": 14, "column": 1, "endline": 14, "endcolumn": 6, "stmt": [14,1,14,6] },
    { "module": "bags", "line": 14, "column": 1, "endline": 14, "endcolumn": 6, "stmt": [14,1,14,6] },
    { "module": "bags", "line": 14, "column": 1, "endline": 14, "endcolumn": 6, "stmt": [14,1,14,6] },
    { "module": "bags", "line": 15, "column": 9, "endline": 15, "endcolumn": 20, "stmt": [15,1,15,39] },
    { "module": "bags", "line": 15, "column": 1, "endline": 15, "endcolumn": 39, "stmt": [15,1,15,39] },
    { "module": "bags", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,40] },
    { "module": "bags", "line": 16, "column": 1, "endline": 16, "endcolumn": 40, "stmt": [16,1,16,40] },
    { "module": "bags", "line": 17, "column": 8, "endline": 17, "endcolumn": 10, "stmt": [17,5,17,17] },
    { "module": "bags", "line": 17, "column": 15, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,17] },
    { "module": "bags", "line": 17, "column": 8, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,17] },
    { "module": "bags", "line": 17, "column": 5, "endline": 17, "endcolumn": 6, "stmt": [17,5,17,17] },
    { "module": "bags", "line": 18, "column": 17, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,23] },
    { "module": "bags", "line": 18, "column": 17, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,23] },
    { "module": "bags", "line": 18, "column": 20, "endline": 18, "endcolumn": 22, "stmt": [18,9,18,23] },
    { "module": "bags", "line": 18, "column": 20, "endline": 18, "endcolumn": 22, "stmt": [18,9,18,23] },
    { "module": "bags", "line": 18, "column": 17, "endline": 18, "endcolumn": 23, "stmt": [18,9,18,23] },
    { "module": "bags", "line": 18, "column": 17, "endline": 18, "endcolumn": 23, "stmt": [18,9,18,23] },
    { "module": "bags", "line": 18, "column": 9, "endline": 18, "endcolumn": 15, "stmt": [18,9,18,23] },
    { "module": "bags", "line": 17, "column": 5, "endline": 17, "endcolumn": 17, "stmt": [17,5,17,17] },
    { "module": "bags", "line": 20, "column": 17, "endline": 20, "endcolumn": 17, "stmt": [20,9,20,17] },
    { "module": "bags", "line": 20, "column": 17, "endline": 20, "endcolumn": 17, "stmt": [20,9,20,17] },
    { "module": "bags", "line": 20, "column": 17, "endline": 20, "endcolumn": 17, "stmt": [20,9,20,17] },
    { "module": "bags", "line": 20, "column": 9, "endline": 20, "endcolumn": 15, "stmt": [20,9,20,17] },
    { "module": "bags", "line": 21, "column": 1, "endline": 21, "endcolumn": 6, "stmt": [21,1,21,6] },
    { "module": "bags", "line": 21, "column": 1, "endline": 21, "endcolumn": 6, "stmt": [21,1,21,6] },
    { "module": "bags", "line": 22, "column": 9, "endline": 22, "endcolumn": 12, "stmt": [22,1,22,23] },
    { "module": "bags", "line": 22, "column": 1, "endline": 22, "endcolumn": 23, "stmt": [22,1,22,23] },
    { "module": "bags", "line": 23, "column": 1, "endline": 23, "endcolumn": 3, "stmt": [23,1,23,27] },
    { "module": "bags", "line": 23, "column": 1, "endline": 23, "endcolumn": 27, "stmt": [23,1,23,27] },
    { "module": "bags", "line": 24, "column": 13, "endline": 24, "endcolumn": 13, "stmt": [24,5,24,13] },
    { "module": "bags", "line": 24, "column": 5, "endline": 24, "endcolumn": 11, "stmt": [24,5,24,13] },
    { "module": "bags", "line": 25, "column": 16, "endline": 25, "endcolumn": 17, "stmt": [25,5,25,17] },
    { "module": "bags", "line": 25, "column": 16, "endline": 25, "endcolumn": 17, "stmt": [25,5,25,17] },
    { "module": "bags", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bags", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bags", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bags", "line": 25, "column": 5, "endline": 25, "endcolumn": 7, "stmt": [25,5,25,17] },
    { "module": "bags", "line": 26, "column": 9, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bags", "line": 26, "column": 9, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bags", "line": 26, "column": 18, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bags", "line": 26, "column": 18, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bags", "line": 26, "column": 9, "endline": 26, "endcolumn": 18, "stmt": [26,9,26,18] },
    { "module": "bags", "line": 26, "column": 9, "endline": 26, "endcolumn": 16, "stmt": [26,9,26,18] },
    { "module": "bags", "line": 25, "column": 17, "endline": 25, "endcolumn": 17, "stmt": [25,5,25,17] },
    { "module": "bags", "line": 27, "column": 1, "endline": 27, "endcolumn": 6, "stmt": [27,1,27,6] },
    { "module": "bags", "line": 27, "column": 1, "endline": 27, "endcolumn": 6, "stmt": [27,1,27,6] },
    { "module": "bags", "line": 27, "column": 1, "endline": 27, "endcolumn": 6, "stmt": [27,1,27,6] },
    { "module": "bags", "line": 28, "column": 9, "endline": 28, "endcolumn": 12, "stmt": [28,1,28,23] },
    { "module": "bags", "line": 28, "column": 1, "endline": 28, "endcolumn": 23, "stmt": [28,1,28,23] },
    { "module": "bags", "line": 29, "column": 1, "endline": 29, "endcolumn": 3, "stmt": [29,1,29,27] },
    { "module": "bags", "line": 29, "column": 1, "endline": 29, "endcolumn": 27, "stmt": [29,1,29,27] },
    { "module": "bags", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 30, "column": 12, "endline": 30, "endcolumn": 13, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 30, "column": 18, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 30, "column": 12, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 30, "column": 5, "endline": 30, "endcolumn": 10, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 30, "column": 5, "endline": 30, "endcolumn": 20, "stmt": [30,5,30,20] },
    { "module": "bags", "line": 31, "column": 22, "endline": 31, "endcolumn": 23, "stmt": [31,5,31,25] },
    { "module": "bags", "line": 31, "column": 22, "endline": 31, "endcolumn": 23, "stmt": [31,5,31,25] },
    { "module": "bags", "line": 31, "column": 17, "endline": 31, "endcolumn": 24, "stmt": [31,5,31,25] },
    { "module": "bags", "line": 31, "column": 13, "endline": 31, "endcolumn": 25, "stmt": [31,5,31,25] },
    { "module": "bags", "line": 31, "column": 5, "endline": 31, "endcolumn": 11, "stmt": [31,5,31,25] },
    { "module": "bags", "line": 32, "column": 1, "endline": 32, "endcolumn": 6, "stmt": [32,1,32,6] },
    { "module": "bags", "line": 32, "column": 1, "endline": 32, "endcolumn": 6, "stmt": [32,1,32,6] },
    { "module": "bags", "line": 33, "column": 9, "endline": 33, "endcolumn": 12, "stmt": [33,1,33,23] },
    { "module": "bags", "line": 33, "column": 1, "endline": 33, "endcolumn": 23, "stmt": [33,1,33,23] },
    { "module": "bags", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,27] },
    { "module": "bags", "line": 34, "column": 1, "endline": 34, "endcolumn": 27, "stmt": [34,1,34,27] },
    { "module": "bags", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 35, "column": 12, "endline": 35, "endcolumn": 13, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 35, "column": 18, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 35, "column": 12, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 35, "column": 5, "endline": 35, "endcolumn": 10, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 35, "column": 5, "endline": 35, "endcolumn": 20, "stmt": [35,5,35,20] },
    { "module": "bags", "line": 36, "column": 22, "endline": 36, "endcolumn": 23, "stmt": [36,5,36,25] },
    { "module": "bags", "line": 36, "column": 22, "endline": 36, "endcolumn": 23, "stmt": [36,5,36,25] },
    { "module": "bags", "line": 36, "column": 17, "endline": 36, "endcolumn": 24, "stmt": [36,5,36,25] },
    { "module": "bags", "line": 36, "column": 13, "endline": 36, "endcolumn": 25, "stmt": [36,5,36,25] },
    { "module": "bags", "line": 36, "column": 5, "endline": 36, "endcolumn": 11, "stmt": [36,5,36,25] },
    { "module": "bags", "line": 37, "column": 1, "endline": 37, "endcolumn": 6, "stmt": [37,1,37,6] },
    { "module": "bags", "line": 37, "column": 1, "endline": 37, "endcolumn": 6, "stmt": [37,1,37,6] },
    { "module": "bags", "line": 38, "column": 1, "endline": 38, "endcolumn": 3, "stmt": [38,1,38,28] },
    { "module": "bags", "line": 38, "column": 1, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "bags", "line": 39, "column": 23, "endline": 39, "endcolumn": 24, "stmt": [39,5,39,26] },
    { "module": "bags", "line": 39, "column": 23, "endline": 39, "endcolumn": 24, "stmt": [39,5,39,26] },
    { "module": "bags", "line": 39, "column": 18, "endline": 39, "endcolumn": 25, "stmt": [39,5,39,26] },
    { "module": "bags", "line": 39, "column": 11, "endline": 39, "endcolumn": 26, "stmt": [39,5,39,26] },
    { "module": "bags", "line": 39, "column": 5, "endline": 39, "endcolumn": 9, "stmt": [39,5,39,26] },
    { "module": "bags", "line": 40, "column": 1, "endline": 40, "endcolumn": 6, "stmt": [40,1,40,6] },
    { "module": "bags", "line": 40, "column": 1, "endline": 40, "endcolumn": 6, "stmt": [40,1,40,6] },
    { "module": "bags", "line": 41, "column": 9, "endline": 41, "endcolumn": 11, "stmt": [41,1,41,21] },
    { "module": "bags", "line": 41, "column": 1, "endline": 41, "endcolumn": 21, "stmt": [41,1,41,21] },
    { "module": "bags", "line": 42, "column": 1, "endline": 42, "endcolumn": 3, "stmt": [42,1,42,32] },
    { "module": "bags", "line": 42, "column": 1, "endline": 42, "endcolumn": 32, "stmt": [42,1,42,32] },
    { "module": "bags", "line": 43, "column": 14, "endline": 43, "endcolumn": 15, "stmt": [43,5,43,15] },
    { "module": "bags", "line": 43, "column": 14, "endline": 43, "endcolumn": 15, "stmt": [43,5,43,15] },
    { "module": "bags", "line": 43, "column": 14, "endline": 43, "endcolumn": 15, "stmt": [43,5,43,15] },
    { "module": "bags", "line": 43, "column": 5, "endline": 43, "endcolumn": 12, "stmt": [43,5,43,15] },
    { "module": "bags", "line": 44, "column": 8, "endline": 44, "endcolumn": 10, "stmt": [44,5,44,21] },
    { "module": "bags", "line": 44, "column": 15, "endline": 44, "endcolumn": 20, "stmt": [44,5,44,21] },
    { "module": "bags", "line": 44, "column": 8, "endline": 44, "endcolumn": 20, "stmt": [44,5,44,21] },
    { "module": "bags", "line": 44, "column": 5, "endline": 44, "endcolumn": 6, "stmt": [44,5,44,21] },
    { "module": "bags", "line": 45, "column": 9, "endline": 45, "endcolumn": 14, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 16, "endline": 45, "endcolumn": 18, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 16, "endline": 45, "endcolumn": 18, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 9, "endline": 45, "endcolumn": 19, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 9, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 9, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 24, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 9, "endline": 45, "endcolumn": 24, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 45, "column": 9, "endline": 45, "endcolumn": 22, "stmt": [45,9,45,24] },
    { "module": "bags", "line": 44, "column": 5, "endline": 44, "endcolumn": 21, "stmt": [44,5,44,21] },
    { "module": "bags", "line": 47, "column": 9, "endline": 47, "endcolumn": 14, "stmt": [47,9,47,23] },
    { "module": "bags", "line": 47, "column": 16, "endline": 47, "endcolumn": 18, "stmt": [47,9,47,23] },
    { "module": "bags", "line": 47, "column": 16, "endline": 47, "endcolumn": 18, "stmt": [47,9,47,23] },
    { "module": "bags", "line": 47, "column": 9, "endline": 47, "endcolumn": 19, "stmt": [47,9,47,23] },
    { "module": "bags", "line": 47, "column": 23, "endline": 47, "endcolumn": 23, "stmt": [47,9,47,23] },
    { "module": "bags", "line": 47, "column": 9, "endline": 47, "endcolumn": 21, "stmt": [47,9,47,23] },
    { "module": "bags", "line": 48, "column": 1, "endline": 48, "endcolumn": 6, "stmt": [48,1,48,6] },
    { "module": "bags", "line": 49, "column": 9, "endline": 49, "endcolumn": 14, "stmt": [49,1,49,27] },
    { "module": "bags", "line": 49, "column": 1, "endline": 49, "endcolumn": 27, "stmt": [49,1,49,27] },
    { "module": "bags", "line": 50, "column": 1, "endline": 50, "endcolumn": 3, "stmt": [50,1,50,35] },
    { "module": "bags", "line": 50, "column": 1, "endline": 50, "endcolumn": 35, "stmt": [50,1,50,35] },
    { "module": "bags", "line": 51, "column": 14, "endline": 51, "endcolumn": 15, "stmt": [51,5,51,15] },
    { "module": "bags", "line": 51, "column": 14, "endline": 51, "endcolumn": 15, "stmt": [51,5,51,15] },
    { "module": "bags", "line": 51, "column": 14, "endline": 51, "endcolumn": 15, "stmt": [51,5,51,15] },
    { "module": "bags", "line": 51, "column": 5, "endline": 51, "endcolumn": 12, "stmt": [51,5,51,15] },
    { "module": "bags", "line": 52, "column": 8, "endline": 52, "endcolumn": 10, "stmt": [52,5,52,21] },
    { "module": "bags", "line": 52, "column": 15, "endline": 52, "endcolumn": 20, "stmt": [52,5,52,21] },
    { "module": "bags", "line": 52, "column": 8, "endline": 52, "endcolumn": 20, "stmt": [52,5,52,21] },
    { "module": "bags", "line": 52, "column": 5, "endline": 52, "endcolumn": 6, "stmt": [52,5,52,21] },
    { "module": "bags", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 16, "endline": 53, "endcolumn": 21, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 23, "endline": 53, "endcolumn": 25, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 16, "endline": 53, "endcolumn": 26, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 16, "endline": 53, "endcolumn": 26, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 30, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 16, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 9, "endline": 53, "endcolumn": 14, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 53, "column": 9, "endline": 53, "endcolumn": 30, "stmt": [53,9,53,30] },
    { "module": "bags", "line": 54, "column": 9, "endline": 54, "endcolumn": 14, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 54, "column": 16, "endline": 54, "endcolumn": 18, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 54, "column": 9, "endline": 54, "endcolumn": 19, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 54, "column": 9, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 54, "column": 9, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 54, "column": 24, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 54, "column": 9, "endline": 54, "endcolumn": 24, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 54, "column": 9, "endline": 54, "endcolumn": 22, "stmt": [54,9,54,24] },
    { "module": "bags", "line": 55, "column": 12, "endline": 55, "endcolumn": 17, "stmt": [55,9,55,28] },
    { "module": "bags", "line": 55, "column": 19, "endline": 55, "endcolumn": 21, "stmt": [55,9,55,28] },
    { "module": "bags", "line": 55, "column": 12, "endline": 55, "endcolumn": 22, "stmt": [55,9,55,28] },
    { "module": "bags", "line": 55, "column": 12, "endline": 55, "endcolumn": 22, "stmt": [55,9,55,28] },
    { "module": "bags", "line": 55, "column": 27, "endline": 55, "endcolumn": 27, "stmt": [55,9,55,28] },
    { "module": "bags", "line": 55, "column": 12, "endline": 55, "endcolumn": 27, "stmt": [55,9,55,28] },
    { "module": "bags", "line": 55, "column": 9, "endline": 55, "endcolumn": 10, "stmt": [55,9,55,28] },
    { "module": "bags", "line": 56, "column": 17, "endline": 56, "endcolumn": 22, "stmt": [56,13,56,27] },
    { "module": "bags", "line": 56, "column": 24, "endline": 56, "endcolumn": 26, "stmt": [56,13,56,27] },
    { "module": "bags", "line": 56, "column": 24, "endline": 56, "endcolumn": 26, "stmt": [56,13,56,27] },
    { "module": "bags", "line": 56, "column": 17, "endline": 56, "endcolumn": 27, "stmt": [56,13,56,27] },
    { "module": "bags", "line": 56, "column": 13, "endline": 56, "endcolumn": 27, "stmt": [56,13,56,27] },
    { "module": "bags", "line": 58, "column": 44, "endline": 58, "endcolumn": 49, "stmt": [58,44,58,49] },
    { "module": "bags", "line": 58, "column": 44, "endline": 58, "endcolumn": 49, "stmt": [58,44,58,49] },
    { "module": "bags", "line": 59, "column": 1, "endline": 59, "endcolumn": 3, "stmt": [59,1,59,39] },
    { "module": "bags", "line": 59, "column": 1, "endline": 59, "endcolumn": 39, "stmt": [59,1,59,39] },
    { "module": "bags", "line": 60, "column": 8, "endline": 60, "endcolumn": 8, "stmt": [60,5,60,14] },
    { "module": "bags", "line": 60, "column": 8, "endline": 60, "endcolumn": 8, "stmt": [60,5,60,14] },
    { "module": "bags", "line": 60, "column": 13, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,14] },
    { "module": "bags", "line": 60, "column": 8, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,14] },
    { "module": "bags", "line": 60, "column": 5, "endline": 60, "endcolumn": 6, "stmt": [60,5,60,14] },
    { "module": "bags", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bags", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bags", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bags", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bags", "line": 61, "column": 20, "endline": 61, "endcolumn": 22, "stmt": [61,9,61,24] },
    { "module": "bags", "line": 61, "column": 9, "endline": 61, "endcolumn": 16, "stmt": [61,9,61,24] },
    { "module": "bags", "line": 60, "column": 5, "endline": 60, "endcolumn": 14, "stmt": [60,5,60,14] },
    { "module": "bags", "line": 63, "column": 22, "endline": 63, "endcolumn": 23, "stmt": [63,9,63,24] },
    { "module": "bags", "line": 63, "column": 17, "endline": 63, "endcolumn": 24, "stmt": [63,9,63,24] },
    { "module": "bags", "line": 63, "column": 9, "endline": 63, "endcolumn": 15, "stmt": [63,9,63,24] },
    { "module": "bags", "line": 64, "column": 16, "endline": 64, "endcolumn": 16, "stmt": [64,13,64,21] },
    { "module": "bags", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,21] },
    { "module": "bags", "line": 64, "column": 16, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,21] },
    { "module": "bags", "line": 64, "column": 13, "endline": 64, "endcolumn": 14, "stmt": [64,13,64,21] },
    { "module": "bags", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bags", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bags", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bags", "line": 65, "column": 26, "endline": 65, "endcolumn": 27, "stmt": [65,17,65,27] },
    { "module": "bags", "line": 65, "column": 17, "endline": 65, "endcolumn": 24, "stmt": [65,17,65,27] },
    { "module": "bags", "line": 64, "column": 13, "endline": 64, "endcolumn": 21, "stmt": [64,13,64,21] },
    { "module": "bags", "line": 66, "column": 18, "endline": 66, "endcolumn": 18, "stmt": [66,13,66,24] },
    { "module": "bags", "line": 66, "column": 23, "endline": 66, "endcolumn": 23, "stmt": [66,13,66,24] },
    { "module": "bags", "line": 66, "column": 23, "endline": 66, "endcolumn": 23, "stmt": [66,13,66,24] },
    { "module": "bags", "line": 66, "column": 18, "endline": 66, "endcolumn": 23, "stmt": [66,13,66,24] },
    { "module": "bags", "line": 66, "column": 13, "endline": 66, "endcolumn": 16, "stmt": [66,13,66,24] },
    { "module": "bags", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bags", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bags", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bags", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bags", "line": 67, "column": 28, "endline": 67, "endcolumn": 29, "stmt": [67,17,67,31] },
    { "module": "bags", "line": 67, "column": 17, "endline": 67, "endcolumn": 24, "stmt": [67,17,67,31] },
    { "module": "bags", "line": 66, "column": 13, "endline": 66, "endcolumn": 24, "stmt": [66,13,66,24] },
    { "module": "bags", "line": 69, "column": 31, "endline": 69, "endcolumn": 32, "stmt": [69,17,69,33] },
    { "module": "bags", "line": 69, "column": 26, "endline": 69, "endcolumn": 33, "stmt": [69,17,69,33] },
    { "module": "bags", "line": 69, "column": 17, "endline": 69, "endcolumn": 24, "stmt": [69,17,69,33] },
    { "module": "bags", "line": 69, "column": 51, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 69, "column": 51, "endline": 69, "endcolumn": 52, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 69, "column": 51, "endline": 69, "endcolumn": 52, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 69, "column": 51, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 69, "column": 55, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 69, "column": 51, "endline": 69, "endcolumn": 56, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 69, "column": 44, "endline": 69, "endcolumn": 57, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 69, "column": 35, "endline": 69, "endcolumn": 42, "stmt": [69,35,69,57] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 65, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 65, "endline": 70, "endcolumn": 66, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 65, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 69, "endline": 70, "endcolumn": 69, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 73, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 69, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 65, "endline": 70, "endcolumn": 73, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 52, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 34, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 34, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 34, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 36, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 36, "endline": 70, "endcolumn": 36, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 36, "endline": 70, "endcolumn": 36, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 36, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 39, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 36, "endline": 70, "endcolumn": 40, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 41, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 74, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 70, "endcolumn": 74, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 48, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 48, "endline": 71, "endcolumn": 49, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 48, "endline": 71, "endcolumn": 49, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 48, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 52, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 52, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 48, "endline": 71, "endcolumn": 52, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 71, "column": 35, "endline": 71, "endcolumn": 53, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 32, "endline": 71, "endcolumn": 53, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 70, "column": 21, "endline": 70, "endcolumn": 28, "stmt": [70,21,71,53] },
    { "module": "bags", "line": 72, "column": 1, "endline": 72, "endcolumn": 6, "stmt": [72,1,72,6] },
    { "module": "synch", "line": 4, "column": 1, "endline": 4, "endcolumn": 3, "stmt": [4,1,4,35] },
    { "module": "synch", "line": 4, "column": 1, "endline": 4, "endcolumn": 35, "stmt": [4,1,4,35] },
    { "module": "synch", "line": 5, "column": 16, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 27, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 27, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 26, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 16, "endline": 5, "endcolumn": 24, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 5, "column": 16, "endline": 5, "endcolumn": 27, "stmt": [5,16,5,27] },
    { "module": "synch", "line": 6, "column": 1, "endline": 6, "endcolumn": 6, "stmt": [6,1,6,6] },
    { "module": "synch", "line": 6, "column": 1, "endline": 6, "endcolumn": 6, "stmt": [6,1,6,6] },
    { "module": "synch", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,23] },
    { "module": "synch", "line": 7, "column": 1, "endline": 7, "endcolumn": 23, "stmt": [7,1,7,23] },
    { "module": "synch", "line": 8, "column": 16, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 17, "endline": 8, "endcolumn": 17, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 17, "endline": 8, "endcolumn": 17, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 21, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 21, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 16, "endline": 8, "endcolumn": 19, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 8, "column": 16, "endline": 8, "endcolumn": 21, "stmt": [8,16,8,21] },
    { "module": "synch", "line": 9, "column": 1, "endline": 9, "endcolumn": 6, "stmt": [9,1,9,6] },
    { "module": "synch", "line": 10, "column": 1, "endline": 10, "endcolumn": 3, "stmt": [10,1,10,29] },
    { "module": "synch", "line": 10, "column": 1, "endline": 10, "endcolumn": 29, "stmt": [10,1,10,29] },
    { "module": "synch", "line": 11, "column": 5, "endline": 11, "endcolumn": 15, "stmt": [11,5,11,15] },
    { "module": "synch", "line": 12, "column": 21, "endline": 12, "endcolumn": 22, "stmt": [12,9,12,22] },
    { "module": "synch", "line": 12, "column": 20, "endline": 12, "endcolumn": 22, "stmt": [12,9,12,22] },
    { "module": "synch", "line": 12, "column": 9, "endline": 12, "endcolumn": 18, "stmt": [12,9,12,22] },
    { "module": "synch", "line": 13, "column": 10, "endline": 13, "endcolumn": 11, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 13, "column": 10, "endline": 13, "endcolumn": 11, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 13, "column": 15, "endline": 13, "endcolumn": 18, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 13, "column": 9, "endline": 13, "endcolumn": 13, "stmt": [13,9,13,18] },
    { "module": "synch", "line": 11, "column": 5, "endline": 11, "endcolumn": 15, "stmt": [11,5,11,15] },
    { "module": "synch", "line": 14, "column": 1, "endline": 14, "endcolumn": 6, "stmt": [14,1,14,6] },
    { "module": "synch", "line": 14, "column": 1, "endline": 14, "endcolumn": 6, "stmt": [14,1,14,6] },
    { "module": "synch", "line": 15, "column": 1, "endline": 15, "endcolumn": 3, "stmt": [15,1,15,37] },
    { "module": "synch", "line": 15, "column": 1, "endline": 15, "endcolumn": 37, "stmt": [15,1,15,37] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 17, "column": 20, "endline": 17, "endcolumn": 20, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 19, "endline": 17, "endcolumn": 20, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 25, "endline": 17, "endcolumn": 27, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 25, "endline": 17, "endcolumn": 27, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 19, "endline": 17, "endcolumn": 27, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 17, "column": 9, "endline": 17, "endcolumn": 17, "stmt": [17,9,17,27] },
    { "module": "synch", "line": 18, "column": 12, "endline": 18, "endcolumn": 18, "stmt": [18,9,18,19] },
    { "module": "synch", "line": 18, "column": 9, "endline": 18, "endcolumn": 10, "stmt": [18,9,18,19] },
    { "module": "synch", "line": 19, "column": 14, "endline": 19, "endcolumn": 14, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 14, "endline": 19, "endcolumn": 14, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 18, "endline": 19, "endcolumn": 20, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 18, "endline": 19, "endcolumn": 20, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 19, "column": 13, "endline": 19, "endcolumn": 16, "stmt": [19,13,19,20] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 16, "column": 5, "endline": 16, "endcolumn": 15, "stmt": [16,5,16,15] },
    { "module": "synch", "line": 20, "column": 1, "endline": 20, "endcolumn": 6, "stmt": [20,1,20,6] },
    { "module": "synch", "line": 20, "column": 1, "endline": 20, "endcolumn": 6, "stmt": [20,1,20,6] },
    { "module": "synch", "line": 21, "column": 1, "endline": 21, "endcolumn": 3, "stmt": [21,1,21,34] },
    { "module": "synch", "line": 21, "column": 1, "endline": 21, "endcolumn": 34, "stmt": [21,1,21,34] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 12, "endline": 22, "endcolumn": 18, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 29, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 32, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 25, "endline": 22, "endcolumn": 35, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 12, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 10, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 22, "column": 5, "endline": 22, "endcolumn": 37, "stmt": [22,5,22,37] },
    { "module": "synch", "line": 23, "column": 12, "endline": 23, "endcolumn": 18, "stmt": [23,5,23,18] },
    { "module": "synch", "line": 23, "column": 12, "endline": 23, "endcolumn": 18, "stmt": [23,5,23,18] },
    { "module": "synch", "line": 23, "column": 5, "endline": 23, "endcolumn": 10, "stmt": [23,5,23,18] },
    { "module": "synch", "line": 24, "column": 1, "endline": 24, "endcolumn": 6, "stmt": [24,1,24,6] },
    { "module": "synch", "line": 24, "column": 1, "endline": 24, "endcolumn": 6, "stmt": [24,1,24,6] },
    { "module": "synch", "line": 25, "column": 1, "endline": 25, "endcolumn": 3, "stmt": [25,1,25,26] },
    { "module": "synch", "line": 25, "column": 1, "endline": 25, "endcolumn": 26, "stmt": [25,1,25,26] },
    { "module": "synch", "line": 26, "column": 14, "endline": 26, "endcolumn": 18, "stmt": [26,5,26,18] },
    { "module": "synch", "line": 26, "column": 14, "endline": 26, "endcolumn": 18, "stmt": [26,5,26,18] },
    { "module": "synch", "line": 26, "column": 5, "endline": 26, "endcolumn": 12, "stmt": [26,5,26,18] },
    { "module": "synch", "line": 27, "column": 1, "endline": 27, "endcolumn": 6, "stmt": [27,1,27,6] },
    { "module": "synch", "line": 28, "column": 1, "endline": 28, "endcolumn": 3, "stmt": [28,1,28,34] },
    { "module": "synch", "line": 28, "column": 1, "endline": 28, "endcolumn": 34, "stmt": [28,1,28,34] },
    { "module": "synch", "line": 29, "column": 15, "endline": 29, "endcolumn": 18, "stmt": [29,5,29,18] },
    { "module": "synch", "line": 29, "column": 15, "endline": 29, "endcolumn": 18, "stmt": [29,5,29,18] },
    { "module": "synch", "line": 29, "column": 15, "endline": 29, "endcolumn": 18, "stmt": [29,5,29,18] },
    { "module": "synch", "line": 29, "column": 14, "endline": 29, "endcolumn": 18, "stmt": [29,5,29,18] },
    { "module": "synch", "line": 29, "column": 5, "endline": 29, "endcolumn": 12, "stmt": [29,5,29,18] },
    { "module": "synch", "line": 30, "column": 5, "endline": 30, "endcolumn": 10, "stmt": [30,5,30,10] },
    { "module": "synch", "line": 31, "column": 1, "endline": 31, "endcolumn": 3, "stmt": [31,1,31,30] },
    { "module": "synch", "line": 31, "column": 1, "endline": 31, "endcolumn": 30, "stmt": [31,1,31,30] },
    { "module": "synch", "line": 32, "column": 15, "endline": 32, "endcolumn": 18, "stmt": [32,5,32,18] },
    { "module": "synch", "line": 32, "column": 15, "endline": 32, "endcolumn": 18, "stmt": [32,5,32,18] },
    { "module": "synch", "line": 32, "column": 15, "endline": 32, "endcolumn": 18, "stmt": [32,5,32,18] },
    { "module": "synch", "line": 32, "column": 14, "endline": 32, "endcolumn": 18, "stmt": [32,5,32,18] },
    { "module": "synch", "line": 32, "column": 5, "endline": 32, "endcolumn": 12, "stmt": [32,5,32,18] },
    { "module": "synch", "line": 33, "column": 1, "endline": 33, "endcolumn": 6, "stmt": [33,1,33,6] },
    { "module": "synch", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,18] },
    { "module": "synch", "line": 34, "column": 1, "endline": 34, "endcolumn": 18, "stmt": [34,1,34,18] },
    { "module": "synch", "line": 35, "column": 16, "endline": 37, "endcolumn": 6, "stmt": [35,16,37,6] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 16, "stmt": [35,16,37,6] },
    { "module": "synch", "line": 35, "column": 26, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 25, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 21, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 29, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 29, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 36, "column": 10, "endline": 36, "endcolumn": 13, "stmt": [36,9,36,20] },
    { "module": "synch", "line": 36, "column": 10, "endline": 36, "endcolumn": 13, "stmt": [36,9,36,20] },
    { "module": "synch", "line": 36, "column": 17, "endline": 36, "endcolumn": 20, "stmt": [36,9,36,20] },
    { "module": "synch", "line": 36, "column": 9, "endline": 36, "endcolumn": 15, "stmt": [36,9,36,20] },
    { "module": "synch", "line": 35, "column": 16, "endline": 35, "endcolumn": 29, "stmt": [35,16,35,29] },
    { "module": "synch", "line": 37, "column": 1, "endline": 37, "endcolumn": 6, "stmt": [37,1,37,6] },
    { "module": "synch", "line": 38, "column": 1, "endline": 38, "endcolumn": 3, "stmt": [38,1,38,18] },
    { "module": "synch", "line": 38, "column": 1, "endline": 38, "endcolumn": 18, "stmt": [38,1,38,18] },
    { "module": "synch", "line": 39, "column": 5, "endline": 39, "endcolumn": 15, "stmt": [39,5,39,15] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 49, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 49, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 40, "column": 17, "endline": 40, "endcolumn": 20, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 40, "column": 16, "endline": 40, "endcolumn": 20, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 40, "column": 23, "endline": 40, "endcolumn": 49, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 14, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 49, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 40, "column": 9, "endline": 40, "endcolumn": 49, "stmt": [40,9,40,49] },
    { "module": "synch", "line": 41, "column": 10, "endline": 41, "endcolumn": 13, "stmt": [41,9,41,21] },
    { "module": "synch", "line": 41, "column": 10, "endline": 41, "endcolumn": 13, "stmt": [41,9,41,21] },
    { "module": "synch", "line": 41, "column": 17, "endline": 41, "endcolumn": 21, "stmt": [41,9,41,21] },
    { "module": "synch", "line": 41, "column": 9, "endline": 41, "endcolumn": 15, "stmt": [41,9,41,21] },
    { "module": "synch", "line": 39, "column": 5, "endline": 39, "endcolumn": 15, "stmt": [39,5,39,15] },
    { "module": "synch", "line": 42, "column": 1, "endline": 42, "endcolumn": 6, "stmt": [42,1,42,6] },
    { "module": "synch", "line": 43, "column": 1, "endline": 43, "endcolumn": 3, "stmt": [43,1,43,31] },
    { "module": "synch", "line": 43, "column": 1, "endline": 43, "endcolumn": 31, "stmt": [43,1,43,31] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 23, "stmt": [44,5,44,25] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 23, "stmt": [44,5,44,25] },
    { "module": "synch", "line": 44, "column": 24, "endline": 44, "endcolumn": 25, "stmt": [44,5,44,25] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 25, "stmt": [44,5,44,25] },
    { "module": "synch", "line": 44, "column": 14, "endline": 44, "endcolumn": 25, "stmt": [44,5,44,25] },
    { "module": "synch", "line": 44, "column": 5, "endline": 44, "endcolumn": 12, "stmt": [44,5,44,25] },
    { "module": "synch", "line": 45, "column": 1, "endline": 45, "endcolumn": 6, "stmt": [45,1,45,6] },
    { "module": "synch", "line": 46, "column": 1, "endline": 46, "endcolumn": 3, "stmt": [46,1,46,16] },
    { "module": "synch", "line": 46, "column": 1, "endline": 46, "endcolumn": 16, "stmt": [46,1,46,16] },
    { "module": "synch", "line": 47, "column": 15, "endline": 47, "endcolumn": 15, "stmt": [47,5,47,15] },
    { "module": "synch", "line": 47, "column": 5, "endline": 47, "endcolumn": 15, "stmt": [47,5,47,15] },
    { "module": "synch", "line": 48, "column": 23, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 23, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 19, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 19, "endline": 48, "endcolumn": 24, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 48, "column": 5, "endline": 48, "endcolumn": 17, "stmt": [48,5,48,24] },
    { "module": "synch", "line": 49, "column": 9, "endline": 49, "endcolumn": 19, "stmt": [49,9,49,19] },
    { "module": "synch", "line": 50, "column": 19, "endline": 50, "endcolumn": 35, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 37, "endline": 50, "endcolumn": 43, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 38, "endline": 50, "endcolumn": 38, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 37, "endline": 50, "endcolumn": 38, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 37, "endline": 50, "endcolumn": 43, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 41, "endline": 50, "endcolumn": 43, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 37, "endline": 50, "endcolumn": 43, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 19, "endline": 50, "endcolumn": 44, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 19, "endline": 50, "endcolumn": 44, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 50, "column": 13, "endline": 50, "endcolumn": 17, "stmt": [50,13,50,44] },
    { "module": "synch", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 18, "endline": 51, "endcolumn": 25, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 27, "endline": 51, "endcolumn": 33, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 28, "endline": 51, "endcolumn": 28, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 27, "endline": 51, "endcolumn": 28, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 27, "endline": 51, "endcolumn": 33, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 31, "endline": 51, "endcolumn": 33, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 27, "endline": 51, "endcolumn": 33, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 18, "endline": 51, "endcolumn": 34, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 18, "endline": 51, "endcolumn": 34, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 51, "column": 13, "endline": 51, "endcolumn": 16, "stmt": [51,13,51,34] },
    { "module": "synch", "line": 52, "column": 14, "endline": 52, "endcolumn": 15, "stmt": [52,13,52,23] },
    { "module": "synch", "line": 52, "column": 19, "endline": 52, "endcolumn": 23, "stmt": [52,13,52,23] },
    { "module": "synch", "line": 52, "column": 13, "endline": 52, "endcolumn": 17, "stmt": [52,13,52,23] },
    { "module": "synch", "line": 49, "column": 9, "endline": 49, "endcolumn": 19, "stmt": [49,9,49,19] },
    { "module": "synch", "line": 53, "column": 20, "endline": 55, "endcolumn": 6, "stmt": [53,20,55,6] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 20, "stmt": [53,20,55,6] },
    { "module": "synch", "line": 53, "column": 31, "endline": 53, "endcolumn": 32, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 30, "endline": 53, "endcolumn": 32, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 26, "endline": 53, "endcolumn": 32, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 26, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 39, "endline": 53, "endcolumn": 55, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 58, "endline": 53, "endcolumn": 58, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 58, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 61, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 57, "endline": 53, "endcolumn": 63, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 39, "endline": 53, "endcolumn": 64, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 39, "endline": 53, "endcolumn": 64, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 69, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 39, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 35, "endline": 53, "endcolumn": 37, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 26, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 71, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 71, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 71, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 71, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 71, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 54, "column": 14, "endline": 54, "endcolumn": 15, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 54, "column": 14, "endline": 54, "endcolumn": 15, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 54, "column": 19, "endline": 54, "endcolumn": 22, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 54, "column": 13, "endline": 54, "endcolumn": 17, "stmt": [54,13,54,22] },
    { "module": "synch", "line": 53, "column": 20, "endline": 53, "endcolumn": 71, "stmt": [53,20,53,71] },
    { "module": "synch", "line": 55, "column": 1, "endline": 55, "endcolumn": 6, "stmt": [55,1,55,6] },
    { "module": "synch", "line": 56, "column": 1, "endline": 56, "endcolumn": 3, "stmt": [56,1,56,14] },
    { "module": "synch", "line": 56, "column": 1, "endline": 56, "endcolumn": 14, "stmt": [56,1,56,14] },
    { "module": "synch", "line": 57, "column": 16, "endline": 59, "endcolumn": 6, "stmt": [57,16,59,6] },
    { "module": "synch", "line": 57, "column": 20, "endline": 57, "endcolumn": 20, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 19, "endline": 57, "endcolumn": 20, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 25, "endline": 57, "endcolumn": 34, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 35, "endline": 57, "endcolumn": 36, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 25, "endline": 57, "endcolumn": 36, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 25, "endline": 57, "endcolumn": 36, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 19, "endline": 57, "endcolumn": 36, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 16, "endline": 57, "endcolumn": 17, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 58, "column": 10, "endline": 58, "endcolumn": 10, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 14, "endline": 58, "endcolumn": 24, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 26, "endline": 58, "endcolumn": 45, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 27, "endline": 58, "endcolumn": 27, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 26, "endline": 58, "endcolumn": 27, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 26, "endline": 58, "endcolumn": 45, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 30, "endline": 58, "endcolumn": 41, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 44, "endline": 58, "endcolumn": 44, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 44, "endline": 58, "endcolumn": 44, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 43, "endline": 58, "endcolumn": 44, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 30, "endline": 58, "endcolumn": 45, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 30, "endline": 58, "endcolumn": 45, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 26, "endline": 58, "endcolumn": 45, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 14, "endline": 58, "endcolumn": 46, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 14, "endline": 58, "endcolumn": 46, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 58, "column": 9, "endline": 58, "endcolumn": 12, "stmt": [58,9,58,46] },
    { "module": "synch", "line": 57, "column": 16, "endline": 57, "endcolumn": 37, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 57, "column": 16, "endline": 57, "endcolumn": 37, "stmt": [57,16,57,37] },
    { "module": "synch", "line": 59, "column": 1, "endline": 59, "endcolumn": 6, "stmt": [59,1,59,6] },
    { "module": "synch", "line": 60, "column": 1, "endline": 60, "endcolumn": 3, "stmt": [60,1,60,18] },
    { "module": "synch", "line": 60, "column": 1, "endline": 60, "endcolumn": 18, "stmt": [60,1,60,18] },
    { "module": "synch", "line": 61, "column": 16, "endline": 61, "endcolumn": 32, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 17, "endline": 61, "endcolumn": 17, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 17, "endline": 61, "endcolumn": 17, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 21, "endline": 61, "endcolumn": 30, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 31, "endline": 61, "endcolumn": 32, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 21, "endline": 61, "endcolumn": 32, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 21, "endline": 61, "endcolumn": 32, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 16, "endline": 61, "endcolumn": 19, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 61, "column": 16, "endline": 61, "endcolumn": 32, "stmt": [61,16,61,32] },
    { "module": "synch", "line": 63, "column": 13, "endline": 63, "endcolumn": 18, "stmt": [63,13,63,18] },
    { "module": "synch", "line": 64, "column": 1, "endline": 64, "endcolumn": 3, "stmt": [64,1,64,17] },
    { "module": "synch", "line": 64, "column": 1, "endline": 64, "endcolumn": 17, "stmt": [64,1,64,17] },
    { "module": "synch", "line": 65, "column": 16, "endline": 65, "endcolumn": 32, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 17, "endline": 65, "endcolumn": 17, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 17, "endline": 65, "endcolumn": 17, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 21, "endline": 65, "endcolumn": 30, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 31, "endline": 65, "endcolumn": 32, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 21, "endline": 65, "endcolumn": 32, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 21, "endline": 65, "endcolumn": 32, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 16, "endline": 65, "endcolumn": 19, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 65, "column": 16, "endline": 65, "endcolumn": 32, "stmt": [65,16,65,32] },
    { "module": "synch", "line": 66, "column": 1, "endline": 66, "endcolumn": 6, "stmt": [66,1,66,6] },
    { "module": "synch", "line": 67, "column": 1, "endline": 67, "endcolumn": 3, "stmt": [67,1,67,34] },
    { "module": "synch", "line": 67, "column": 1, "endline": 67, "endcolumn": 34, "stmt": [67,1,67,34] },
    { "module": "synch", "line": 68, "column": 14, "endline": 68, "endcolumn": 16, "stmt": [68,5,68,16] },
    { "module": "synch", "line": 68, "column": 14, "endline": 68, "endcolumn": 16, "stmt": [68,5,68,16] },
    { "module": "synch", "line": 68, "column": 14, "endline": 68, "endcolumn": 16, "stmt": [68,5,68,16] },
    { "module": "synch", "line": 68, "column": 5, "endline": 68, "endcolumn": 12, "stmt": [68,5,68,16] },
    { "module": "synch", "line": 69, "column": 1, "endline": 69, "endcolumn": 6, "stmt": [69,1,69,6] },
    { "module": "synch", "line": 70, "column": 1, "endline": 70, "endcolumn": 3, "stmt": [70,1,70,12] },
    { "module": "synch", "line": 70, "column": 1, "endline": 70, "endcolumn": 12, "stmt": [70,1,70,12] },
    { "module": "synch", "line": 71, "column": 16, "endline": 73, "endcolumn": 6, "stmt": [71,16,73,6] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 16, "stmt": [71,16,73,6] },
    { "module": "synch", "line": 71, "column": 22, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 21, "endline": 71, "endcolumn": 25, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 29, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 21, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 29, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 29, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 72, "column": 10, "endline": 72, "endcolumn": 13, "stmt": [72,9,72,18] },
    { "module": "synch", "line": 72, "column": 10, "endline": 72, "endcolumn": 13, "stmt": [72,9,72,18] },
    { "module": "synch", "line": 72, "column": 9, "endline": 72, "endcolumn": 18, "stmt": [72,9,72,18] },
    { "module": "synch", "line": 72, "column": 9, "endline": 72, "endcolumn": 18, "stmt": [72,9,72,18] },
    { "module": "synch", "line": 72, "column": 18, "endline": 72, "endcolumn": 18, "stmt": [72,9,72,18] },
    { "module": "synch", "line": 72, "column": 9, "endline": 72, "endcolumn": 18, "stmt": [72,9,72,18] },
    { "module": "synch", "line": 72, "column": 9, "endline": 72, "endcolumn": 16, "stmt": [72,9,72,18] },
    { "module": "synch", "line": 71, "column": 16, "endline": 71, "endcolumn": 29, "stmt": [71,16,71,29] },
    { "module": "synch", "line": 73, "column": 1, "endline": 73, "endcolumn": 6, "stmt": [73,1,73,6] },
    { "module": "synch", "line": 74, "column": 1, "endline": 74, "endcolumn": 3, "stmt": [74,1,74,12] },
    { "module": "synch", "line": 74, "column": 1, "endline": 74, "endcolumn": 12, "stmt": [74,1,74,12] },
    { "module": "synch", "line": 75, "column": 16, "endline": 75, "endcolumn": 25, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 17, "endline": 75, "endcolumn": 20, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 17, "endline": 75, "endcolumn": 20, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 16, "endline": 75, "endcolumn": 25, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 16, "endline": 75, "endcolumn": 25, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 25, "endline": 75, "endcolumn": 25, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 16, "endline": 75, "endcolumn": 25, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 16, "endline": 75, "endcolumn": 23, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 75, "column": 16, "endline": 75, "endcolumn": 25, "stmt": [75,16,75,25] },
    { "module": "synch", "line": 76, "column": 5, "endline": 76, "endcolumn": 10, "stmt": [76,5,76,10] },
    { "module": "synch", "line": 77, "column": 1, "endline": 77, "endcolumn": 3, "stmt": [77,1,77,27] },
    { "module": "synch", "line": 77, "column": 1, "endline": 77, "endcolumn": 27, "stmt": [77,1,77,27] },
    { "module": "synch", "line": 78, "column": 14, "endline": 78, "endcolumn": 15, "stmt": [78,5,78,15] },
    { "module": "synch", "line": 78, "column": 14, "endline": 78, "endcolumn": 15, "stmt": [78,5,78,15] },
    { "module": "synch", "line": 78, "column": 5, "endline": 78, "endcolumn": 12, "stmt": [78,5,78,15] },
    { "module": "synch", "line": 79, "column": 1, "endline": 79, "endcolumn": 6, "stmt": [79,1,79,6] },
    { "module": "synch", "line": 80, "column": 1, "endline": 80, "endcolumn": 3, "stmt": [80,1,80,26] },
    { "module": "synch", "line": 80, "column": 1, "endline": 80, "endcolumn": 26, "stmt": [80,1,80,26] },
    { "module": "synch", "line": 81, "column": 16, "endline": 84, "endcolumn": 6, "stmt": [81,16,84,6] },
    { "module": "synch", "line": 81, "column": 16, "endline": 84, "endcolumn": 6, "stmt": [81,16,84,6] },
    { "module": "synch", "line": 81, "column": 16, "endline": 81, "endcolumn": 16, "stmt": [81,16,84,6] },
    { "module": "synch", "line": 81, "column": 22, "endline": 81, "endcolumn": 22, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 21, "endline": 81, "endcolumn": 22, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 27, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 21, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 16, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 28, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 16, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 16, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 28, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 81, "column": 16, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 82, "column": 18, "endline": 82, "endcolumn": 27, "stmt": [82,9,82,31] },
    { "module": "synch", "line": 82, "column": 30, "endline": 82, "endcolumn": 30, "stmt": [82,9,82,31] },
    { "module": "synch", "line": 82, "column": 29, "endline": 82, "endcolumn": 30, "stmt": [82,9,82,31] },
    { "module": "synch", "line": 82, "column": 18, "endline": 82, "endcolumn": 31, "stmt": [82,9,82,31] },
    { "module": "synch", "line": 82, "column": 18, "endline": 82, "endcolumn": 31, "stmt": [82,9,82,31] },
    { "module": "synch", "line": 82, "column": 9, "endline": 82, "endcolumn": 16, "stmt": [82,9,82,31] },
    { "module": "synch", "line": 83, "column": 10, "endline": 83, "endcolumn": 10, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 83, "column": 14, "endline": 83, "endcolumn": 23, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 83, "column": 26, "endline": 83, "endcolumn": 26, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 83, "column": 26, "endline": 83, "endcolumn": 26, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 83, "column": 25, "endline": 83, "endcolumn": 26, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 83, "column": 14, "endline": 83, "endcolumn": 27, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 83, "column": 14, "endline": 83, "endcolumn": 27, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 83, "column": 9, "endline": 83, "endcolumn": 12, "stmt": [83,9,83,27] },
    { "module": "synch", "line": 81, "column": 16, "endline": 81, "endcolumn": 28, "stmt": [81,16,81,28] },
    { "module": "synch", "line": 84, "column": 1, "endline": 84, "endcolumn": 6, "stmt": [84,1,84,6] },
    { "module": "synch", "line": 85, "column": 1, "endline": 85, "endcolumn": 3, "stmt": [85,1,85,17] },
    { "module": "synch", "line": 85, "column": 1, "endline": 85, "endcolumn": 17, "stmt": [85,1,85,17] },
    { "module": "synch", "line": 86, "column": 16, "endline": 86, "endcolumn": 42, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 17, "endline": 86, "endcolumn": 17, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 21, "endline": 86, "endcolumn": 32, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 34, "endline": 86, "endcolumn": 41, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 35, "endline": 86, "endcolumn": 35, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 35, "endline": 86, "endcolumn": 35, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 34, "endline": 86, "endcolumn": 35, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 34, "endline": 86, "endcolumn": 41, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 38, "endline": 86, "endcolumn": 41, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 38, "endline": 86, "endcolumn": 41, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 34, "endline": 86, "endcolumn": 41, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 21, "endline": 86, "endcolumn": 42, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 21, "endline": 86, "endcolumn": 42, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 16, "endline": 86, "endcolumn": 19, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 86, "column": 16, "endline": 86, "endcolumn": 42, "stmt": [86,16,86,42] },
    { "module": "synch", "line": 87, "column": 1, "endline": 87, "endcolumn": 6, "stmt": [87,1,87,6] },
    { "module": "alloc", "line": 1, "column": 8, "endline": 1, "endcolumn": 10, "stmt": [1,1,1,10] },
    { "module": "alloc", "line": 1, "column": 1, "endline": 1, "endcolumn": 6, "stmt": [1,1,1,10] },
    { "module": "alloc", "line": 2, "column": 8, "endline": 2, "endcolumn": 8, "stmt": [2,1,2,8] },
    { "module": "alloc", "line": 2, "column": 1, "endline": 2, "endcolumn": 6, "stmt": [2,1,2,8] },
    { "module": "alloc", "line": 6, "column": 1, "endline": 6, "endcolumn": 3, "stmt": [6,1,6,27] },
    { "module": "alloc", "line": 6, "column": 1, "endline": 6, "endcolumn": 27, "stmt": [6,1,6,27] },
    { "module": "alloc", "line": 7, "column": 5, "endline": 7, "endcolumn": 15, "stmt": [7,5,7,15] },
    { "module": "alloc", "line": 8, "column": 9, "endline": 8, "endcolumn": 12, "stmt": [8,9,8,22] },
    { "module": "alloc", "line": 8, "column": 14, "endline": 8, "endcolumn": 17, "stmt": [8,9,8,22] },
    { "module": "alloc", "line": 8, "column": 9, "endline": 8, "endcolumn": 18, "stmt": [8,9,8,22] },
    { "module": "alloc", "line": 8, "column": 22, "endline": 8, "endcolumn": 22, "stmt": [8,9,8,22] },
    { "module": "alloc", "line": 8, "column": 22, "endline": 8, "endcolumn": 22, "stmt": [8,9,8,22] },
    { "module": "alloc", "line": 8, "column": 9, "endline": 8, "endcolumn": 20, "stmt": [8,9,8,22] },
    { "module": "alloc", "line": 9, "column": 17, "endline": 9, "endcolumn": 20, "stmt": [9,9,9,26] },
    { "module": "alloc", "line": 9, "column": 22, "endline": 9, "endcolumn": 25, "stmt": [9,9,9,26] },
    { "module": "alloc", "line": 9, "column": 17, "endline": 9, "endcolumn": 26, "stmt": [9,9,9,26] },
    { "module": "alloc", "line": 9, "column": 9, "endline": 9, "endcolumn": 14, "stmt": [9,9,9,26] },
    { "module": "alloc", "line": 10, "column": 9, "endline": 10, "endcolumn": 17, "stmt": [10,9,10,17] },
    { "module": "alloc", "line": 10, "column": 17, "endline": 10, "endcolumn": 17, "stmt": [10,9,10,17] },
    { "module": "alloc", "line": 10, "column": 9, "endline": 10, "endcolumn": 17, "stmt": [10,9,10,17] },
    { "module": "alloc", "line": 10, "column": 9, "endline": 10, "endcolumn": 15, "stmt": [10,9,10,17] },
    { "module": "alloc", "line": 7, "column": 5, "endline": 7, "endcolumn": 15, "stmt": [7,5,7,15] },
    { "module": "alloc", "line": 12, "column": 69, "endline": 12, "endcolumn": 74, "stmt": [12,69,12,74] },
    { "module": "alloc", "line": 12, "column": 69, "endline": 12, "endcolumn": 74, "stmt": [12,69,12,74] },
    { "module": "alloc", "line": 13, "column": 1, "endline": 13, "endcolumn": 3, "stmt": [13,1,13,12] },
    { "module": "alloc", "line": 13, "column": 1, "endline": 13, "endcolumn": 12, "stmt": [13,1,13,12] },
    { "module": "alloc", "line": 14, "column": 5, "endline": 14, "endcolumn": 15, "stmt": [14,5,14,15] },
    { "module": "alloc", "line": 16, "column": 18, "endline": 16, "endcolumn": 18, "stmt": [16,13,16,18] },
    { "module": "alloc", "line": 16, "column": 18, "endline": 16, "endcolumn": 18, "stmt": [16,13,16,18] },
    { "module": "alloc", "line": 16, "column": 13, "endline": 16, "endcolumn": 18, "stmt": [16,13,16,18] },
    { "module": "alloc", "line": 14, "column": 5, "endline": 14, "endcolumn": 15, "stmt": [14,5,14,15] },
    { "module": "alloc", "line": 18, "column": 1, "endline": 18, "endcolumn": 6, "stmt": [18,1,18,6] },
    { "module": "alloc", "line": 19, "column": 1, "endline": 19, "endcolumn": 3, "stmt": [19,1,19,17] },
    { "module": "alloc", "line": 19, "column": 1, "endline": 19, "endcolumn": 17, "stmt": [19,1,19,17] },
    { "module": "alloc", "line": 20, "column": 5, "endline": 20, "endcolumn": 35, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 5, "endline": 20, "endcolumn": 35, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 12, "endline": 20, "endcolumn": 15, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 20, "endline": 20, "endcolumn": 22, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 12, "endline": 20, "endcolumn": 22, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 25, "endline": 20, "endcolumn": 35, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 5, "endline": 20, "endcolumn": 10, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 5, "endline": 20, "endcolumn": 35, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 20, "column": 5, "endline": 20, "endcolumn": 35, "stmt": [20,5,20,35] },
    { "module": "alloc", "line": 21, "column": 1, "endline": 21, "endcolumn": 6, "stmt": [21,1,21,6] },
    { "module": "disque", "line": 4, "column": 1, "endline": 4, "endcolumn": 3, "stmt": [4,1,4,23] },
    { "module": "disque", "line": 4, "column": 1, "endline": 4, "endcolumn": 23, "stmt": [4,1,4,23] },
    { "module": "disque", "line": 5, "column": 8, "endline": 5, "endcolumn": 36, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 8, "endline": 5, "endcolumn": 15, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 18, "endline": 5, "endcolumn": 21, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 8, "endline": 5, "endcolumn": 36, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 24, "endline": 5, "endcolumn": 28, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 35, "endline": 5, "endcolumn": 36, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 31, "endline": 5, "endcolumn": 36, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 8, "endline": 5, "endcolumn": 36, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 5, "column": 3, "endline": 5, "endcolumn": 5, "stmt": [5,3,5,37] },
    { "module": "disque", "line": 6, "column": 1, "endline": 6, "endcolumn": 6, "stmt": [6,1,6,6] },
    { "module": "disque", "line": 6, "column": 1, "endline": 6, "endcolumn": 6, "stmt": [6,1,6,6] },
    { "module": "disque", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,17] },
    { "module": "disque", "line": 7, "column": 1, "endline": 7, "endcolumn": 17, "stmt": [7,1,7,17] },
    { "module": "disque", "line": 8, "column": 22, "endline": 8, "endcolumn": 56, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 22, "endline": 8, "endcolumn": 27, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 30, "endline": 8, "endcolumn": 30, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 30, "endline": 8, "endcolumn": 30, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 22, "endline": 8, "endcolumn": 56, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 33, "endline": 8, "endcolumn": 37, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 40, "endline": 8, "endcolumn": 43, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 22, "endline": 8, "endcolumn": 56, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 46, "endline": 8, "endcolumn": 50, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 53, "endline": 8, "endcolumn": 56, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 22, "endline": 8, "endcolumn": 56, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 14, "endline": 8, "endcolumn": 58, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 8, "column": 3, "endline": 8, "endcolumn": 12, "stmt": [8,3,8,58] },
    { "module": "disque", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,23] },
    { "module": "disque", "line": 9, "column": 19, "endline": 9, "endcolumn": 22, "stmt": [9,5,9,23] },
    { "module": "disque", "line": 9, "column": 14, "endline": 9, "endcolumn": 22, "stmt": [9,5,9,23] },
    { "module": "disque", "line": 9, "column": 5, "endline": 9, "endcolumn": 23, "stmt": [9,5,9,23] },
    { "module": "disque", "line": 9, "column": 5, "endline": 9, "endcolumn": 23, "stmt": [9,5,9,23] },
    { "module": "disque", "line": 11, "column": 8, "endline": 11, "endcolumn": 8, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 11, "column": 11, "endline": 11, "endcolumn": 17, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 11, "column": 8, "endline": 11, "endcolumn": 17, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 11, "column": 8, "endline": 11, "endcolumn": 17, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 11, "column": 22, "endline": 11, "endcolumn": 25, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 11, "column": 8, "endline": 11, "endcolumn": 25, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 11, "column": 5, "endline": 11, "endcolumn": 6, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 12, "column": 7, "endline": 12, "endcolumn": 10, "stmt": [12,7,12,25] },
    { "module": "disque", "line": 12, "column": 15, "endline": 12, "endcolumn": 18, "stmt": [12,7,12,25] },
    { "module": "disque", "line": 12, "column": 7, "endline": 12, "endcolumn": 18, "stmt": [12,7,12,25] },
    { "module": "disque", "line": 12, "column": 22, "endline": 12, "endcolumn": 25, "stmt": [12,7,12,25] },
    { "module": "disque", "line": 12, "column": 7, "endline": 12, "endcolumn": 20, "stmt": [12,7,12,25] },
    { "module": "disque", "line": 13, "column": 7, "endline": 13, "endcolumn": 10, "stmt": [13,7,13,25] },
    { "module": "disque", "line": 13, "column": 15, "endline": 13, "endcolumn": 18, "stmt": [13,7,13,25] },
    { "module": "disque", "line": 13, "column": 7, "endline": 13, "endcolumn": 18, "stmt": [13,7,13,25] },
    { "module": "disque", "line": 13, "column": 22, "endline": 13, "endcolumn": 25, "stmt": [13,7,13,25] },
    { "module": "disque", "line": 13, "column": 7, "endline": 13, "endcolumn": 20, "stmt": [13,7,13,25] },
    { "module": "disque", "line": 14, "column": 7, "endline": 14, "endcolumn": 7, "stmt": [14,7,14,23] },
    { "module": "disque", "line": 14, "column": 10, "endline": 14, "endcolumn": 16, "stmt": [14,7,14,23] },
    { "module": "disque", "line": 14, "column": 7, "endline": 14, "endcolumn": 16, "stmt": [14,7,14,23] },
    { "module": "disque", "line": 14, "column": 20, "endline": 14, "endcolumn": 23, "stmt": [14,7,14,23] },
    { "module": "disque", "line": 14, "column": 20, "endline": 14, "endcolumn": 23, "stmt": [14,7,14,23] },
    { "module": "disque", "line": 14, "column": 7, "endline": 14, "endcolumn": 18, "stmt": [14,7,14,23] },
    { "module": "disque", "line": 11, "column": 5, "endline": 11, "endcolumn": 26, "stmt": [11,5,11,26] },
    { "module": "disque", "line": 16, "column": 7, "endline": 16, "endcolumn": 10, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 15, "endline": 16, "endcolumn": 18, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 7, "endline": 16, "endcolumn": 18, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 22, "endline": 16, "endcolumn": 22, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 27, "endline": 16, "endcolumn": 33, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 22, "endline": 16, "endcolumn": 33, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 22, "endline": 16, "endcolumn": 33, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 38, "endline": 16, "endcolumn": 41, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 22, "endline": 16, "endcolumn": 41, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 22, "endline": 16, "endcolumn": 41, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 16, "column": 7, "endline": 16, "endcolumn": 20, "stmt": [16,7,16,41] },
    { "module": "disque", "line": 17, "column": 7, "endline": 17, "endcolumn": 10, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 17, "column": 15, "endline": 17, "endcolumn": 18, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 17, "column": 7, "endline": 17, "endcolumn": 18, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 17, "column": 22, "endline": 17, "endcolumn": 22, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 17, "column": 27, "endline": 17, "endcolumn": 33, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 17, "column": 22, "endline": 17, "endcolumn": 33, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 17, "column": 22, "endline": 17, "endcolumn": 33, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 17, "column": 7, "endline": 17, "endcolumn": 20, "stmt": [17,7,17,33] },
    { "module": "disque", "line": 18, "column": 7, "endline": 18, "endcolumn": 7, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 12, "endline": 18, "endcolumn": 18, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 7, "endline": 18, "endcolumn": 18, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 7, "endline": 18, "endcolumn": 18, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 23, "endline": 18, "endcolumn": 26, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 7, "endline": 18, "endcolumn": 26, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 7, "endline": 18, "endcolumn": 26, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 31, "endline": 18, "endcolumn": 34, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 7, "endline": 18, "endcolumn": 34, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 38, "endline": 18, "endcolumn": 41, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 18, "column": 7, "endline": 18, "endcolumn": 36, "stmt": [18,7,18,41] },
    { "module": "disque", "line": 19, "column": 7, "endline": 19, "endcolumn": 7, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 12, "endline": 19, "endcolumn": 18, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 7, "endline": 19, "endcolumn": 18, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 7, "endline": 19, "endcolumn": 18, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 23, "endline": 19, "endcolumn": 26, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 7, "endline": 19, "endcolumn": 26, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 30, "endline": 19, "endcolumn": 33, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 30, "endline": 19, "endcolumn": 33, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 19, "column": 7, "endline": 19, "endcolumn": 28, "stmt": [19,7,19,33] },
    { "module": "disque", "line": 21, "column": 14, "endline": 21, "endcolumn": 14, "stmt": [21,5,21,23] },
    { "module": "disque", "line": 21, "column": 14, "endline": 21, "endcolumn": 14, "stmt": [21,5,21,23] },
    { "module": "disque", "line": 21, "column": 19, "endline": 21, "endcolumn": 22, "stmt": [21,5,21,23] },
    { "module": "disque", "line": 21, "column": 14, "endline": 21, "endcolumn": 22, "stmt": [21,5,21,23] },
    { "module": "disque", "line": 21, "column": 5, "endline": 21, "endcolumn": 23, "stmt": [21,5,21,23] },
    { "module": "disque", "line": 21, "column": 5, "endline": 21, "endcolumn": 23, "stmt": [21,5,21,23] },
    { "module": "disque", "line": 22, "column": 1, "endline": 22, "endcolumn": 6, "stmt": [22,1,22,6] },
    { "module": "disque", "line": 23, "column": 1, "endline": 23, "endcolumn": 3, "stmt": [23,1,23,32] },
    { "module": "disque", "line": 23, "column": 1, "endline": 23, "endcolumn": 32, "stmt": [23,1,23,32] },
    { "module": "disque", "line": 24, "column": 14, "endline": 24, "endcolumn": 14, "stmt": [24,5,24,23] },
    { "module": "disque", "line": 24, "column": 19, "endline": 24, "endcolumn": 22, "stmt": [24,5,24,23] },
    { "module": "disque", "line": 24, "column": 14, "endline": 24, "endcolumn": 22, "stmt": [24,5,24,23] },
    { "module": "disque", "line": 24, "column": 5, "endline": 24, "endcolumn": 23, "stmt": [24,5,24,23] },
    { "module": "disque", "line": 24, "column": 5, "endline": 24, "endcolumn": 23, "stmt": [24,5,24,23] },
    { "module": "disque", "line": 25, "column": 17, "endline": 25, "endcolumn": 20, "stmt": [25,5,25,20] },
    { "module": "disque", "line": 25, "column": 5, "endline": 25, "endcolumn": 15, "stmt": [25,5,25,20] },
    { "module": "disque", "line": 27, "column": 8, "endline": 27, "endcolumn": 8, "stmt": [27,5,27,26] },
    { "module": "disque", "line": 27, "column": 11, "endline": 27, "endcolumn": 17, "stmt": [27,5,27,26] },
    { "module": "disque", "line": 27, "column": 8, "endline": 27, "endcolumn": 17, "stmt": [27,5,27,26] },
    { "module": "disque", "line": 27, "column": 8, "endline": 27, "endcolumn": 17, "stmt": [27,5,27,26] },
    { "module": "disque", "line": 27, "column": 22, "endline": 27, "endcolumn": 25, "stmt": [27,5,27,26] },
    { "module": "disque", "line": 27, "column": 8, "endline": 27, "endcolumn": 25, "stmt": [27,5,27,26] },
    { "module": "disque", "line": 27, "column": 5, "endline": 27, "endcolumn": 6, "stmt": [27,5,27,26] },
    { "module": "disque", "line": 28, "column": 19, "endline": 28, "endcolumn": 19, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 19, "endline": 28, "endcolumn": 19, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 24, "endline": 28, "endcolumn": 30, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 19, "endline": 28, "endcolumn": 30, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 19, "endline": 28, "endcolumn": 30, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 35, "endline": 28, "endcolumn": 39, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 19, "endline": 28, "endcolumn": 39, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 19, "endline": 28, "endcolumn": 39, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 28, "column": 7, "endline": 28, "endcolumn": 17, "stmt": [28,7,28,39] },
    { "module": "disque", "line": 29, "column": 10, "endline": 29, "endcolumn": 10, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 13, "endline": 29, "endcolumn": 19, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 10, "endline": 29, "endcolumn": 19, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 10, "endline": 29, "endcolumn": 19, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 22, "endline": 29, "endcolumn": 25, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 10, "endline": 29, "endcolumn": 25, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 10, "endline": 29, "endcolumn": 25, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 30, "endline": 29, "endcolumn": 30, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 33, "endline": 29, "endcolumn": 39, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 30, "endline": 29, "endcolumn": 39, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 30, "endline": 29, "endcolumn": 39, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 10, "endline": 29, "endcolumn": 39, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 29, "column": 7, "endline": 29, "endcolumn": 8, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 30, "column": 11, "endline": 30, "endcolumn": 11, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 30, "column": 14, "endline": 30, "endcolumn": 20, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 30, "column": 11, "endline": 30, "endcolumn": 20, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 30, "column": 11, "endline": 30, "endcolumn": 20, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 30, "column": 23, "endline": 30, "endcolumn": 26, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 30, "column": 11, "endline": 30, "endcolumn": 26, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 30, "column": 30, "endline": 30, "endcolumn": 33, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 30, "column": 11, "endline": 30, "endcolumn": 28, "stmt": [30,11,30,33] },
    { "module": "disque", "line": 31, "column": 11, "endline": 31, "endcolumn": 11, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 31, "column": 14, "endline": 31, "endcolumn": 20, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 31, "column": 11, "endline": 31, "endcolumn": 20, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 31, "column": 11, "endline": 31, "endcolumn": 20, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 31, "column": 23, "endline": 31, "endcolumn": 26, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 31, "column": 11, "endline": 31, "endcolumn": 26, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 31, "column": 30, "endline": 31, "endcolumn": 33, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 31, "column": 11, "endline": 31, "endcolumn": 28, "stmt": [31,11,31,33] },
    { "module": "disque", "line": 32, "column": 11, "endline": 32, "endcolumn": 11, "stmt": [32,11,32,25] },
    { "module": "disque", "line": 32, "column": 14, "endline": 32, "endcolumn": 20, "stmt": [32,11,32,25] },
    { "module": "disque", "line": 32, "column": 11, "endline": 32, "endcolumn": 20, "stmt": [32,11,32,25] },
    { "module": "disque", "line": 32, "column": 22, "endline": 32, "endcolumn": 25, "stmt": [32,11,32,25] },
    { "module": "disque", "line": 32, "column": 11, "endline": 32, "endcolumn": 21, "stmt": [32,11,32,25] },
    { "module": "disque", "line": 29, "column": 7, "endline": 29, "endcolumn": 40, "stmt": [29,7,29,40] },
    { "module": "disque", "line": 34, "column": 22, "endline": 34, "endcolumn": 22, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 34, "column": 27, "endline": 34, "endcolumn": 33, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 34, "column": 22, "endline": 34, "endcolumn": 33, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 34, "column": 22, "endline": 34, "endcolumn": 33, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 34, "column": 38, "endline": 34, "endcolumn": 41, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 34, "column": 22, "endline": 34, "endcolumn": 41, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 34, "column": 22, "endline": 34, "endcolumn": 41, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 34, "column": 11, "endline": 34, "endcolumn": 20, "stmt": [34,11,34,41] },
    { "module": "disque", "line": 35, "column": 22, "endline": 35, "endcolumn": 22, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 35, "column": 27, "endline": 35, "endcolumn": 33, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 35, "column": 22, "endline": 35, "endcolumn": 33, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 35, "column": 22, "endline": 35, "endcolumn": 33, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 35, "column": 38, "endline": 35, "endcolumn": 41, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 35, "column": 22, "endline": 35, "endcolumn": 41, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 35, "column": 22, "endline": 35, "endcolumn": 41, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 35, "column": 11, "endline": 35, "endcolumn": 20, "stmt": [35,11,35,41] },
    { "module": "disque", "line": 36, "column": 11, "endline": 36, "endcolumn": 18, "stmt": [36,11,36,37] },
    { "module": "disque", "line": 36, "column": 23, "endline": 36, "endcolumn": 26, "stmt": [36,11,36,37] },
    { "module": "disque", "line": 36, "column": 11, "endline": 36, "endcolumn": 26, "stmt": [36,11,36,37] },
    { "module": "disque", "line": 36, "column": 30, "endline": 36, "endcolumn": 37, "stmt": [36,11,36,37] },
    { "module": "disque", "line": 36, "column": 11, "endline": 36, "endcolumn": 28, "stmt": [36,11,36,37] },
    { "module": "disque", "line": 37, "column": 11, "endline": 37, "endcolumn": 18, "stmt": [37,11,37,37] },
    { "module": "disque", "line": 37, "column": 23, "endline": 37, "endcolumn": 26, "stmt": [37,11,37,37] },
    { "module": "disque", "line": 37, "column": 11, "endline": 37, "endcolumn": 26, "stmt": [37,11,37,37] },
    { "module": "disque", "line": 37, "column": 30, "endline": 37, "endcolumn": 37, "stmt": [37,11,37,37] },
    { "module": "disque", "line": 37, "column": 11, "endline": 37, "endcolumn": 28, "stmt": [37,11,37,37] },
    { "module": "disque", "line": 38, "column": 11, "endline": 38, "endcolumn": 11, "stmt": [38,11,38,33] },
    { "module": "disque", "line": 38, "column": 16, "endline": 38, "endcolumn": 22, "stmt": [38,11,38,33] },
    { "module": "disque", "line": 38, "column": 11, "endline": 38, "endcolumn": 22, "stmt": [38,11,38,33] },
    { "module": "disque", "line": 38, "column": 26, "endline": 38, "endcolumn": 33, "stmt": [38,11,38,33] },
    { "module": "disque", "line": 38, "column": 11, "endline": 38, "endcolumn": 24, "stmt": [38,11,38,33] },
    { "module": "disque", "line": 40, "column": 14, "endline": 40, "endcolumn": 14, "stmt": [40,5,40,23] },
    { "module": "disque", "line": 40, "column": 14, "endline": 40, "endcolumn": 14, "stmt": [40,5,40,23] },
    { "module": "disque", "line": 40, "column": 19, "endline": 40, "endcolumn": 22, "stmt": [40,5,40,23] },
    { "module": "disque", "line": 40, "column": 14, "endline": 40, "endcolumn": 22, "stmt": [40,5,40,23] },
    { "module": "disque", "line": 40, "column": 5, "endline": 40, "endcolumn": 23, "stmt": [40,5,40,23] },
    { "module": "disque", "line": 40, "column": 5, "endline": 40, "endcolumn": 23, "stmt": [40,5,40,23] },
    { "module": "disque", "line": 42, "column": 1, "endline": 42, "endcolumn": 6, "stmt": [42,1,42,6] },
    { "module": "disque", "line": 42, "column": 1, "endline": 42, "endcolumn": 6, "stmt": [42,1,42,6] },
    { "module": "disque", "line": 43, "column": 1, "endline": 43, "endcolumn": 3, "stmt": [43,1,43,30] },
    { "module": "disque", "line": 43, "column": 1, "endline": 43, "endcolumn": 30, "stmt": [43,1,43,30] },
    { "module": "disque", "line": 44, "column": 14, "endline": 44, "endcolumn": 14, "stmt": [44,5,44,23] },
    { "module": "disque", "line": 44, "column": 19, "endline": 44, "endcolumn": 22, "stmt": [44,5,44,23] },
    { "module": "disque", "line": 44, "column": 14, "endline": 44, "endcolumn": 22, "stmt": [44,5,44,23] },
    { "module": "disque", "line": 44, "column": 5, "endline": 44, "endcolumn": 23, "stmt": [44,5,44,23] },
    { "module": "disque", "line": 44, "column": 5, "endline": 44, "endcolumn": 23, "stmt": [44,5,44,23] },
    { "module": "disque", "line": 45, "column": 17, "endline": 45, "endcolumn": 20, "stmt": [45,5,45,20] },
    { "module": "disque", "line": 45, "column": 5, "endline": 45, "endcolumn": 15, "stmt": [45,5,45,20] },
    { "module": "disque", "line": 47, "column": 8, "endline": 47, "endcolumn": 8, "stmt": [47,5,47,28] },
    { "module": "disque", "line": 47, "column": 13, "endline": 47, "endcolumn": 19, "stmt": [47,5,47,28] },
    { "module": "disque", "line": 47, "column": 8, "endline": 47, "endcolumn": 19, "stmt": [47,5,47,28] },
    { "module": "disque", "line": 47, "column": 8, "endline": 47, "endcolumn": 19, "stmt": [47,5,47,28] },
    { "module": "disque", "line": 47, "column": 24, "endline": 47, "endcolumn": 27, "stmt": [47,5,47,28] },
    { "module": "disque", "line": 47, "column": 8, "endline": 47, "endcolumn": 27, "stmt": [47,5,47,28] },
    { "module": "disque", "line": 47, "column": 5, "endline": 47, "endcolumn": 6, "stmt": [47,5,47,28] },
    { "module": "disque", "line": 48, "column": 19, "endline": 48, "endcolumn": 19, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 19, "endline": 48, "endcolumn": 19, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 24, "endline": 48, "endcolumn": 30, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 19, "endline": 48, "endcolumn": 30, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 19, "endline": 48, "endcolumn": 30, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 35, "endline": 48, "endcolumn": 39, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 19, "endline": 48, "endcolumn": 39, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 19, "endline": 48, "endcolumn": 39, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 48, "column": 7, "endline": 48, "endcolumn": 17, "stmt": [48,7,48,39] },
    { "module": "disque", "line": 49, "column": 7, "endline": 49, "endcolumn": 7, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 11, "endline": 49, "endcolumn": 17, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 7, "endline": 49, "endcolumn": 17, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 21, "endline": 49, "endcolumn": 21, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 24, "endline": 49, "endcolumn": 30, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 21, "endline": 49, "endcolumn": 30, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 21, "endline": 49, "endcolumn": 30, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 34, "endline": 49, "endcolumn": 37, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 21, "endline": 49, "endcolumn": 37, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 21, "endline": 49, "endcolumn": 37, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 49, "column": 7, "endline": 49, "endcolumn": 19, "stmt": [49,7,49,37] },
    { "module": "disque", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,23] },
    { "module": "disque", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,23] },
    { "module": "disque", "line": 51, "column": 19, "endline": 51, "endcolumn": 22, "stmt": [51,5,51,23] },
    { "module": "disque", "line": 51, "column": 14, "endline": 51, "endcolumn": 22, "stmt": [51,5,51,23] },
    { "module": "disque", "line": 51, "column": 5, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,23] },
    { "module": "disque", "line": 51, "column": 5, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,23] },
    { "module": "disque", "line": 51, "column": 24, "endline": 51, "endcolumn": 29, "stmt": [51,24,51,29] },
    { "module": "disque", "line": 51, "column": 24, "endline": 51, "endcolumn": 29, "stmt": [51,24,51,29] },
    { "module": "__main__", "line": 7, "column": 5, "endline": 7, "endcolumn": 17, "stmt": [7,1,7,19] },
    { "module": "__main__", "line": 7, "column": 18, "endline": 7, "endcolumn": 19, "stmt": [7,1,7,19] },
    { "module": "__main__", "line": 7, "column": 5, "endline": 7, "endcolumn": 19, "stmt": [7,1,7,19] },
    { "module": "__main__", "line": 7, "column": 5, "endline": 7, "endcolumn": 19, "stmt": [7,1,7,19] },
    { "module": "__main__", "line": 7, "column": 1, "endline": 7, "endcolumn": 3, "stmt": [7,1,7,19] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 3, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 22, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 10, "column": 11, "endline": 10, "endcolumn": 32, "stmt": [10,5,10,33] },
    { "module": "__main__", "line": 10, "column": 11, "endline": 10, "endcolumn": 26, "stmt": [10,5,10,33] },
    { "module": "__main__", "line": 10, "column": 11, "endline": 10, "endcolumn": 32, "stmt": [10,5,10,33] },
    { "module": "__main__", "line": 10, "column": 29, "endline": 10, "endcolumn": 32, "stmt": [10,5,10,33] },
    { "module": "__main__", "line": 10, "column": 11, "endline": 10, "endcolumn": 32, "stmt": [10,5,10,33] },
    { "module": "__main__", "line": 10, "column": 5, "endline": 10, "endcolumn": 33, "stmt": [10,5,10,33] },
    { "module": "__main__", "line": 11, "column": 5, "endline": 11, "endcolumn": 17, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 19, "endline": 11, "endcolumn": 26, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 20, "endline": 11, "endcolumn": 20, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 19, "endline": 11, "endcolumn": 26, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 23, "endline": 11, "endcolumn": 26, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 19, "endline": 11, "endcolumn": 26, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 5, "endline": 11, "endcolumn": 27, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 5, "endline": 11, "endcolumn": 27, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 11, "column": 5, "endline": 11, "endcolumn": 27, "stmt": [11,5,11,27] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 32, "stmt": [12,5,12,33] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 26, "stmt": [12,5,12,33] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 32, "stmt": [12,5,12,33] },
    { "module": "__main__", "line": 12, "column": 29, "endline": 12, "endcolumn": 32, "stmt": [12,5,12,33] },
    { "module": "__main__", "line": 12, "column": 29, "endline": 12, "endcolumn": 32, "stmt": [12,5,12,33] },
    { "module": "__main__", "line": 12, "column": 11, "endline": 12, "endcolumn": 32, "stmt": [12,5,12,33] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 12, "endcolumn": 33, "stmt": [12,5,12,33] },
    { "module": "__main__", "line": 13, "column": 1, "endline": 13, "endcolumn": 6, "stmt": [13,1,13,6] },
    { "module": "__main__", "line": 14, "column": 1, "endline": 14, "endcolumn": 3, "stmt": [14,1,14,22] },
    { "module": "__main__", "line": 14, "column": 1, "endline": 14, "endcolumn": 22, "stmt": [14,1,14,22] },
    { "module": "__main__", "line": 15, "column": 11, "endline": 15, "endcolumn": 32, "stmt": [15,5,15,33] },
    { "module": "__main__", "line": 15, "column": 11, "endline": 15, "endcolumn": 26, "stmt": [15,5,15,33] },
    { "module": "__main__", "line": 15, "column": 11, "endline": 15, "endcolumn": 32, "stmt": [15,5,15,33] },
    { "module": "__main__", "line": 15, "column": 29, "endline": 15, "endcolumn": 32, "stmt": [15,5,15,33] },
    { "module": "__main__", "line": 15, "column": 11, "endline": 15, "endcolumn": 32, "stmt": [15,5,15,33] },
    { "module": "__main__", "line": 15, "column": 5, "endline": 15, "endcolumn": 33, "stmt": [15,5,15,33] },
    { "module": "__main__", "line": 16, "column": 13, "endline": 16, "endcolumn": 25, "stmt": [16,5,16,29] },
    { "module": "__main__", "line": 16, "column": 28, "endline": 16, "endcolumn": 28, "stmt": [16,5,16,29] },
    { "module": "__main__", "line": 16, "column": 13, "endline": 16, "endcolumn": 29, "stmt": [16,5,16,29] },
    { "module": "__main__", "line": 16, "column": 13, "endline": 16, "endcolumn": 29, "stmt": [16,5,16,29] },
    { "module": "__main__", "line": 16, "column": 5, "endline": 16, "endcolumn": 11, "stmt": [16,5,16,29] },
    { "module": "__main__", "line": 17, "column": 15, "endline": 17, "endcolumn": 38, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 15, "endline": 17, "endcolumn": 29, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 15, "endline": 17, "endcolumn": 38, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 32, "endline": 17, "endcolumn": 35, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 32, "endline": 17, "endcolumn": 35, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 15, "endline": 17, "endcolumn": 38, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 38, "endline": 17, "endcolumn": 38, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 38, "endline": 17, "endcolumn": 38, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 15, "endline": 17, "endcolumn": 38, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 17, "column": 9, "endline": 17, "endcolumn": 39, "stmt": [17,9,17,39] },
    { "module": "__main__", "line": 18, "column": 1, "endline": 18, "endcolumn": 6, "stmt": [18,1,18,6] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 3, "stmt": [19,1,19,20] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 20, "stmt": [19,1,19,20] },
    { "module": "__main__", "line": 20, "column": 11, "endline": 20, "endcolumn": 30, "stmt": [20,5,20,31] },
    { "module": "__main__", "line": 20, "column": 11, "endline": 20, "endcolumn": 24, "stmt": [20,5,20,31] },
    { "module": "__main__", "line": 20, "column": 11, "endline": 20, "endcolumn": 30, "stmt": [20,5,20,31] },
    { "module": "__main__", "line": 20, "column": 27, "endline": 20, "endcolumn": 30, "stmt": [20,5,20,31] },
    { "module": "__main__", "line": 20, "column": 11, "endline": 20, "endcolumn": 30, "stmt": [20,5,20,31] },
    { "module": "__main__", "line": 20, "column": 5, "endline": 20, "endcolumn": 31, "stmt": [20,5,20,31] },
    { "module": "__main__", "line": 21, "column": 13, "endline": 21, "endcolumn": 23, "stmt": [21,5,21,27] },
    { "module": "__main__", "line": 21, "column": 26, "endline": 21, "endcolumn": 26, "stmt": [21,5,21,27] },
    { "module": "__main__", "line": 21, "column": 13, "endline": 21, "endcolumn": 27, "stmt": [21,5,21,27] },
    { "module": "__main__", "line": 21, "column": 13, "endline": 21, "endcolumn": 27, "stmt": [21,5,21,27] },
    { "module": "__main__", "line": 21, "column": 5, "endline": 21, "endcolumn": 11, "stmt": [21,5,21,27] },
    { "module": "__main__", "line": 22, "column": 15, "endline": 22, "endcolumn": 34, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 15, "endline": 22, "endcolumn": 25, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 15, "endline": 22, "endcolumn": 34, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 28, "endline": 22, "endcolumn": 31, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 28, "endline": 22, "endcolumn": 31, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 15, "endline": 22, "endcolumn": 34, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 34, "endline": 22, "endcolumn": 34, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 34, "endline": 22, "endcolumn": 34, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 15, "endline": 22, "endcolumn": 34, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 22, "column": 9, "endline": 22, "endcolumn": 35, "stmt": [22,9,22,35] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 6, "stmt": [23,1,23,6] },
    { "module": "__main__", "line": 24, "column": 11, "endline": 24, "endcolumn": 11, "stmt": [24,1,24,22] },
    { "module": "__main__", "line": 24, "column": 14, "endline": 24, "endcolumn": 21, "stmt": [24,1,24,22] },
    { "module": "__main__", "line": 24, "column": 11, "endline": 24, "endcolumn": 21, "stmt": [24,1,24,22] },
    { "module": "__main__", "line": 24, "column": 1, "endline": 24, "endcolumn": 3, "stmt": [24,1,24,22] },
    { "module": "__main__", "line": 24, "column": 1, "endline": 24, "endcolumn": 3, "stmt": [24,1,24,22] },
    { "module": "__main__", "line": 24, "column": 1, "endline": 24, "endcolumn": 3, "stmt": [24,1,24,22] },
    { "module": "__main__", "line": 25, "column": 11, "endline": 25, "endcolumn": 21, "stmt": [25,5,25,24] },
    { "module": "__main__", "line": 25, "column": 23, "endline": 25, "endcolumn": 23, "stmt": [25,5,25,24] },
    { "module": "__main__", "line": 25, "column": 23, "endline": 25, "endcolumn": 23, "stmt": [25,5,25,24] },
    { "module": "__main__", "line": 25, "column": 11, "endline": 25, "endcolumn": 24, "stmt": [25,5,25,24] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 24, "stmt": [25,5,25,24] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 24, "stmt": [25,5,25,24] },
    { "module": "__main__", "line": 24, "column": 22, "endline": 24, "endcolumn": 22, "stmt": [24,1,24,22] },
    { "module": "__main__", "line": 29, "column": 30, "endline": 29, "endcolumn": 30, "stmt": [29,30,29,30] },
    { "module": "__main__", "line": 29, "column": 30, "endline": 29, "endcolumn": 30, "stmt": [29,30,29,30] },
    { "module": "__main__", "line": 29, "column": 30, "endline": 29, "endcolumn": 30, "stmt": [29,30,29,30] }
  ]
}

{
  "nstates": 196,
  "hvm": {
    "modules": {
        "__main__": {
            "file": "disque_btest.hny",
            "lines": [
                "import disque",
                "",
                "const N_INSERT = 1",
                "const N_DELETE = 1",
                "const N_NEXT = 1",
                "",
                "d = disque.Disque()",
                "",
                "def insert_test(self):",
                "    print(\"Testing insert\", self)",
                "    disque.insert(?d, self)",
                "    print(\"Done inserting\", self)",
                "",
                "def delete_test(self):",
                "    print(\"Testing delete\", self)",
                "    let v = disque.delete(?d):",
                "        print(\"Done deleting\", self, v)",
                "",
                "def next_test(self):",
                "    print(\"Testing next\", self)",
                "    let v = disque.next(?d):",
                "        print(\"Done next\", self, v)",
                "",
                "",
                "for i in {1..N_INSERT}:",
                "    spawn insert_test(i)",
                "# for i in {1..N_DELETE}:",
                "#     spawn delete_test(i)",
                "for i in {1..N_NEXT}:",
                "    spawn next_test(i)",
                ""
              ],
            "identifiers": {
                "d": "global",
                "self": "local-const",
                "N_INSERT": "constant",
                "N_NEXT": "constant",
                "i": "local-const",
                "disque": "module",
                "this": "local-var",
                "v": "local-const",
                "N_DELETE": "constant",
                "next_test": "constant",
                "___": "___",
                "delete_test": "constant",
                "insert_test": "constant"
              }
          },
        "disque": {
            "file": "disque.hny",
            "lines": [
                "import lists",
                "",
                "def Disque() returns d:",
                "  d = {.elements: [], .current: 0}",
                "",
                "def insert(d, v):",
                "  atomically:",
                "    d->elements = lists.subseq(d->elements, 0, d->current) + [v,] + lists.subseq(d->elements, d->current, len d->elements)",
                "",
                "def delete(d) returns returnVal:",
                "  atomically:",
                "    returnVal = None",
                "    ",
                "    if len d->elements > 0: ",
                "      returnVal = d->elements[d->current]",
                "      d->elements = lists.subseq(d->elements, 0, d->current) + lists.subseq(d->elements, d->current + 1, len d->elements)",
                "      d->current += 1",
                "      if d->current >= len d->elements: d->current = 0",
                "",
                "def next(d) returns returnVal:",
                "  atomically:",
                "    returnVal = None",
                "    if len d->elements > 0:",
                "      returnVal = d->elements[d->current]",
                "      d->current += 1",
                "      if d->current >= len d->elements: d->current = 0",
                "      return returnVal"
              ],
            "identifiers": {
                "d": "local-const",
                "this": "local-var",
                "v": "local-const",
                "Disque": "constant",
                "next": "constant",
                "delete": "constant",
                "lists": "module",
                "___": "___",
                "insert": "constant"
              }
          },
        "lists": {
            "file": "/Users/stutigupta/.local/lib/python3.12/site-packages/harmony_model_checker/modules/lists.hny",
            "lines": [
                "# return s[b:e]",
                "def subseq(s, b, e) returns result:",
                "    result = [ s[x] for x in {b..e-1} ]",
                "",
                "def append(s, e) returns result:",
                "    result = s + [e,]",
                "",
                "def head(s) returns result:",
                "    result = s[0]",
                "",
                "def tail(s) returns result:",
                "    result = s",
                "    del result[0]",
                "",
                "# convert values of a dictionary into a list",
                "def values(d) returns result:",
                "    result = [ v for _:v in d ]",
                "",
                "# like Python .items()",
                "def items(d) returns result:",
                "    result = [ (k, v) for k:v in d ]",
                "",
                "# quicksort of a list",
                "def qsort(a) returns sorted_list:",
                "    if a == []:",
                "        sorted_list = []",
                "    else:",
                "        let (pivot, rest) = head(a), tail(a)",
                "        let lower = [ v for v in rest where v < pivot ]",
                "        let higher = [ v for v in rest where v >= pivot ]:",
                "            sorted_list = qsort(lower) + [pivot,] + qsort(higher)",
                "",
                "# like Python index()",
                "def index(d, e) returns i:",
                "    i = 0",
                "    while d[i] != e:",
                "        i += 1",
                "",
                "# like Python startswith (only defined for strings)",
                "def startswith(d, prefix) returns result:",
                "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
                "",
                "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
                "def foldl(d, f, z) returns result:",
                "    result = z",
                "    for e in d:",
                "        result = f(result, e)",
                "",
                "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
                "def foldr(d, f, z) returns result:",
                "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
                "",
                "# Python functools reduce operator",
                "def reduce(f, d, z) returns result:",
                "    result = foldl(d, f, z)",
                "",
                "# Return a permutation of set s",
                "def permuted(s) returns perm:",
                "    perm = []",
                "    var c = s",
                "    while c != {}:",
                "        let e = choose c:",
                "            perm += [ e, ]",
                "            c -= { e }",
                "",
                "# Return a list of elements satisfying the condition",
                "def filter(cond, s) returns t:",
                "    t = [ e for e in s where cond(e) ]",
                "",
                "# Return a list of elements mapped by f",
                "def map(f, s) returns t:",
                "    t = [ f(e) for e in s ]"
              ],
            "identifiers": {
                "f": "local-const",
                "z": "local-const",
                "filter": "constant",
                "d": "local-const",
                "head": "constant",
                "x": "local-const",
                "higher": "local-const",
                "i": "local-const",
                "startswith": "constant",
                "foldl": "constant",
                "values": "constant",
                "k": "local-const",
                "e": "local-const",
                "map": "constant",
                "qsort": "constant",
                "pivot": "local-const",
                "a": "local-const",
                "c": "local-var",
                "rest": "local-const",
                "b": "local-const",
                "permuted": "constant",
                "this": "local-var",
                "v": "local-const",
                "prefix": "local-const",
                "subseq": "constant",
                "cond": "local-const",
                "s": "local-const",
                "lower": "local-const",
                "reduce": "constant",
                "tail": "constant",
                "___": "___",
                "items": "constant",
                "foldr": "constant",
                "index": "constant",
                "append": "constant"
              }
          }
      },
    "labels": {
        "__end__": 755
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame subseq(s, b, e)",
            "start of method subseq"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu3",
            "initialize accumulator for list comprehension: pop a value and store in $accu3"
          ],
        [
            "LoadVar b",
            "push the value of b"
          ],
        [
            "DelVar b",
            "delete method variable b"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 26",
            "check if loop is done: pop a value and jump to 26 if the value is False"
          ],
        [
            "LoadVar $accu3",
            "load accumulator: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu3",
            "update accumulator: pop a value and store in $accu3"
          ],
        [
            "Jump 14",
            "set program counter to 14"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu3",
            "load final accumulator result: push the value of $accu3"
          ],
        [
            "DelVar $accu3",
            "delete method variable $accu3"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame append(s, e)",
            "start of method append"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame head(s)",
            "start of method head"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame tail(s)",
            "start of method tail"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "DelVar [result]",
            "pop an address of a method variable and delete that variable"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame values(d)",
            "start of method values"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu52",
            "initialize accumulator for list comprehension: pop a value and store in $accu52"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, v)",
            "get next element and assign to _:v; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 83",
            "check if loop is done: pop a value and jump to 83 if the value is False"
          ],
        [
            "LoadVar $accu52",
            "load accumulator: push the value of $accu52"
          ],
        [
            "DelVar $accu52",
            "delete method variable $accu52"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu52",
            "update accumulator: pop a value and store in $accu52"
          ],
        [
            "Jump 73",
            "set program counter to 73"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu52",
            "load final accumulator result: push the value of $accu52"
          ],
        [
            "DelVar $accu52",
            "delete method variable $accu52"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame items(d)",
            "start of method items"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu68",
            "initialize accumulator for list comprehension: pop a value and store in $accu68"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(k, v)",
            "get next element and assign to k:v; push False or True depending on success"
          ],
        [
            "JumpCond False 110",
            "check if loop is done: pop a value and jump to 110 if the value is False"
          ],
        [
            "LoadVar $accu68",
            "load accumulator: push the value of $accu68"
          ],
        [
            "DelVar $accu68",
            "delete method variable $accu68"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu68",
            "update accumulator: pop a value and store in $accu68"
          ],
        [
            "Jump 96",
            "set program counter to 96"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu68",
            "load final accumulator result: push the value of $accu68"
          ],
        [
            "DelVar $accu68",
            "delete method variable $accu68"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame qsort(a)",
            "start of method qsort"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 126",
            "pop a value and jump to 126 if the value is False"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar sorted_list",
            "pop a value and store in sorted_list"
          ],
        [
            "Jump 192",
            "set program counter to 192"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "Apply PC(45)",
            "call method PC(45)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Apply PC(55)",
            "call method PC(55)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar (pivot, rest)",
            "pop a value and store in (pivot, rest)"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu103",
            "initialize accumulator for list comprehension: pop a value and store in $accu103"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 153",
            "check if loop is done: pop a value and jump to 153 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "JumpCond False 139",
            "pop a value and jump to 139 if the value is False"
          ],
        [
            "LoadVar $accu103",
            "load accumulator: push the value of $accu103"
          ],
        [
            "DelVar $accu103",
            "delete method variable $accu103"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu103",
            "update accumulator: pop a value and store in $accu103"
          ],
        [
            "Jump 139",
            "set program counter to 139"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu103",
            "load final accumulator result: push the value of $accu103"
          ],
        [
            "DelVar $accu103",
            "delete method variable $accu103"
          ],
        [
            "StoreVar lower",
            "pop a value and store in lower"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu120",
            "initialize accumulator for list comprehension: pop a value and store in $accu120"
          ],
        [
            "LoadVar rest",
            "push the value of rest"
          ],
        [
            "DelVar rest",
            "delete method variable rest"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 176",
            "check if loop is done: pop a value and jump to 176 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 162",
            "pop a value and jump to 162 if the value is False"
          ],
        [
            "LoadVar $accu120",
            "load accumulator: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu120",
            "update accumulator: pop a value and store in $accu120"
          ],
        [
            "Jump 162",
            "set program counter to 162"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "LoadVar $accu120",
            "load final accumulator result: push the value of $accu120"
          ],
        [
            "DelVar $accu120",
            "delete method variable $accu120"
          ],
        [
            "StoreVar higher",
            "pop a value and store in higher"
          ],
        [
            "LoadVar lower",
            "push the value of lower"
          ],
        [
            "DelVar lower",
            "delete method variable lower"
          ],
        [
            "Apply PC(117)",
            "call method PC(117)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar pivot",
            "push the value of pivot"
          ],
        [
            "DelVar pivot",
            "delete method variable pivot"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar higher",
            "push the value of higher"
          ],
        [
            "DelVar higher",
            "delete method variable higher"
          ],
        [
            "Apply PC(117)",
            "call method PC(117)"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "StoreVar sorted_list",
            "pop a value and store in sorted_list"
          ],
        [
            "ReturnOp(sorted_list)",
            "restore caller method state and push sorted_list"
          ],
        [
            "DelVar sorted_list",
            "delete method variable sorted_list"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame index(d, e)",
            "start of method index"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 211",
            "pop a value and jump to 211 if the value is False"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar i",
            "pop a value and store in i"
          ],
        [
            "Jump 198",
            "set program counter to 198"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "ReturnOp(i)",
            "restore caller method state and push i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame startswith(d, prefix)",
            "start of method startswith"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "JumpCond False 257",
            "pop a value and jump to 257 if the value is False"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu172",
            "initialize accumulator for list comprehension: pop a value and store in $accu172"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 250",
            "check if loop is done: pop a value and jump to 250 if the value is False"
          ],
        [
            "LoadVar $accu172",
            "load accumulator: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar prefix",
            "push the value of prefix"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu172",
            "update accumulator: pop a value and store in $accu172"
          ],
        [
            "Jump 233",
            "set program counter to 233"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "LoadVar $accu172",
            "load final accumulator result: push the value of $accu172"
          ],
        [
            "DelVar $accu172",
            "delete method variable $accu172"
          ],
        [
            "1-ary all",
            "pop 1 value and push the result of applying all"
          ],
        [
            "Jump 260",
            "set program counter to 260"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar prefix",
            "delete method variable prefix"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame foldl(d, f, z)",
            "start of method foldl"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 285",
            "check if loop is done: pop a value and jump to 285 if the value is False"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 271",
            "set program counter to 271"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame foldr(d, f, z)",
            "start of method foldr"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 301",
            "pop a value and jump to 301 if the value is False"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "Jump 323",
            "set program counter to 323"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Apply PC(55)",
            "call method PC(55)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(289)",
            "call method PC(289)"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame reduce(f, d, z)",
            "start of method reduce"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar z",
            "push the value of z"
          ],
        [
            "DelVar z",
            "delete method variable z"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(263)",
            "call method PC(263)"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame permuted(s)",
            "start of method permuted"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 371",
            "pop a value and jump to 371 if the value is False"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar e",
            "pop a value and store in e"
          ],
        [
            "LoadVar perm",
            "push the value of perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar perm",
            "pop a value and store in perm"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar c",
            "pop a value and store in c"
          ],
        [
            "Jump 348",
            "set program counter to 348"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(perm)",
            "restore caller method state and push perm"
          ],
        [
            "DelVar perm",
            "delete method variable perm"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame filter(cond, s)",
            "start of method filter"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu292",
            "initialize accumulator for list comprehension: pop a value and store in $accu292"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 396",
            "check if loop is done: pop a value and jump to 396 if the value is False"
          ],
        [
            "LoadVar cond",
            "push the value of cond"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 381",
            "pop a value and jump to 381 if the value is False"
          ],
        [
            "LoadVar $accu292",
            "load accumulator: push the value of $accu292"
          ],
        [
            "DelVar $accu292",
            "delete method variable $accu292"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu292",
            "update accumulator: pop a value and store in $accu292"
          ],
        [
            "Jump 381",
            "set program counter to 381"
          ],
        [
            "DelVar cond",
            "delete method variable cond"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "LoadVar $accu292",
            "load final accumulator result: push the value of $accu292"
          ],
        [
            "DelVar $accu292",
            "delete method variable $accu292"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame map(f, s)",
            "start of method map"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu313",
            "initialize accumulator for list comprehension: pop a value and store in $accu313"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(e)",
            "get next element and assign to e; push False or True depending on success"
          ],
        [
            "JumpCond False 422",
            "check if loop is done: pop a value and jump to 422 if the value is False"
          ],
        [
            "LoadVar $accu313",
            "load accumulator: push the value of $accu313"
          ],
        [
            "DelVar $accu313",
            "delete method variable $accu313"
          ],
        [
            "LoadVar f",
            "push the value of f"
          ],
        [
            "LoadVar e",
            "push the value of e"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu313",
            "update accumulator: pop a value and store in $accu313"
          ],
        [
            "Jump 410",
            "set program counter to 410"
          ],
        [
            "DelVar e",
            "delete method variable e"
          ],
        [
            "DelVar f",
            "delete method variable f"
          ],
        [
            "LoadVar $accu313",
            "load final accumulator result: push the value of $accu313"
          ],
        [
            "DelVar $accu313",
            "delete method variable $accu313"
          ],
        [
            "StoreVar t",
            "pop a value and store in t"
          ],
        [
            "ReturnOp(t)",
            "restore caller method state and push t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame Disque()",
            "start of method Disque"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar d",
            "pop a value and store in d"
          ],
        [
            "ReturnOp(d)",
            "restore caller method state and push d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame insert(d, v)",
            "start of method insert"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame delete(d)",
            "start of method delete"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 584",
            "pop a value and jump to 584 if the value is False"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 584",
            "pop a value and jump to 584 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(returnVal)",
            "restore caller method state and push returnVal"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "Jump 647",
            "jump over method definition: set program counter to 647"
          ],
        [
            "Frame next(d)",
            "start of method next"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 643",
            "pop a value and jump to 643 if the value is False"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar returnVal",
            "pop a value and store in returnVal"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "Push \"elements\"",
            "push constant \"elements\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary >=",
            "pop 2 values and push the result of applying >="
          ],
        [
            "JumpCond False 637",
            "pop a value and jump to 637 if the value is False"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push \"current\"",
            "push constant \"current\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Push ?disque$return",
            "push constant ?disque$return"
          ],
        [
            "LoadVar returnVal",
            "push the value of returnVal"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(returnVal)",
            "restore caller method state and push returnVal"
          ],
        [
            "DelVar returnVal",
            "delete method variable returnVal"
          ],
        [
            "Push PC(430)",
            "push constant PC(430)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store d",
            "pop a value and store it in shared variable d"
          ],
        [
            "Jump 725",
            "jump over method definition: set program counter to 725"
          ],
        [
            "Frame insert_test(self)",
            "start of method insert_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Testing insert\"",
            "push constant \"Testing insert\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(442)",
            "push constant PC(442)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Done inserting\"",
            "push constant \"Done inserting\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 725",
            "jump over method definition: set program counter to 725"
          ],
        [
            "Frame delete_test(self)",
            "start of method delete_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Testing delete\"",
            "push constant \"Testing delete\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(493)",
            "push constant PC(493)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Done deleting\"",
            "push constant \"Done deleting\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 725",
            "jump over method definition: set program counter to 725"
          ],
        [
            "Frame next_test(self)",
            "start of method next_test"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Testing next\"",
            "push constant \"Testing next\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push PC(589)",
            "push constant PC(589)"
          ],
        [
            "Push ?d",
            "push constant ?d"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar v",
            "pop a value and store in v"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push \"Done next\"",
            "push constant \"Done next\""
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 738",
            "check if loop is done: pop a value and jump to 738 if the value is False"
          ],
        [
            "Push ?PC(653)",
            "push constant ?PC(653)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 729",
            "set program counter to 729"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 752",
            "check if loop is done: pop a value and jump to 752 if the value is False"
          ],
        [
            "Push ?PC(702)",
            "push constant ?PC(702)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 743",
            "set program counter to 743"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                1,
                1,
                32,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 2,
            "stmt": [
                2,
                1,
                2,
                35
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 36,
            "column": 31
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 37,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 3,
            "stmt": [
                3,
                5,
                3,
                39
              ],
            "line": 3,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                6
              ],
            "line": 4,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                32
              ],
            "line": 5,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 6,
            "stmt": [
                6,
                5,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                6
              ],
            "line": 7,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                27
              ],
            "line": 8,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                17
              ],
            "line": 9,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                6
              ],
            "line": 10,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                14
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 13,
            "stmt": [
                13,
                5,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 15,
            "stmt": [
                15,
                45,
                15,
                50
              ],
            "line": 15,
            "endcolumn": 50,
            "column": 45
          },
        {
            "module": "lists",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                31
              ],
            "line": 17,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 19,
            "stmt": [
                19,
                23,
                19,
                28
              ],
            "line": 19,
            "endcolumn": 28,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                28
              ],
            "line": 20,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                28
              ],
            "line": 20,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 34,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                36
              ],
            "line": 21,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 23,
            "stmt": [
                23,
                22,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 24,
            "stmt": [
                24,
                1,
                24,
                33
              ],
            "line": 24,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 24,
            "stmt": [
                24,
                1,
                24,
                33
              ],
            "line": 24,
            "endcolumn": 33,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 14,
            "column": 8
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                15
              ],
            "line": 25,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 35,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 43,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 38
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 44,
            "column": 29
          },
        {
            "module": "lists",
            "endline": 28,
            "stmt": [
                28,
                9,
                28,
                53
              ],
            "line": 28,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 37,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 45
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 53,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 29,
            "stmt": [
                29,
                9,
                29,
                64
              ],
            "line": 29,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 38,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 51
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 55,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                57
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 37,
            "column": 33
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 37,
            "column": 33
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 38,
            "column": 27
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 47,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 47,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 65,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 65,
            "column": 27
          },
        {
            "module": "lists",
            "endline": 31,
            "stmt": [
                31,
                13,
                31,
                65
              ],
            "line": 31,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 33,
            "stmt": [
                33,
                22,
                33,
                27
              ],
            "line": 33,
            "endcolumn": 27,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 33,
            "stmt": [
                33,
                22,
                33,
                27
              ],
            "line": 33,
            "endcolumn": 27,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                26
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                26
              ],
            "line": 34,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                9
              ],
            "line": 35,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                9
              ],
            "line": 35,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 37,
            "stmt": [
                37,
                9,
                37,
                14
              ],
            "line": 37,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                20
              ],
            "line": 36,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 39,
            "stmt": [
                39,
                52,
                39,
                57
              ],
            "line": 39,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "lists",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 40,
            "stmt": [
                40,
                1,
                40,
                41
              ],
            "line": 40,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 35,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 35,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 75,
            "column": 75
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 89,
            "column": 84
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 90,
            "column": 80
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 94,
            "column": 94
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 94,
            "column": 80
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 94,
            "column": 75
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 49,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 59,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 62,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 62,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 96
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 96,
            "column": 46
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 42
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 40,
            "column": 38
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 97,
            "column": 15
          },
        {
            "module": "lists",
            "endline": 41,
            "stmt": [
                41,
                5,
                41,
                97
              ],
            "line": 41,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 43,
            "stmt": [
                43,
                55,
                43,
                60
              ],
            "line": 43,
            "endcolumn": 60,
            "column": 55
          },
        {
            "module": "lists",
            "endline": 44,
            "stmt": [
                44,
                1,
                44,
                34
              ],
            "line": 44,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 44,
            "stmt": [
                44,
                1,
                44,
                34
              ],
            "line": 44,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 45,
            "stmt": [
                45,
                5,
                45,
                14
              ],
            "line": 45,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 25,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 28,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 29,
            "column": 18
          },
        {
            "module": "lists",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                29
              ],
            "line": 47,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 46,
            "stmt": [
                46,
                5,
                46,
                14
              ],
            "line": 46,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 49,
            "stmt": [
                49,
                59,
                49,
                64
              ],
            "line": 49,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 49,
            "stmt": [
                49,
                59,
                49,
                64
              ],
            "line": 49,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 49,
            "stmt": [
                49,
                59,
                49,
                64
              ],
            "line": 49,
            "endcolumn": 64,
            "column": 59
          },
        {
            "module": "lists",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                34
              ],
            "line": 50,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                34
              ],
            "line": 50,
            "endcolumn": 34,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 23,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 28,
            "column": 19
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 63,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 37,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 55,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 58,
            "column": 58
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 61,
            "column": 49
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 43
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 62,
            "column": 37
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 63,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                63
              ],
            "line": 51,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 53,
            "stmt": [
                53,
                35,
                53,
                40
              ],
            "line": 53,
            "endcolumn": 40,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 54,
            "stmt": [
                54,
                1,
                54,
                35
              ],
            "line": 54,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 54,
            "stmt": [
                54,
                1,
                54,
                35
              ],
            "line": 54,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 26,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 14
          },
        {
            "module": "lists",
            "endline": 55,
            "stmt": [
                55,
                5,
                55,
                27
              ],
            "line": 55,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 57,
            "stmt": [
                57,
                32,
                57,
                37
              ],
            "line": 57,
            "endcolumn": 37,
            "column": 32
          },
        {
            "module": "lists",
            "endline": 58,
            "stmt": [
                58,
                1,
                58,
                29
              ],
            "line": 58,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 58,
            "stmt": [
                58,
                1,
                58,
                29
              ],
            "line": 58,
            "endcolumn": 29,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                13
              ],
            "line": 59,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "lists",
            "endline": 59,
            "stmt": [
                59,
                5,
                59,
                13
              ],
            "line": 59,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                13
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                13
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                13
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 17,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 62,
            "stmt": [
                62,
                9,
                62,
                24
              ],
            "line": 62,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "lists",
            "endline": 62,
            "stmt": [
                62,
                9,
                62,
                24
              ],
            "line": 62,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "lists",
            "endline": 62,
            "stmt": [
                62,
                9,
                62,
                24
              ],
            "line": 62,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 26,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 63,
            "stmt": [
                63,
                13,
                63,
                26
              ],
            "line": 63,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                22
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 61,
            "stmt": [
                61,
                5,
                61,
                18
              ],
            "line": 61,
            "endcolumn": 18,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 66,
            "stmt": [
                66,
                53,
                66,
                58
              ],
            "line": 66,
            "endcolumn": 58,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 66,
            "stmt": [
                66,
                53,
                66,
                58
              ],
            "line": 66,
            "endcolumn": 58,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 66,
            "stmt": [
                66,
                53,
                66,
                58
              ],
            "line": 66,
            "endcolumn": 58,
            "column": 53
          },
        {
            "module": "lists",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                30
              ],
            "line": 67,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 67,
            "stmt": [
                67,
                1,
                67,
                30
              ],
            "line": 67,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 30
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 36,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 68,
            "stmt": [
                68,
                5,
                68,
                38
              ],
            "line": 68,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 70,
            "stmt": [
                70,
                40,
                70,
                45
              ],
            "line": 70,
            "endcolumn": 45,
            "column": 40
          },
        {
            "module": "lists",
            "endline": 70,
            "stmt": [
                70,
                40,
                70,
                45
              ],
            "line": 70,
            "endcolumn": 45,
            "column": 40
          },
        {
            "module": "lists",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 71,
            "stmt": [
                71,
                1,
                71,
                24
              ],
            "line": 71,
            "endcolumn": 24,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 25,
            "column": 11
          },
        {
            "module": "lists",
            "endline": 72,
            "stmt": [
                72,
                5,
                72,
                27
              ],
            "line": 72,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "lists",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                6
              ],
            "line": 73,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "lists",
            "endline": 73,
            "stmt": [
                73,
                1,
                73,
                6
              ],
            "line": 73,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                23
              ],
            "line": 3,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                23
              ],
            "line": 3,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 16,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 20,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 30,
            "column": 23
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 33
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 33,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 4,
            "stmt": [
                4,
                3,
                4,
                34
              ],
            "line": 4,
            "endcolumn": 5,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                6
              ],
            "line": 5,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                6
              ],
            "line": 5,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                17
              ],
            "line": 6,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                17
              ],
            "line": 6,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 7,
            "stmt": [
                7,
                3,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 5,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 30,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 32,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 35
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 45,
            "column": 45
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 51
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 48
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 48
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 32
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 58,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 58,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 64,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 64,
            "column": 63
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 80,
            "column": 69
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 82,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 92,
            "column": 85
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 92,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 92,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 95,
            "column": 95
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 104,
            "column": 98
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 104,
            "column": 95
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 104,
            "column": 95
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 111,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 111,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 114
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 111
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 107
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 121,
            "column": 82
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 122,
            "column": 69
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 122,
            "column": 69
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 122,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                122
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 7,
            "stmt": [
                7,
                3,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                6
              ],
            "line": 9,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                32
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                32
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 11,
            "stmt": [
                11,
                3,
                11,
                13
              ],
            "line": 11,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                20
              ],
            "line": 12,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "disque",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                20
              ],
            "line": 12,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 15
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 26,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 14,
            "stmt": [
                14,
                5,
                14,
                27
              ],
            "line": 14,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 29,
            "column": 22
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 29,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 40,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 15,
            "stmt": [
                15,
                7,
                15,
                41
              ],
            "line": 15,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 7,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 17,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 44,
            "column": 37
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 44,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 44,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 47,
            "column": 47
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 53
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 50
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 50
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 59,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 60,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 60,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 75,
            "column": 64
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 77,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 87,
            "column": 80
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 87,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 87,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 90,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 99,
            "column": 93
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 99,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 99,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 103,
            "column": 103
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 103,
            "column": 90
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 110,
            "column": 110
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 113
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 110
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 110
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 106
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 120,
            "column": 77
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 121,
            "column": 64
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 121,
            "column": 64
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 121,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 16,
            "stmt": [
                16,
                7,
                16,
                121
              ],
            "line": 16,
            "endcolumn": 19,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 7,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 17,
            "stmt": [
                17,
                7,
                17,
                21
              ],
            "line": 17,
            "endcolumn": 19,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 24
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 38,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                7,
                18,
                39
              ],
            "line": 18,
            "endcolumn": 8,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 50,
            "column": 44
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 50,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "disque",
            "endline": 18,
            "stmt": [
                18,
                41,
                18,
                54
              ],
            "line": 18,
            "endcolumn": 52,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 11,
            "stmt": [
                11,
                3,
                11,
                13
              ],
            "line": 11,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 11,
            "stmt": [
                11,
                3,
                11,
                13
              ],
            "line": 11,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                6
              ],
            "line": 19,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                6
              ],
            "line": 19,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                30
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "disque",
            "endline": 21,
            "stmt": [
                21,
                3,
                21,
                13
              ],
            "line": 21,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                20
              ],
            "line": 22,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "disque",
            "endline": 22,
            "stmt": [
                22,
                5,
                22,
                20
              ],
            "line": 22,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 15
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 22,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 26,
            "column": 8
          },
        {
            "module": "disque",
            "endline": 23,
            "stmt": [
                23,
                5,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 22
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 29,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 31,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 40,
            "column": 34
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 40,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 41,
            "column": 19
          },
        {
            "module": "disque",
            "endline": 24,
            "stmt": [
                24,
                7,
                24,
                41
              ],
            "line": 24,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 16,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 16,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 25,
            "stmt": [
                25,
                7,
                25,
                21
              ],
            "line": 25,
            "endcolumn": 19,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 19,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 31
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 28
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 24
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 38,
            "column": 10
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                7,
                26,
                39
              ],
            "line": 26,
            "endcolumn": 8,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 50,
            "column": 44
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 50,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "disque",
            "endline": 26,
            "stmt": [
                26,
                41,
                26,
                54
              ],
            "line": 26,
            "endcolumn": 52,
            "column": 41
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                7,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                7,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                7,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 14
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                7,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                7,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                7,
                27,
                22
              ],
            "line": 27,
            "endcolumn": 22,
            "column": 7
          },
        {
            "module": "disque",
            "endline": 21,
            "stmt": [
                21,
                3,
                21,
                13
              ],
            "line": 21,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 21,
            "stmt": [
                21,
                3,
                21,
                13
              ],
            "line": 21,
            "endcolumn": 13,
            "column": 3
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                23,
                27,
                28
              ],
            "line": 27,
            "endcolumn": 28,
            "column": 23
          },
        {
            "module": "disque",
            "endline": 27,
            "stmt": [
                27,
                23,
                27,
                28
              ],
            "line": 27,
            "endcolumn": 28,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                19
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                22
              ],
            "line": 9,
            "endcolumn": 22,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                5,
                10,
                33
              ],
            "line": 10,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 26,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                27
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                33
              ],
            "line": 12,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                1,
                13,
                6
              ],
            "line": 13,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                1,
                14,
                22
              ],
            "line": 14,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                14,
                1,
                14,
                22
              ],
            "line": 14,
            "endcolumn": 22,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 32,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                5,
                15,
                33
              ],
            "line": 15,
            "endcolumn": 33,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                29
              ],
            "line": 16,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 29,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 35,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 38,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                9,
                17,
                39
              ],
            "line": 17,
            "endcolumn": 39,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                1,
                18,
                6
              ],
            "line": 18,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                20
              ],
            "line": 19,
            "endcolumn": 20,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                31
              ],
            "line": 20,
            "endcolumn": 31,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 23,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                27
              ],
            "line": 21,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 25,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 34,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                35
              ],
            "line": 22,
            "endcolumn": 35,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                1,
                24,
                6
              ],
            "line": 24,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                5,
                26,
                24
              ],
            "line": 26,
            "endcolumn": 24,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                1,
                25,
                22
              ],
            "line": 25,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 19,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 22,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                22
              ],
            "line": 30,
            "endcolumn": 22,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                20
              ],
            "line": 29,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                6,
                32,
                6
              ],
            "line": 32,
            "endcolumn": 6,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                6,
                32,
                6
              ],
            "line": 32,
            "endcolumn": 6,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                6,
                32,
                6
              ],
            "line": 32,
            "endcolumn": 6,
            "column": 6
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(s, b, e)",
            "name": "subseq",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "value": "b",
            "op": "LoadVar"
          },
        {
            "value": "b",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "26",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu3",
            "op": "StoreVar"
          },
        {
            "pc": "14",
            "op": "Jump"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu3",
            "op": "LoadVar"
          },
        {
            "value": "$accu3",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(s, e)",
            "name": "append",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "head",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "tail",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "values",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu52",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "83",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu52",
            "op": "LoadVar"
          },
        {
            "value": "$accu52",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu52",
            "op": "StoreVar"
          },
        {
            "pc": "73",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu52",
            "op": "LoadVar"
          },
        {
            "value": "$accu52",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "items",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu68",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "key": "k",
            "op": "Cut"
          },
        {
            "pc": "110",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu68",
            "op": "LoadVar"
          },
        {
            "value": "$accu68",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu68",
            "op": "StoreVar"
          },
        {
            "pc": "96",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu68",
            "op": "LoadVar"
          },
        {
            "value": "$accu68",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "qsort",
            "op": "Frame"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "126",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "sorted_list",
            "op": "StoreVar"
          },
        {
            "pc": "192",
            "op": "Jump"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "45"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "55"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "(pivot, rest)",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu103",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "153",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "139",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu103",
            "op": "LoadVar"
          },
        {
            "value": "$accu103",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu103",
            "op": "StoreVar"
          },
        {
            "pc": "139",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu103",
            "op": "LoadVar"
          },
        {
            "value": "$accu103",
            "op": "DelVar"
          },
        {
            "value": "lower",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "value": "rest",
            "op": "LoadVar"
          },
        {
            "value": "rest",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "176",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "162",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu120",
            "op": "StoreVar"
          },
        {
            "pc": "162",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "$accu120",
            "op": "LoadVar"
          },
        {
            "value": "$accu120",
            "op": "DelVar"
          },
        {
            "value": "higher",
            "op": "StoreVar"
          },
        {
            "value": "lower",
            "op": "LoadVar"
          },
        {
            "value": "lower",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "117"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "pivot",
            "op": "LoadVar"
          },
        {
            "value": "pivot",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "higher",
            "op": "LoadVar"
          },
        {
            "value": "higher",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "117"
              },
            "op": "Apply"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "sorted_list",
            "op": "StoreVar"
          },
        {
            "result": "sorted_list",
            "op": "Return"
          },
        {
            "value": "sorted_list",
            "op": "DelVar"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(d, e)",
            "name": "index",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "211",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "i",
            "op": "StoreVar"
          },
        {
            "pc": "198",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "result": "i",
            "op": "Return"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(d, prefix)",
            "name": "startswith",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "pc": "257",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "250",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "prefix",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu172",
            "op": "StoreVar"
          },
        {
            "pc": "233",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": "$accu172",
            "op": "LoadVar"
          },
        {
            "value": "$accu172",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "all",
            "op": "Nary"
          },
        {
            "pc": "260",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "prefix",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldl",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "285",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "271",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(d, f, z)",
            "name": "foldr",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "301",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "pc": "323",
            "op": "Jump"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "55"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "289"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(f, d, z)",
            "name": "reduce",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "z",
            "op": "LoadVar"
          },
        {
            "value": "z",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "263"
              },
            "op": "Apply"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "permuted",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "371",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "e",
            "op": "StoreVar"
          },
        {
            "value": "perm",
            "op": "LoadVar"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "perm",
            "op": "StoreVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "c",
            "op": "StoreVar"
          },
        {
            "pc": "348",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "perm",
            "op": "Return"
          },
        {
            "value": "perm",
            "op": "DelVar"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(cond, s)",
            "name": "filter",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu292",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "396",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "cond",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "381",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu292",
            "op": "LoadVar"
          },
        {
            "value": "$accu292",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu292",
            "op": "StoreVar"
          },
        {
            "pc": "381",
            "op": "Jump"
          },
        {
            "value": "cond",
            "op": "DelVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "$accu292",
            "op": "LoadVar"
          },
        {
            "value": "$accu292",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(f, s)",
            "name": "map",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu313",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "e",
            "op": "Cut"
          },
        {
            "pc": "422",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu313",
            "op": "LoadVar"
          },
        {
            "value": "$accu313",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "LoadVar"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu313",
            "op": "StoreVar"
          },
        {
            "pc": "410",
            "op": "Jump"
          },
        {
            "value": "e",
            "op": "DelVar"
          },
        {
            "value": "f",
            "op": "DelVar"
          },
        {
            "value": "$accu313",
            "op": "LoadVar"
          },
        {
            "value": "$accu313",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "StoreVar"
          },
        {
            "result": "t",
            "op": "Return"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Disque",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "StoreVar"
          },
        {
            "result": "d",
            "op": "Return"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "(d, v)",
            "name": "insert",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "delete",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "584",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "584",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "returnVal",
            "op": "Return"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "pc": "647",
            "op": "Jump"
          },
        {
            "args": "d",
            "name": "next",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "643",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "returnVal",
            "op": "StoreVar"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "elements"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": ">=",
            "op": "Nary"
          },
        {
            "pc": "637",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "current"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "disque$return"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "returnVal",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "returnVal",
            "op": "Return"
          },
        {
            "value": "returnVal",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "430"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "d"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "725",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "insert_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Testing insert"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "442"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Done inserting"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "725",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "delete_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Testing delete"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "493"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Done deleting"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "725",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "next_test",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Testing next"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "pc",
                "value": "589"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "d"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "v",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "Done next"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "738",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "653"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "729",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "752",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "702"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "743",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "128",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "16af18a4a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Jump 647",
          "explain": "jump over method definition: set program counter to 647",
          "explain2": { "text": "jump over method definition: set program counter to 647", "args": [] },
          "npc": "647",
          "push": [ ],
          "pc": "1"
        },

        {
          "code": "Push PC(430)",
          "explain": "push program counter constant 430 ()",
          "explain2": { "text": "push program counter constant 430 ()", "args": [ { "type": "atom", "value": "Disque" } ] },
          "npc": "648",
          "push": [ { "type": "pc", "value": "430" } ],
          "pc": "647"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "649",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "648"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([], PC(430)); push result (?PC(430)[[]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "pc", "value": "430" }, { "type": "address", "func": { "type": "pc", "value": "430" }, "args": [{ "type": "list", "value": [] } ] } ] },
          "npc": "650",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "430" }, "args": [{ "type": "list", "value": [] } ] } ],
          "pc": "649"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([]) and call method (430: \"Disque\")",
          "explain2": { "text": "pop an argument (#+) and call method (430: #+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "Disque" } ] },
          "npc": "430",
          "fp": "4",
          "trace": [
{"pc": "651","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0},{"pc": "430","xpc": "430","method_name": { "type": "atom", "value": "Disque" },
"method_arg": { "type": "list", "value": [] },
"method": "Disque()","calltype": "normal","vars":{ },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "10402" }, { "type": "list", "value": [] } ],
          "pc": "650"
        },

        {
          "code": "Frame Disque()",
          "explain": "pop argument () and run method \"Disque\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "Disque" } ] },
          "npc": "431",
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "430"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "432",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "431"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "433",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "432"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "434",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "433"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([], \"elements\", {:}); add key/value pair to dictionary; push result ({ \"elements\": [] })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "elements" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } ] },
          "npc": "435",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } ],
          "pc": "434"
        },

        {
          "code": "Push \"current\"",
          "explain": "push constant \"current\"",
          "explain2": { "text": "push constant \"current\"", "args": [] },
          "npc": "436",
          "push": [ { "type": "atom", "value": "current" } ],
          "pc": "435"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "437",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "436"
        },

        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values (0, \"current\", { \"elements\": [] }); add key/value pair to dictionary; push result ({ \"current\": 0, \"elements\": [] })",
          "explain2": { "text": "pop 3 values (#+, #+, #+); add key/value pair to dictionary; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "current" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } ] },
          "npc": "438",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } ],
          "pc": "437"
        },

        {
          "code": "StoreVar d",
          "explain": "pop value ({ \"current\": 0, \"elements\": [] }) and store locally in variable \\\"d\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"d\"", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } ] },
          "npc": "439",
          "local": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "438"
        },

        {
          "code": "ReturnOp(d)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } ] },
          "npc": "651",
          "fp": "1",
          "trace": [
{"pc": "651","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "local": { },
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } ],
          "pc": "439"
        },

        {
          "code": "Store d",
          "explain": "pop value ({ \"current\": 0, \"elements\": [] }) and store into variable d",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] },
          "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } },
          "npc": "652",
          "pop": "1",
          "push": [ ],
          "pc": "651"
        },

        {
          "code": "Jump 725",
          "explain": "jump over method definition: set program counter to 725",
          "explain2": { "text": "jump over method definition: set program counter to 725", "args": [] },
          "npc": "725",
          "push": [ ],
          "pc": "652"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "726",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "725"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "727",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "726"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 1); range of integers; push result ({ 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "728",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "727"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "729",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "728"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1, 2 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "730",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "729"
        },

        {
          "code": "JumpCond False 738",
          "explain": "pop value (True), compare to False, and jump to 738 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 738 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "731",
          "pop": "1",
          "push": [ ],
          "pc": "730"
        },

        {
          "code": "Push ?PC(653)",
          "explain": "push constant ?PC(653)",
          "explain2": { "text": "push constant ?PC(653)", "args": [] },
          "npc": "732",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [ ] } ],
          "pc": "731"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "733",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "732"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "734",
          "local": { },
          "push": [ ],
          "pc": "733"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(653)); push result (?PC(653)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "735",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "734"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "736",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "735"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (653: \"insert_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (653: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "insert_test" } ] },
          "npc": "737",
          "pop": "2",
          "push": [ ],
          "pc": "736"
        },

        {
          "code": "Jump 729",
          "explain": "set program counter to 729",
          "explain2": { "text": "set program counter to 729", "args": [] },
          "npc": "729",
          "push": [ ],
          "pc": "737"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1, 2 }); assign value (2) to i; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "730",
          "local": { "i": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "729"
        },

        {
          "code": "JumpCond False 738",
          "explain": "pop value (True), compare to False, and jump to 738 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 738 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "731",
          "pop": "1",
          "push": [ ],
          "pc": "730"
        },

        {
          "code": "Push ?PC(653)",
          "explain": "push constant ?PC(653)",
          "explain2": { "text": "push constant ?PC(653)", "args": [] },
          "npc": "732",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [ ] } ],
          "pc": "731"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (2) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "i" } ] },
          "npc": "733",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "732"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "734",
          "local": { },
          "push": [ ],
          "pc": "733"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?PC(653)); push result (?PC(653)[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "735",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "653" }, "args": [{ "type": "int", "value": "2" } ] } ],
          "pc": "734"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "736",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "735"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (2), and pc (653: \"insert_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (653: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "2" }, { "type": "atom", "value": "insert_test" } ] },
          "npc": "737",
          "pop": "2",
          "push": [ ],
          "pc": "736"
        },

        {
          "code": "Jump 729",
          "explain": "set program counter to 729",
          "explain2": { "text": "set program counter to 729", "args": [] },
          "npc": "729",
          "push": [ ],
          "pc": "737"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (2) and value ({ 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "730",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "729"
        },

        {
          "code": "JumpCond False 738",
          "explain": "pop value (False), compare to False, and jump to 738 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 738 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "738",
          "pop": "1",
          "push": [ ],
          "pc": "730"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "739",
          "push": [ ],
          "pc": "738"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "740",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "739"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "741",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "740"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 1); range of integers; push result ({ 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "742",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "741"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "743",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "742"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 1, 2 }); assign value (1) to i; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "744",
          "local": { "i": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "743"
        },

        {
          "code": "JumpCond False 752",
          "explain": "pop value (True), compare to False, and jump to 752 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 752 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "745",
          "pop": "1",
          "push": [ ],
          "pc": "744"
        },

        {
          "code": "Push ?PC(702)",
          "explain": "push constant ?PC(702)",
          "explain2": { "text": "push constant ?PC(702)", "args": [] },
          "npc": "746",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [ ] } ],
          "pc": "745"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "i" } ] },
          "npc": "747",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "746"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "748",
          "local": { },
          "push": [ ],
          "pc": "747"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?PC(702)); push result (?PC(702)[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "749",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [{ "type": "int", "value": "1" } ] } ],
          "pc": "748"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "750",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "749"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (1), and pc (702: \"next_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (702: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "1" }, { "type": "atom", "value": "next_test" } ] },
          "npc": "751",
          "pop": "2",
          "push": [ ],
          "pc": "750"
        },

        {
          "code": "Jump 743",
          "explain": "set program counter to 743",
          "explain2": { "text": "set program counter to 743", "args": [] },
          "npc": "743",
          "push": [ ],
          "pc": "751"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 1, 2 }); assign value (2) to i; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to i; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "744",
          "local": { "i": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "743"
        },

        {
          "code": "JumpCond False 752",
          "explain": "pop value (True), compare to False, and jump to 752 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 752 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "745",
          "pop": "1",
          "push": [ ],
          "pc": "744"
        },

        {
          "code": "Push ?PC(702)",
          "explain": "push constant ?PC(702)",
          "explain2": { "text": "push constant ?PC(702)", "args": [] },
          "npc": "746",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [ ] } ],
          "pc": "745"
        },

        {
          "code": "LoadVar i",
          "explain": "push value (2) of variable \"i\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "i" } ] },
          "npc": "747",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "746"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "748",
          "local": { },
          "push": [ ],
          "pc": "747"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?PC(702)); push result (?PC(702)[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [ ] }, { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "749",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "702" }, "args": [{ "type": "int", "value": "2" } ] } ],
          "pc": "748"
        },

        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "explain2": { "text": "push constant {:}", "args": [] },
          "npc": "750",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "749"
        },

        {
          "code": "Spawn",
          "explain": "pop local state ({:}), arg (2), and pc (702: \"next_test\"), and spawn thread",
          "explain2": { "text": "pop local state (#+), arg (#+), and pc (702: #+), and spawn thread", "args": [ { "type": "dict", "value": [] }, { "type": "int", "value": "2" }, { "type": "atom", "value": "next_test" } ] },
          "npc": "751",
          "pop": "2",
          "push": [ ],
          "pc": "750"
        },

        {
          "code": "Jump 743",
          "explain": "set program counter to 743",
          "explain2": { "text": "set program counter to 743", "args": [] },
          "npc": "743",
          "push": [ ],
          "pc": "751"
        },

        {
          "code": "Cut(i)",
          "explain": "pop index (2) and value ({ 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "744",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "743"
        },

        {
          "code": "JumpCond False 752",
          "explain": "pop value (False), compare to False, and jump to 752 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 752 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "752",
          "pop": "1",
          "push": [ ],
          "pc": "744"
        },

        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "explain2": { "text": "delete method variable i", "args": [] },
          "npc": "753",
          "push": [ ],
          "pc": "752"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "753",
          "mode": "terminated",
          "pop": "1",
          "push": [ { "type": "address" } ],
          "pc": "753"
        }

      ],
      "ctxbag": {
          "16af18b6a": "1",
          "16af18bda": "1",
          "16af18c2a": "1",
          "16af18c7a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "16af18caa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "753",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "753","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "16af18b6a",
          "fp": "1",
          "name": "insert_test(1)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "insert_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "16af18bda",
          "fp": "1",
          "name": "insert_test(2)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "16af18c2a",
          "fp": "1",
          "name": "next_test(1)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "16af18c7a",
          "fp": "1",
          "name": "next_test(2)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "next_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "55",
      "tid": "3",
      "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } },
      "name": "next_test(1)",
      "context": {
        "tid": "3",
        "hvalue": "16af18c2a",
        "fp": "1",
        "name": "next_test(1)",
        "entry": "702",
        "pc": "702",
        "sp": "1",
        "stack": [{ "type": "int", "value": "1" }],
        "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "1" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame next_test(self)",
          "explain": "pop argument (1), assign to self, and run method \"next_test\"",
          "explain2": { "text": "pop argument (#+), assign to self, and run method #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "next_test" } ] },
          "npc": "703",
          "fp": "1",
          "trace": [
{"pc": "703","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "702"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "704",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "703"
        },

        {
          "code": "Push \"Testing next\"",
          "explain": "push constant \"Testing next\"",
          "explain2": { "text": "push constant \"Testing next\"", "args": [] },
          "npc": "705",
          "push": [ { "type": "atom", "value": "Testing next" } ],
          "pc": "704"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"Testing next\", []); insert first value into the second; push result ([\"Testing next\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "Testing next" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing next" } ] } ] },
          "npc": "706",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "Testing next" } ] } ],
          "pc": "705"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (1) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "self" } ] },
          "npc": "707",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "706"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [\"Testing next\"]); insert first value into the second; push result ([\"Testing next\", 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "atom", "value": "Testing next" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "708",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        }

      ],
      "ctxbag": {
          "16af18b6a": "1",
          "16af18bda": "1",
          "16af18c7a": "1",
          "3f000014a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "16af18caa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "753",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "753","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "16af18b6a",
          "fp": "1",
          "name": "insert_test(1)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "insert_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "16af18bda",
          "fp": "1",
          "name": "insert_test(2)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "3f000014a",
          "fp": "1",
          "name": "next_test(1)",
          "entry": "702",
          "pc": "708",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] }],
          "trace": [
{"pc": "708","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "16af18c7a",
          "fp": "1",
          "name": "next_test(2)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "next_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "60",
      "tid": "3",
      "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } },
      "name": "next_test(1)",
      "context": {
        "tid": "3",
        "hvalue": "3f000014a",
        "fp": "1",
        "name": "next_test(1)",
        "entry": "702",
        "pc": "708",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] }],
        "trace": [
{"pc": "708","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"Testing next\", 1]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "Testing next" }, { "type": "int", "value": "1" } ] },
          "npc": "709",
          "fp": "1",
          "trace": [
{"pc": "709","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ ],
          "pc": "708"
        },

        {
          "code": "Push PC(589)",
          "explain": "push program counter constant 589 ()",
          "explain2": { "text": "push program counter constant 589 ()", "args": [ { "type": "atom", "value": "next" } ] },
          "npc": "710",
          "push": [ { "type": "pc", "value": "589" } ],
          "pc": "709"
        },

        {
          "code": "Push ?d",
          "explain": "push constant ?d",
          "explain2": { "text": "push constant ?d", "args": [] },
          "npc": "711",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "710"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values (?d, PC(589)); push result (?PC(589)[?d])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "pc", "value": "589" }, { "type": "address", "func": { "type": "pc", "value": "589" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ] },
          "npc": "712",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "589" }, "args": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ],
          "pc": "711"
        },

        {
          "code": "Load",
          "explain": "pop an argument (?d) and call method (589: \"next\")",
          "explain2": { "text": "pop an argument (#+) and call method (589: #+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "next" } ] },
          "npc": "589",
          "fp": "4",
          "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "589","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "self": { "type": "int", "value": "1" } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "11394" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "712"
        },

        {
          "code": "Frame next(d)",
          "explain": "pop argument (?d), assign to d, and run method \"next\"",
          "explain2": { "text": "pop argument (#+), assign to d, and run method #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "next" } ] },
          "npc": "590",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "589"
        }

      ],
      "ctxbag": {
          "16af18b6a": "1",
          "16af18c7a": "1",
          "37000000a": "1",
          "3f00000da": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "16af18caa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "753",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "753","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "16af18b6a",
          "fp": "1",
          "name": "insert_test(1)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "insert_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "16af18bda",
          "fp": "1",
          "name": "insert_test(2)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "37000000a",
          "fp": "4",
          "name": "next_test(1)",
          "entry": "702",
          "pc": "590",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "11394" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }],
          "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "590","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "16af18c7a",
          "fp": "1",
          "name": "next_test(2)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "next_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "56",
      "tid": "2",
      "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } },
      "name": "insert_test(2)",
      "context": {
        "tid": "2",
        "hvalue": "16af18bda",
        "fp": "1",
        "name": "insert_test(2)",
        "entry": "653",
        "pc": "653",
        "sp": "1",
        "stack": [{ "type": "int", "value": "2" }],
        "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ },"sp": 0}
        ],
        "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "2" } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame insert_test(self)",
          "explain": "pop argument (2), assign to self, and run method \"insert_test\"",
          "explain2": { "text": "pop argument (#+), assign to self, and run method #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "insert_test" } ] },
          "npc": "654",
          "fp": "1",
          "trace": [
{"pc": "654","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "653"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "655",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "654"
        },

        {
          "code": "Push \"Testing insert\"",
          "explain": "push constant \"Testing insert\"",
          "explain2": { "text": "push constant \"Testing insert\"", "args": [] },
          "npc": "656",
          "push": [ { "type": "atom", "value": "Testing insert" } ],
          "pc": "655"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"Testing insert\", []); insert first value into the second; push result ([\"Testing insert\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "Testing insert" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" } ] } ] },
          "npc": "657",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" } ] } ],
          "pc": "656"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "658",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "657"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [\"Testing insert\"]); insert first value into the second; push result ([\"Testing insert\", 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "659",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] } ],
          "pc": "658"
        }

      ],
      "ctxbag": {
          "16af18b6a": "1",
          "16af18c7a": "1",
          "3f00000da": "1",
          "3f000014a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "16af18caa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "753",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "753","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "16af18b6a",
          "fp": "1",
          "name": "insert_test(1)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "insert_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "3f00000da",
          "fp": "1",
          "name": "insert_test(2)",
          "entry": "653",
          "pc": "659",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "659","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "37000000a",
          "fp": "4",
          "name": "next_test(1)",
          "entry": "702",
          "pc": "590",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "11394" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }],
          "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "590","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "16af18c7a",
          "fp": "1",
          "name": "next_test(2)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "next_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "7",
      "tid": "2",
      "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } },
      "name": "insert_test(2)",
      "context": {
        "tid": "2",
        "hvalue": "3f00000da",
        "fp": "1",
        "name": "insert_test(2)",
        "entry": "653",
        "pc": "659",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] }],
        "trace": [
{"pc": "659","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
        ],
        "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Print",
          "explain": "pop value ([\"Testing insert\", 2]) and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] } ] },
          "print": { "type": "list", "value": [{ "type": "atom", "value": "Testing insert" }, { "type": "int", "value": "2" } ] },
          "npc": "660",
          "fp": "1",
          "trace": [
{"pc": "660","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "pop": "1",
          "push": [ ],
          "pc": "659"
        },

        {
          "code": "Push PC(442)",
          "explain": "push program counter constant 442 ()",
          "explain2": { "text": "push program counter constant 442 ()", "args": [ { "type": "atom", "value": "insert" } ] },
          "npc": "661",
          "push": [ { "type": "pc", "value": "442" } ],
          "pc": "660"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "662",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "661"
        },

        {
          "code": "Push ?d",
          "explain": "push constant ?d",
          "explain2": { "text": "push constant ?d", "args": [] },
          "npc": "663",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "662"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?d, []); insert first value into the second; push result ([?d])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ] },
          "npc": "664",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] } ],
          "pc": "663"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "665",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "664"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?d]); insert first value into the second; push result ([?d, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ] }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] } ] },
          "npc": "666",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] } ],
          "pc": "665"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([?d, 2], PC(442)); push result (?PC(442)[[?d, 2]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] }, { "type": "pc", "value": "442" }, { "type": "address", "func": { "type": "pc", "value": "442" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "667",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "442" }, "args": [{ "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "666"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([?d, 2]) and call method (442: \"insert\")",
          "explain2": { "text": "pop an argument (#+) and call method (442: #+)", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] }, { "type": "atom", "value": "insert" } ] },
          "npc": "442",
          "fp": "4",
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "442","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ "self": { "type": "int", "value": "2" } },"sp": 3}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "10674" }, { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] } ],
          "pc": "667"
        },

        {
          "code": "Frame insert(d, v)",
          "explain": "pop argument ([?d, 2]), assign to (d, v), and run method \"insert\"",
          "explain2": { "text": "pop argument (#+), assign to (d, v), and run method #+", "args": [ { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] }, { "type": "atom", "value": "insert" } ] },
          "npc": "443",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "442"
        }

      ],
      "ctxbag": {
          "16af18b6a": "1",
          "16af18c7a": "1",
          "37000000a": "1",
          "3b000007a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "16af18caa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "753",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "753","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "16af18b6a",
          "fp": "1",
          "name": "insert_test(1)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "insert_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "3b000007a",
          "fp": "4",
          "name": "insert_test(2)",
          "entry": "653",
          "pc": "443",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "10674" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }],
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "443","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },"sp": 3}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "37000000a",
          "fp": "4",
          "name": "next_test(1)",
          "entry": "702",
          "pc": "590",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "11394" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }],
          "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "590","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "16af18c7a",
          "fp": "1",
          "name": "next_test(2)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "next_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "73",
      "tid": "2",
      "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [] } } ] } },
      "name": "insert_test(2)",
      "context": {
        "tid": "2",
        "hvalue": "3b000007a",
        "fp": "4",
        "name": "insert_test(2)",
        "entry": "653",
        "pc": "443",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "10674" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "2" } } ] }],
        "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "443","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },"sp": 3}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "444",
          "fp": "4",
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "444","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },"sp": 3}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "443"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "445",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "444"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "446",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "445"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"elements\", ?d); push result (?d[\"elements\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "elements" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "npc": "447",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ],
          "pc": "446"
        },

        {
          "code": "Push PC(2)",
          "explain": "push program counter constant 2 ()",
          "explain2": { "text": "push program counter constant 2 ()", "args": [ { "type": "atom", "value": "subseq" } ] },
          "npc": "448",
          "push": [ { "type": "pc", "value": "2" } ],
          "pc": "447"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "449",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "448"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "450",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "449"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "451",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "450"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"elements\", ?d); push result (?d[\"elements\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "elements" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "npc": "452",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ],
          "pc": "451"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"elements\"]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] }, { "type": "list", "value": [] } ] },
          "npc": "453",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "452"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([], []); insert first value into the second; push result ([[]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "list", "value": [] } ] } ] },
          "npc": "454",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [] } ] } ],
          "pc": "453"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "455",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "454"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [[]]); insert first value into the second; push result ([[], 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "list", "value": [] } ] }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" } ] } ] },
          "npc": "456",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" } ] } ],
          "pc": "455"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "457",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "456"
        },

        {
          "code": "Push \"current\"",
          "explain": "push constant \"current\"",
          "explain2": { "text": "push constant \"current\"", "args": [] },
          "npc": "458",
          "push": [ { "type": "atom", "value": "current" } ],
          "pc": "457"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"current\", ?d); push result (?d[\"current\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "current" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "npc": "459",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ],
          "pc": "458"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"current\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "460",
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "459"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [[], 0]); insert first value into the second; push result ([[], 0, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "461",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "460"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([[], 0, 0], PC(2)); push result (?PC(2)[[[], 0, 0]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "pc", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "2" }, "args": [{ "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "462",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "2" }, "args": [{ "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "461"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([[], 0, 0]) and call method (2: \"subseq\")",
          "explain2": { "text": "pop an argument (#+) and call method (2: #+)", "args": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "subseq" } ] },
          "npc": "2",
          "fp": "8",
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "463","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },"sp": 3},{"pc": "2","xpc": "2","method_name": { "type": "atom", "value": "subseq" },
"method_arg": { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] },
"method": "subseq([], 0, 0)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },"sp": 7}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "7394" }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "462"
        },

        {
          "code": "Frame subseq(s, b, e)",
          "explain": "pop argument ([[], 0, 0]), assign to (s, b, e), and run method \"subseq\"",
          "explain2": { "text": "pop argument (#+), assign to (s, b, e), and run method #+", "args": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "subseq" } ] },
          "npc": "3",
          "local": { "b": { "type": "int", "value": "0" }, "e": { "type": "int", "value": "0" }, "s": { "type": "list", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "d" }, "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } }, { "key": { "type": "atom", "value": "v" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "2"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "4",
          "push": [ ],
          "pc": "3"
        },

        {
          "code": "Push ()",
          "explain": "initialize accumulator for list comprehension: push constant ()",
          "explain2": { "text": "initialize accumulator for list comprehension: push constant ()", "args": [] },
          "npc": "5",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "4"
        },

        {
          "code": "StoreVar $accu3",
          "explain": "pop value ([]) and store locally in variable \\\"$accu3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu3\"", "args": [ { "type": "list", "value": [] } ] },
          "npc": "6",
          "local": { "$accu3": { "type": "list", "value": [] }, "b": { "type": "int", "value": "0" }, "e": { "type": "int", "value": "0" }, "s": { "type": "list", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "5"
        },

        {
          "code": "LoadVar b",
          "explain": "push value (0) of variable \"b\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "b" } ] },
          "npc": "7",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "6"
        },

        {
          "code": "DelVar b",
          "explain": "delete method variable b",
          "explain2": { "text": "delete method variable b", "args": [] },
          "npc": "8",
          "local": { "$accu3": { "type": "list", "value": [] }, "e": { "type": "int", "value": "0" }, "s": { "type": "list", "value": [] } },
          "push": [ ],
          "pc": "7"
        },

        {
          "code": "LoadVar e",
          "explain": "push value (0) of variable \"e\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "e" } ] },
          "npc": "9",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "8"
        },

        {
          "code": "DelVar e",
          "explain": "delete method variable e",
          "explain2": { "text": "delete method variable e", "args": [] },
          "npc": "10",
          "local": { "$accu3": { "type": "list", "value": [] }, "s": { "type": "list", "value": [] } },
          "push": [ ],
          "pc": "9"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "11",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "10"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 0); the second integer minus the first; push result (-1)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "-1" } ] },
          "npc": "12",
          "pop": "2",
          "push": [ { "type": "int", "value": "-1" } ],
          "pc": "11"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (-1, 0); range of integers; push result ({})",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "-1" }, { "type": "int", "value": "0" }, { "type": "set", "value": [] } ] },
          "npc": "13",
          "pop": "2",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "12"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "14",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "13"
        },

        {
          "code": "Cut(x)",
          "explain": "pop index (0) and value ({}); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [] } ] },
          "npc": "15",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "14"
        },

        {
          "code": "JumpCond False 26",
          "explain": "pop value (False), compare to False, and jump to 26 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 26 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "26",
          "pop": "1",
          "push": [ ],
          "pc": "15"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "27",
          "local": { "$accu3": { "type": "list", "value": [] } },
          "push": [ ],
          "pc": "26"
        },

        {
          "code": "DelVar x",
          "explain": "delete method variable x",
          "explain2": { "text": "delete method variable x", "args": [] },
          "npc": "28",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "LoadVar $accu3",
          "explain": "push value ([]) of variable \"$accu3\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "$accu3" } ] },
          "npc": "29",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "DelVar $accu3",
          "explain": "delete method variable $accu3",
          "explain2": { "text": "delete method variable $accu3", "args": [] },
          "npc": "30",
          "local": { },
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value ([]) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "list", "value": [] } ] },
          "npc": "31",
          "local": { "result": { "type": "list", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "30"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "list", "value": [] } ] },
          "npc": "463",
          "fp": "4",
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "463","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },"sp": 3}
          ],
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "v": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ ],
          "pc": "31"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "464",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "463"
        },

        {
          "code": "LoadVar v",
          "explain": "push value (2) of variable \"v\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "v" } ] },
          "npc": "465",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "464"
        },

        {
          "code": "DelVar v",
          "explain": "delete method variable v",
          "explain2": { "text": "delete method variable v", "args": [] },
          "npc": "466",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "push": [ ],
          "pc": "465"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "467",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "466"
        },

        {
          "code": "Push PC(2)",
          "explain": "push program counter constant 2 ()",
          "explain2": { "text": "push program counter constant 2 ()", "args": [ { "type": "atom", "value": "subseq" } ] },
          "npc": "468",
          "push": [ { "type": "pc", "value": "2" } ],
          "pc": "467"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "469",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "468"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "470",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "469"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "471",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "470"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"elements\", ?d); push result (?d[\"elements\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "elements" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "npc": "472",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ],
          "pc": "471"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"elements\"]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] }, { "type": "list", "value": [] } ] },
          "npc": "473",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "472"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([], []); insert first value into the second; push result ([[]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "list", "value": [] } ] } ] },
          "npc": "474",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [] } ] } ],
          "pc": "473"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "475",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "474"
        },

        {
          "code": "Push \"current\"",
          "explain": "push constant \"current\"",
          "explain2": { "text": "push constant \"current\"", "args": [] },
          "npc": "476",
          "push": [ { "type": "atom", "value": "current" } ],
          "pc": "475"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"current\", ?d); push result (?d[\"current\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "current" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "npc": "477",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ],
          "pc": "476"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"current\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "478",
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "477"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [[]]); insert first value into the second; push result ([[], 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "list", "value": [] } ] }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" } ] } ] },
          "npc": "479",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" } ] } ],
          "pc": "478"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "480",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "479"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "481",
          "local": { },
          "push": [ ],
          "pc": "480"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "482",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "481"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"elements\", ?d); push result (?d[\"elements\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "elements" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "npc": "483",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ],
          "pc": "482"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"elements\"]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] }, { "type": "list", "value": [] } ] },
          "npc": "484",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "483"
        },

        {
          "code": "1-ary len",
          "explain": "pop a value ([]); push result (0)",
          "explain2": { "text": "pop a value (#+); push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "int", "value": "0" } ] },
          "npc": "485",
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "484"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [[], 0]); insert first value into the second; push result ([[], 0, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "486",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "485"
        },

        {
          "code": "2-ary Closure",
          "explain": "pop 2 values ([[], 0, 0], PC(2)); push result (?PC(2)[[[], 0, 0]])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "pc", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "2" }, "args": [{ "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "487",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "2" }, "args": [{ "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "486"
        },

        {
          "code": "Load",
          "explain": "pop an argument ([[], 0, 0]) and call method (2: \"subseq\")",
          "explain2": { "text": "pop an argument (#+) and call method (2: #+)", "args": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "subseq" } ] },
          "npc": "2",
          "fp": "10",
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "488","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ },"sp": 3},{"pc": "2","xpc": "2","method_name": { "type": "atom", "value": "subseq" },
"method_arg": { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] },
"method": "subseq([], 0, 0)","calltype": "normal","vars":{ },"sp": 9}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [] }, { "type": "int", "value": "7794" }, { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "487"
        },

        {
          "code": "Frame subseq(s, b, e)",
          "explain": "pop argument ([[], 0, 0]), assign to (s, b, e), and run method \"subseq\"",
          "explain2": { "text": "pop argument (#+), assign to (s, b, e), and run method #+", "args": [ { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "atom", "value": "subseq" } ] },
          "npc": "3",
          "local": { "b": { "type": "int", "value": "0" }, "e": { "type": "int", "value": "0" }, "s": { "type": "list", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "2"
        },

        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "explain2": { "text": "delete method variable result", "args": [] },
          "npc": "4",
          "push": [ ],
          "pc": "3"
        },

        {
          "code": "Push ()",
          "explain": "initialize accumulator for list comprehension: push constant ()",
          "explain2": { "text": "initialize accumulator for list comprehension: push constant ()", "args": [] },
          "npc": "5",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "4"
        },

        {
          "code": "StoreVar $accu3",
          "explain": "pop value ([]) and store locally in variable \\\"$accu3\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu3\"", "args": [ { "type": "list", "value": [] } ] },
          "npc": "6",
          "local": { "$accu3": { "type": "list", "value": [] }, "b": { "type": "int", "value": "0" }, "e": { "type": "int", "value": "0" }, "s": { "type": "list", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "5"
        },

        {
          "code": "LoadVar b",
          "explain": "push value (0) of variable \"b\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "b" } ] },
          "npc": "7",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "6"
        },

        {
          "code": "DelVar b",
          "explain": "delete method variable b",
          "explain2": { "text": "delete method variable b", "args": [] },
          "npc": "8",
          "local": { "$accu3": { "type": "list", "value": [] }, "e": { "type": "int", "value": "0" }, "s": { "type": "list", "value": [] } },
          "push": [ ],
          "pc": "7"
        },

        {
          "code": "LoadVar e",
          "explain": "push value (0) of variable \"e\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "e" } ] },
          "npc": "9",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "8"
        },

        {
          "code": "DelVar e",
          "explain": "delete method variable e",
          "explain2": { "text": "delete method variable e", "args": [] },
          "npc": "10",
          "local": { "$accu3": { "type": "list", "value": [] }, "s": { "type": "list", "value": [] } },
          "push": [ ],
          "pc": "9"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "11",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "10"
        },

        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 0); the second integer minus the first; push result (-1)",
          "explain2": { "text": "pop 2 values (#+, #+); the second integer minus the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "-1" } ] },
          "npc": "12",
          "pop": "2",
          "push": [ { "type": "int", "value": "-1" } ],
          "pc": "11"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (-1, 0); range of integers; push result ({})",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "-1" }, { "type": "int", "value": "0" }, { "type": "set", "value": [] } ] },
          "npc": "13",
          "pop": "2",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "12"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "14",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "13"
        },

        {
          "code": "Cut(x)",
          "explain": "pop index (0) and value ({}); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [] } ] },
          "npc": "15",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "14"
        },

        {
          "code": "JumpCond False 26",
          "explain": "pop value (False), compare to False, and jump to 26 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 26 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "26",
          "pop": "1",
          "push": [ ],
          "pc": "15"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "27",
          "local": { "$accu3": { "type": "list", "value": [] } },
          "push": [ ],
          "pc": "26"
        },

        {
          "code": "DelVar x",
          "explain": "delete method variable x",
          "explain2": { "text": "delete method variable x", "args": [] },
          "npc": "28",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "LoadVar $accu3",
          "explain": "push value ([]) of variable \"$accu3\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "list", "value": [] }, { "type": "atom", "value": "$accu3" } ] },
          "npc": "29",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "DelVar $accu3",
          "explain": "delete method variable $accu3",
          "explain2": { "text": "delete method variable $accu3", "args": [] },
          "npc": "30",
          "local": { },
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "StoreVar result",
          "explain": "pop value ([]) and store locally in variable \\\"result\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"result\"", "args": [ { "type": "list", "value": [] } ] },
          "npc": "31",
          "local": { "result": { "type": "list", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "30"
        },

        {
          "code": "ReturnOp(result)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "list", "value": [] } ] },
          "npc": "488",
          "fp": "4",
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0},{"pc": "488","xpc": "442","method_name": { "type": "atom", "value": "insert" },
"method_arg": { "type": "list", "value": [{ "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "int", "value": "2" } ] },
"method": "insert(?d, 2)","calltype": "normal","vars":{ },"sp": 3}
          ],
          "local": { },
          "pop": "2",
          "push": [ ],
          "pc": "31"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values ([], [2], []); concatenate the lists; push result ([2])",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "489",
          "pop": "3",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "488"
        },

        {
          "code": "Store",
          "explain": "pop value ([2]) and address (?d[\"elements\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" } ] } } ] } },
          "npc": "490",
          "pop": "2",
          "push": [ ],
          "pc": "489"
        },

        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "explain2": { "text": "decrement atomic counter from 1 to 0: no longer atomic", "args": [ ] },
          "npc": "491",
          "atomic": "0",
          "push": [ ],
          "pc": "490"
        },

        {
          "code": "ReturnOp(result. None)",
          "explain": "pop caller's method variables and pc and push result (), or terminate if no caller",
          "explain2": { "text": "pop caller's method variables and pc and push result (), or terminate if no caller", "args": [ { "type": "address" } ] },
          "npc": "668",
          "fp": "1",
          "trace": [
{"pc": "668","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ "self": { "type": "int", "value": "2" } },"sp": 0}
          ],
          "local": { "self": { "type": "int", "value": "2" } },
          "pop": "3",
          "push": [ { "type": "address" } ],
          "pc": "491"
        },

        {
          "code": "Pop",
          "explain": "pop and discard value ()",
          "explain2": { "text": "pop and discard value ()", "args": [ { "type": "address" } ] },
          "npc": "669",
          "pop": "1",
          "push": [ ],
          "pc": "668"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "670",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "669"
        },

        {
          "code": "Push \"Done inserting\"",
          "explain": "push constant \"Done inserting\"",
          "explain2": { "text": "push constant \"Done inserting\"", "args": [] },
          "npc": "671",
          "push": [ { "type": "atom", "value": "Done inserting" } ],
          "pc": "670"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (\"Done inserting\", []); insert first value into the second; push result ([\"Done inserting\"])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "atom", "value": "Done inserting" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" } ] } ] },
          "npc": "672",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" } ] } ],
          "pc": "671"
        },

        {
          "code": "LoadVar self",
          "explain": "push value (2) of variable \"self\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "self" } ] },
          "npc": "673",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "672"
        },

        {
          "code": "DelVar self",
          "explain": "delete method variable self",
          "explain2": { "text": "delete method variable self", "args": [] },
          "npc": "674",
          "local": { },
          "push": [ ],
          "pc": "673"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [\"Done inserting\"]); insert first value into the second; push result ([\"Done inserting\", 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" } ] }, { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "675",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" }, { "type": "int", "value": "2" } ] } ],
          "pc": "674"
        }

      ],
      "ctxbag": {
          "16af18b6a": "1",
          "16af18c7a": "1",
          "37000000a": "1",
          "43000045a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "16af18caa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "753",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "753","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "16af18b6a",
          "fp": "1",
          "name": "insert_test(1)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "insert_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "43000045a",
          "fp": "1",
          "name": "insert_test(2)",
          "entry": "653",
          "pc": "675",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "675","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "37000000a",
          "fp": "4",
          "name": "next_test(1)",
          "entry": "702",
          "pc": "590",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "11394" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }],
          "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "590","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "next": { "type": "AtomicInc" },
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "16af18c7a",
          "fp": "1",
          "name": "next_test(2)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "next_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "193",
      "tid": "3",
      "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" } ] } } ] } },
      "name": "next_test(1)",
      "context": {
        "tid": "3",
        "hvalue": "37000000a",
        "fp": "4",
        "name": "next_test(1)",
        "entry": "702",
        "pc": "590",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "11394" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }],
        "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "590","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
        ],
        "next": { "type": "AtomicInc" },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(eager)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "explain2": { "text": "increment atomic counter from 0 to 1: becomes atomic", "args": [ ] },
          "npc": "591",
          "fp": "4",
          "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "591","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },"sp": 3}
          ],
          "atomic": "1",
          "push": [ ],
          "pc": "590"
        },

        {
          "code": "Push None",
          "explain": "push constant None",
          "explain2": { "text": "push constant None", "args": [] },
          "npc": "592",
          "push": [ { "type": "address" } ],
          "pc": "591"
        },

        {
          "code": "StoreVar returnVal",
          "explain": "pop value (None) and store locally in variable \\\"returnVal\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"returnVal\"", "args": [ { "type": "address" } ] },
          "npc": "593",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "returnVal": { "type": "address" } },
          "pop": "1",
          "push": [ ],
          "pc": "592"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "594",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "593"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "595",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "594"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"elements\", ?d); push result (?d[\"elements\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "elements" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "npc": "596",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ],
          "pc": "595"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"elements\"]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "597",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "596"
        },

        {
          "code": "1-ary len",
          "explain": "pop a value ([2]); compute the length of the list; push result (1)",
          "explain2": { "text": "pop a value (#+); compute the length of the list; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "598",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "597"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "599",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "598"
        },

        {
          "code": "2-ary >",
          "explain": "pop 2 values (0, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "600",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "599"
        },

        {
          "code": "JumpCond False 643",
          "explain": "pop value (True), compare to False, and jump to 643 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 643 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "601",
          "pop": "1",
          "push": [ ],
          "pc": "600"
        },

        {
          "code": "DelVar returnVal",
          "explain": "delete method variable returnVal",
          "explain2": { "text": "delete method variable returnVal", "args": [] },
          "npc": "602",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } },
          "push": [ ],
          "pc": "601"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "603",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "602"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "604",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "603"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"elements\", ?d); push result (?d[\"elements\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "elements" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "npc": "605",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ],
          "pc": "604"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "606",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "605"
        },

        {
          "code": "Push \"current\"",
          "explain": "push constant \"current\"",
          "explain2": { "text": "push constant \"current\"", "args": [] },
          "npc": "607",
          "push": [ { "type": "atom", "value": "current" } ],
          "pc": "606"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"current\", ?d); push result (?d[\"current\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "current" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "npc": "608",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ],
          "pc": "607"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"current\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "609",
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "608"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?d[\"elements\"]); push result (?d[\"elements\"][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "610",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" }, { "type": "int", "value": "0" } ] } ],
          "pc": "609"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"elements\"][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "611",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "610"
        },

        {
          "code": "StoreVar returnVal",
          "explain": "pop value (2) and store locally in variable \\\"returnVal\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"returnVal\"", "args": [ { "type": "int", "value": "2" } ] },
          "npc": "612",
          "local": { "d": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, "returnVal": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "611"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "613",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "612"
        },

        {
          "code": "Push \"current\"",
          "explain": "push constant \"current\"",
          "explain2": { "text": "push constant \"current\"", "args": [] },
          "npc": "614",
          "push": [ { "type": "atom", "value": "current" } ],
          "pc": "613"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"current\", ?d); push result (?d[\"current\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "current" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "npc": "615",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ],
          "pc": "614"
        },

        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "explain2": { "text": "push a copy of the top value on the stack", "args": [] },
          "npc": "616",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ],
          "pc": "615"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"current\"]) and push value (0)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "617",
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "616"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "618",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "617"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "explain2": { "text": "pop 2 values (#+, #+); add the integers; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "619",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "618"
        },

        {
          "code": "Store",
          "explain": "pop value (1) and address (?d[\"current\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" } ] } } ] } },
          "npc": "620",
          "pop": "2",
          "push": [ ],
          "pc": "619"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "621",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "620"
        },

        {
          "code": "Push \"current\"",
          "explain": "push constant \"current\"",
          "explain2": { "text": "push constant \"current\"", "args": [] },
          "npc": "622",
          "push": [ { "type": "atom", "value": "current" } ],
          "pc": "621"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"current\", ?d); push result (?d[\"current\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "current" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "npc": "623",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ],
          "pc": "622"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"current\"]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "624",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "623"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "625",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "624"
        },

        {
          "code": "Push \"elements\"",
          "explain": "push constant \"elements\"",
          "explain2": { "text": "push constant \"elements\"", "args": [] },
          "npc": "626",
          "push": [ { "type": "atom", "value": "elements" } ],
          "pc": "625"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"elements\", ?d); push result (?d[\"elements\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "elements" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ] },
          "npc": "627",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] } ],
          "pc": "626"
        },

        {
          "code": "Load",
          "explain": "pop address (?d[\"elements\"]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "elements" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "628",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "627"
        },

        {
          "code": "1-ary len",
          "explain": "pop a value ([2]); compute the length of the list; push result (1)",
          "explain2": { "text": "pop a value (#+); compute the length of the list; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "629",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "628"
        },

        {
          "code": "2-ary >=",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "630",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "629"
        },

        {
          "code": "JumpCond False 637",
          "explain": "pop value (True), compare to False, and jump to 637 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 637 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "631",
          "pop": "1",
          "push": [ ],
          "pc": "630"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (?d) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "atom", "value": "d" } ] },
          "npc": "632",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] } ],
          "pc": "631"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "633",
          "local": { "returnVal": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "632"
        },

        {
          "code": "Push \"current\"",
          "explain": "push constant \"current\"",
          "explain2": { "text": "push constant \"current\"", "args": [] },
          "npc": "634",
          "push": [ { "type": "atom", "value": "current" } ],
          "pc": "633"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (\"current\", ?d); push result (?d[\"current\"])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "atom", "value": "current" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "npc": "635",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ],
          "pc": "634"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "636",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "635"
        },

        {
          "code": "Store",
          "explain": "pop value (0) and address (?d[\"current\"]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" }, { "type": "atom", "value": "current" } ] } ] },
          "shared": { "d": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "current" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "elements" }, "value": { "type": "list", "value": [{ "type": "int", "value": "2" } ] } } ] } },
          "npc": "637",
          "pop": "2",
          "push": [ ],
          "pc": "636"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "638",
          "push": [ ],
          "pc": "637"
        },

        {
          "code": "Push ?disque$return",
          "explain": "push constant ?disque$return",
          "explain2": { "text": "push constant ?disque$return", "args": [] },
          "npc": "639",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "disque$return" } ] } ],
          "pc": "638"
        },

        {
          "code": "LoadVar returnVal",
          "explain": "push value (2) of variable \"returnVal\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "returnVal" } ] },
          "npc": "640",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "639"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?disque$return); push result (?disque$return[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "disque$return" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "disque$return" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "641",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "disque$return" }, { "type": "int", "value": "2" } ] } ],
          "pc": "640"
        },

        {
          "code": "Load",
          "explain": "pop an address and push the value at the address",
          "explain2": { "text": "pop an address and push the value at the address", "args": [] },
          "npc": "641",
          "failure": "Load ?disque$return[2]: can't load",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "pc": "641"
        }

      ],
      "ctxbag": {
          "16af18b6a": "1",
          "16af18c7a": "1",
          "37000023a": "1",
          "43000045a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "16af18caa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "753",
          "sp": "1",
          "stack": [{ "type": "address" }],
          "trace": [
{"pc": "753","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "16af18b6a",
          "fp": "1",
          "name": "insert_test(1)",
          "entry": "653",
          "pc": "653",
          "sp": "1",
          "stack": [{ "type": "int", "value": "1" }],
          "trace": [
{"pc": "653","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "insert_test(1)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "insert_test", "args": "self", "value": { "type": "int", "value": "1" } },
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "43000045a",
          "fp": "1",
          "name": "insert_test(2)",
          "entry": "653",
          "pc": "675",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" }, { "type": "int", "value": "2" } ] }],
          "trace": [
{"pc": "675","xpc": "653","method_name": { "type": "atom", "value": "insert_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "insert_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Print", "value": { "type": "list", "value": [{ "type": "atom", "value": "Done inserting" }, { "type": "int", "value": "2" } ] } },
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "37000023a",
          "fp": "4",
          "name": "next_test(1)",
          "entry": "702",
          "pc": "641",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [] }, { "type": "list", "value": [] }, { "type": "int", "value": "11394" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "self" }, "value": { "type": "int", "value": "1" } } ] }],
          "trace": [
{"pc": "713","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "1" },
"method": "next_test(1)","calltype": "process","vars":{ "self": { "type": "int", "value": "1" } },"sp": 0},{"pc": "641","xpc": "589","method_name": { "type": "atom", "value": "next" },
"method_arg": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "d" } ] },
"method": "next(?d)","calltype": "normal","vars":{ "returnVal": { "type": "int", "value": "2" } },"sp": 3}
          ],
          "failure": "Load ?disque$return[2]: can't load",
          "this": { "type": "dict", "value": [] },
          "atomic": "1",
          "mode": "failed"
        },
        {
          "tid": "4",
          "hvalue": "16af18c7a",
          "fp": "1",
          "name": "next_test(2)",
          "entry": "702",
          "pc": "702",
          "sp": "1",
          "stack": [{ "type": "int", "value": "2" }],
          "trace": [
{"pc": "702","xpc": "702","method_name": { "type": "atom", "value": "next_test" },
"method_arg": { "type": "int", "value": "2" },
"method": "next_test(2)","calltype": "process","vars":{ },"sp": 0}
          ],
          "next": { "type": "Frame", "name": "next_test", "args": "self", "value": { "type": "int", "value": "2" } },
          "mode": "runnable"
        }
      ]
    }

  ]
}
